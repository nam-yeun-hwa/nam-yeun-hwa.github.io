2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","868","static/chunks/app/(layoutCase)/posts/%5Bpostid%5D/page-bcca4dd40386392c.js"],""]
3:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","868","static/chunks/app/(layoutCase)/posts/%5Bpostid%5D/page-bcca4dd40386392c.js"],""]
4:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","868","static/chunks/app/(layoutCase)/posts/%5Bpostid%5D/page-bcca4dd40386392c.js"],""]
6:I[5613,[],""]
8:I[1778,[],""]
c:I[8765,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","262","static/chunks/262-683004883e01034d.js","35","static/chunks/35-49bea45569ed55c7.js","464","static/chunks/app/(layoutCase)/layout-e9c1ba8c7c5d810f.js"],""]
5:T43f,// 원본 객체 (복잡한 구조)
let original = {
  name: "Bob",
  info: {
    age: 50,
    birthday: new Date("1975-01-01"),
    address: { city: "Seoul", country: "Korea" }
  },
  hobbies: ["reading", { type: "gaming", level: "pro" }],
  metadata: new Map([["id", 123], ["active", true]])
};

// 깊은 복사
let deepCopy = structuredClone(original);

// 복사본 수정
deepCopy.name = "David";
deepCopy.info.age = 60;
deepCopy.info.address.city = "Busan";
deepCopy.hobbies[1].level = "expert";
deepCopy.metadata.set("id", 456);

console.log(original);
// 출력: {
//   name: "Bob",
//   info: { age: 50, birthday: [Date 1975-01-01], address: { city: "Seoul", country: "Korea" } },
//   hobbies: ["reading", { type: "gaming", level: "pro" }],
//   metadata: Map { "id" => 123, "active" => true }
// }

console.log(deepCopy);
// 출력: {
//   name: "David",
//   info: { age: 60, birthday: [Date 1975-01-01], address: { city: "Busan", country: "Korea" } },
//   hobbies: ["reading", { type: "gaming", level: "expert" }],
//   metadata: Map { "id" => 456, "active" => true }
// }7:["postid","62","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["nkfNnfULw2CnwAoJ46PQL",[[["",{"children":["(layoutCase)",{"children":["posts",{"children":[["postid","62","d"],{"children":["__PAGE__?{\"postid\":\"62\"}",{}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["posts",{"children":[["postid","62","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] 리액트 리렌더링"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["4 months"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"4 months"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"리액트에서 리렌더링(re-rendering)은 컴포넌트가 다시 그려지는 과정입니다. 즉, 어떤 변화가 발생했을 때, 리액트가 해당 컴포넌트(혹은 그 자식들 포함)를 다시 실행해서 UI를 업데이트하는 걸 말합니다. 리렌더링이 너무 많이 발생하면 성능에 부정적인 영향을 줄 수 있습니다. 특히 대규모 애플리케이션이나 자주 렌더링되는 컴포넌트에서는 주의가 필요합니다. 그래서 이번 글에서는 리액트 리렌더링에 대해 이야기 해보려고 합니다."}}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","style":{"fontWeight":"NORMAL"},"children":"언제 리렌더링이 발생할까요?"}],false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"state가 변경될 때"}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\tprops가 변경될 때"}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\tcontext 값이 변경될 때"}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\t부모 컴포넌트가 리렌더링되면 자식도 리렌더링"}}]]}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위와 같은 경우에 리액트 컴포넌트에서는 리렌더링이 발생합니다. 한 컴포넌트에 여러가지 스테이트들이 존재하고 UI에서는 여러 인터렉션(버튼 클릭, 입력, 체크박스 등)이 발생하며 스테이드 값들이 변경될때 컴포넌트는 리렌더링 되고 있다고 생각하면 됩니다."}}],[false,false,false,false],["$","$L3",null,{"code":"const MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => setCount(count + 1);\n\n  return <button onClick={handleClick}>{count}</button>;\n};\n","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위 함수가 리렌더링이 일어나면 "}}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"버튼 클릭 → setCount 호출 → count 값 변경"}}],"$undefined",["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"변경된 state로 인해 MyComponent() 함수 전체가 다시 실행됨"}}],"$undefined",["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"count, handleClick, JSX 등이 다시 계산됨"}}],"$undefined",["$","li","6",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"Virtual DOM에서 변화 비교 후, 실제 DOM은 필요한 부분만 업데이트됨"}}]]}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위와 같은 일이 이루어 집니다. 여기에서 UI는 최소한으로 부분 업데이트 되며 handleClick 함수는 새로 생성됩니다. 새로 생성된다 함은 함수 객체 자체가 메모리에 새로 만들어지는 것입니다. "}}],["$","$L3",null,{"code":"const handleClick = () => setCount(count + 1);","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위 코드는 함수 표현식(= 함수 리터럴)이기 때문에 이 줄이 실행될 때마다 새로운 함수 객체가 메모리에 만들어집니다. <br /> 코드로 확인해 보겠습니다."}}],["$","$L3",null,{"code":"const MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => setCount(count + 1);\n\n  useEffect(() => {\n    console.log(\"handleClick 함수가 새로 만들어졌어요!\");\n  }, [handleClick]);\n\n  return <button onClick={handleClick}>{count}</button>;\n};\n","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"버튼을 누르면 setCount로 상태가 바뀌고,"}}],"$undefined",["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"컴포넌트가 다시 렌더링됨,"}}],"$undefined",["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"그러면 handleClick도 새로 생성됨,"}}],"$undefined",["$","li","6",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"따라서 useEffect가 실행됨 → 콘솔에 로그 출력!"}}]]}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","style":{"fontWeight":"NORMAL"},"children":"그럼 왜 리렌더링 때마다 새로 생성될까요?"}],false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"리액트 함수형 컴포넌트는 결국 함수이자, 매번 실행되는 실행 단위입니다. 여기서 컴포넌트가 호출되면, 그 내부의 handleClick = () =&gt; { ... }도 다시 실행되는 것입니다.\n그래서 이 때마다 새로운 함수 객체가 생성되는 것이라고 볼 수 있습니다. 그럼 조금 더 들어가서 리액트 컴포넌트가 리렌더링이 덜 되도록 하는 방법에 대해 생각해 보도록 하겠습니다."}}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"한 컴포넌트에서 여러 기능을 가지고 여러 스테이트들을 관리하던 것을 훅에서 스테이트 값이나 상태 값을 관리하고, 컴포넌트는 순수하게 인터렉션만 처리하도록 설계된 경우, 해당 컴포넌트는 스테이트 변경에 따른 리렌더링을 피할 수 있습니다. 하지만 이게 보장되려면 몇 가지 조건과 주의점이 필요합니다. 아래에서 이 상황을 자세히 분석하고, 왜 리렌더링이 일어나지 않을 수 있는지, 그리고 어떤 경우에 주의해야 하는지 설명하겠습니다. 코드를 통해 살펴 보겠습니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","[커스텀 훅] usePdfController.js"]}]],["$","$L3",null,{"code":"const usePdfController = () => {\n  const [file, setFile] = useState(null);\n  const pdfInputRef = useRef(null);\n\n  const handlePDFChange = (event) => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n  };\n\n  return { file, pdfInputRef, handlePDFChange };\n};","children":"$undefined"}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","[자식 컴포넌트] FileUpload.jsx (인터랙션만 처리)"]}]],["$","$L3",null,{"code":"const FileUpload = ({ onChange, InputRef, children }) => {\n  return (\n    <label>\n      {children}\n      <input type=\"file\" ref={InputRef} onChange={onChange} style={{ display: 'none' }} />\n    </label>\n  );\n};\n","children":"$undefined"}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","[부모 컴포넌트] StampController.jsx"]}]],["$","$L3",null,{"code":"const StampController = () => {\n  const { file, pdfInputRef, handlePDFChange } = usePdfController();\n\n  return (\n    <div>\n      <FileUpload InputRef={pdfInputRef} onChange={handlePDFChange}>\n        PDF 업로드\n      </FileUpload>\n      {file?.name && <div>{file.name}</div>}\n    </div>\n  );\n};","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>스테이트 관리</b>: 스테이트는 커스텀 훅(예: usePdfController) 또는 스토어(예: useCanvasStore)에서 관리."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>인터랙션 컴포넌트</b>: 특정 컴포넌트(예: FileUpload, Button)는 사용자 인터랙션(클릭, 파일 선택 등)만 처리하고, 스테이트나 상태 값을 직접 소유하지 않음."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>인터랙션 처리</b>: 인터랙션은 훅이나 스토어에서 제공하는 함수(예: handlePDFChange, handleDownload)를 호출."}}]]}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","style":{"fontWeight":"NORMAL"},"children":"자식 컴포넌트 <FileUpload/> 리렌더링"}],false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","스테이트 소유 여부"]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"자식 컴포넌트 FileUpload은 자체 스테이트를 가지지 않습니다. 따라서 FileUpload 내부에서 useState나 useReducer로 인해 리렌더링이 발생할 가능성이 없습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"스테이트는 usePdfController에서 관리되며, file 변경은 StampController 같은 부모 컴포넌트에 영향을 줍니다."}}]]}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","Props 안정성"]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"자식 컴포넌트 FileUpload가 받는 props(예: onChange, InputRef)가 변경되지 않는 한, React는 이 컴포넌트를 리렌더링하지 않습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"FileUpload가 props로 받는 handlePDFChange가 메모이제이션되지 않으면, StampController가 리렌더링될 때마다 handlePDFChange는 <b>새로운 함수 참조가 생성</b>되어 FileUpload의 props가 변경된 것으로 간주되어 자식 컴포넌트 FileUpload는 리렌더링 됩니다. 이를 피하기 위해 <u>커스텀 훅 usePdfController에서 handlePDFChange를 메모이제이션(useCallback)하여, 함수가 매 렌더링마다 동일한 참조를 유지</u>하도록 합니다."}}],"$undefined"]}],["$","$L3",null,{"code":"// usePdfController.js\n// ★★★커스텀 훅 내부에서 useCallback 사용\n  const handlePDFChange = useCallback((event) => {\n  const selectedFile = event.target.files[0];\n  setFile(selectedFile);\n}, []);","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"InputRef는 useRef로 생성된 참조로, 렌더링 간에 변경되지 않습니다."}}]]}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","부모 컴포넌트의 리렌더링 영향 "]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"부모 컴포넌트 StampController가 자주 리렌더링되면, 자식 컴포넌트 FileUpload도 기본적으로 리렌더링됩니다. "}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\tReact는 부모가 리렌더링되면 자식도 렌더링 시도"}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\t이를 피하기 위해서는 자식 컴포넌트인 FileUpload을 React.memo로 감싸줍니다."}}]]}],["$","$L3",null,{"code":"const FileUpload = ({ onChange, InputRef, children }) => {\n  console.log('FileUpload rendered');\n  return (\n    <label>\n      {children}\n      <input type=\"file\" ref={InputRef} onChange={onChange} style={{ display: 'none' }} />\n    </label>\n  );\n};\nexport default React.memo(FileUpload);","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"이렇게 하면 onChange, InputRef, children이 변경되지 않는 한 FileUpload은 리렌더링되지 않습니다. 부모컴포넌트 StampController가 file 상태 변경으로 리렌더링되더라도, 자식 컴포넌트 FileUpload가 React.memo로 감싸져 있다면 props가 변경되지 않는 한 리렌더링을 건너뜁니다"}}]]}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"React.memo는 props의 얕은 비교(shallow comparison)를 수행해 props가 변경되지 않는 한 컴포넌트의 리렌더링을 방지합니다."}}]]}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"인터랙션의 경우 (예: 파일 선택)은 handlePDFChange를 호출하고, 이는 usePdfController의 file 상태를 변경합니다. 하지만 이 변경은 StampController의 렌더링에만 직접 영향을 주고, FileUpload은 스테이트를 소유하지 않으므로 간접적인 리렌더링을 피할 수 있습니다."}}]]}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","<FileUpload/> Children Props 변경"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"FileUpload의 children(예: \"PDF 업로드\")이 동적으로 생성되거나 매번 새로운 참조를 가지면, React.memo를 사용하더라도 리렌더링될 수 있습니다. children이 정적이거나 메모이제이션된 값을 사용하도록 합니다."}}],["$","$L3",null,{"code":"<FileUpload InputRef={pdfInputRef} onChange={handlePDFChange}>\n  PDF 업로드\n</FileUpload>","children":"$undefined"}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","<FileUpload/> 같은 자식 컴포넌트가 스토어 상태를 직접 구독하지 않도록 하여 리렌더링을 방지 한다."]}]],["$","$L3",null,{"code":"// 잘못된 예\nconst FileUpload = ({ onChange, InputRef, children }) => {\n  const { file } = useCanvasStore(); // 스토어 구독\n  return <input type=\"file\" ref={InputRef} onChange={onChange} />;\n};\n\n// 올바른 예\nconst FileUpload = ({ onChange, InputRef, children }) => {\n  return <input type=\"file\" ref={InputRef} onChange={onChange} />;\n};","children":"$undefined"}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","style":{"fontWeight":"NORMAL"},"children":"리렌더링이 되지 않는 조건을 지켜는 방법"}],false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"컴포넌트가 자체 스테이트를 소유하지 않고 커스텀 훅으로 관리."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\t컴포넌트가 스토어나 Context를 직접 구독하지 않고 커스텀 훅으로 관리하도록 함."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"전달된 props(함수, 참조, 값)가 메모이제이션되어 전달 받도록 하기."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"컴포넌트가 React.memo로 감싸져 있어 부모 리렌더링의 영향을 받지 않음."}}]]}]],["$","$L4",null,{"postid":62,"prePostTitle":{"id":63,"title":"[TECH-QA] 원시값과 참조형","date":"2025-04-12 22:48:33","folder":"Javascript","tag":["JavaScript","TECH-QA"],"preview":"자바스크립트에서 원시값(Primitive Values)과 참조형(Reference Types)의 동작 방식, 그리고 이들의 불변성(Immutability)과 가변성(Mutability)에 대한 설명입니다.","post":[{"type":"normal","value":"자바스크립트에서 원시값(Primitive Values)과 참조형(Reference Types)의 동작 방식, 그리고 이들의 불변성(Immutability)과 가변성(Mutability)에 대해 설명 해 보겠습니다."},{"type":"Heading","headingType":"h2","value":"원시값 (Primitive Values)"},{"type":"stringlist","value":"<b>정의</b> : 원시값은 더 이상 쪼갤 수 없는 기본 데이터 타입으로, 자바스크립트에서는 undefined, null, boolean, number, bigint, string, symbol이 이에 해당합니다.\n<b>복제 방식</b> : 다른 변수에 원시값을 복사할 때, 해당 값이 그대로 복사되어 새로운 변수에 저장됩니다. 이때 메모리 주소 개념은 관여하지 않고, <b>단순히 값만 복사</b>됩니다.\n<b>불변성</b> : 원시값은 불변값입니다. 값을 변경하려고 하면, 기존 메모리 공간의 값을 수정하는 대신 새로운 메모리 공간에 새로운 값을 저장하고, 변수가 참조하던 메모리 주소를 변경합니다."},{"type":"code","value":"let a = 10; // a는 숫자 10을 저장\nlet b = a;  // b에 a의 값 10을 복사 (독립적인 메모리 공간)\n\nconsole.log(a); // 10\nconsole.log(b); // 10\n\nb = 20; // b에 새로운 값 20을 할당 (새로운 메모리 공간 사용)\nconsole.log(a); // 10 (a는 여전히 10을 참조)\nconsole.log(b); // 20"},{"type":"stringlist","value":"b = a를 실행하면, a의 값 10이 복사되어 b에 저장됩니다. 이때 <b>a와 b는 각각 독립적인 메모리 공간</b>을 가리킵니다.\nb = 20으로 값을 변경하면, b는 새로운 메모리 공간에 20을 저장하고 그 주소를 참조합니다. a는 영향을 받지 않습니다.\n원시값은 불변적이므로, a나 b의 값을 직접 수정하는 대신 새로운 값을 메모리에 할당합니다."},{"type":"Heading","headingType":"h2","value":"참조형 (Reference Types)"},{"type":"stringlist","value":"<b>정의</b> : 참조형은 <span class=\"point\">객체(Object)</span>, <span class=\"point\">배열(Array)</span>, <span class=\"point\">함수(Function)</span> 등으로, 여러 값을 하나의 단위로 묶은 데이터 타입입니다.\n<b>복제 방식</b> : 참조형은 값이 담긴 <b>메모리 주소를 복제</b>합니다. 즉, 변수는 실제 데이터(객체)가 저장된 메모리 주소를 가리키며, 복사 시 이 주소를 복사합니다. <span class=\"point\">따라서 복사된 변수는 원본 객체와 동일한 메모리 주소를 참조</span>합니다.\n<b>가변성</b> : 참조형은 가변값입니다. 객체가 저장된 메모리 공간은 수정 가능하며, 변수는 해당 객체를 직접 변경할 수 있습니다. 객체의 프로퍼티를 추가, 갱신, 삭제할 수 있습니다."},{"type":"code","value":"let obj1 = { name: \"Alice\", age: 25 }; // obj1은 객체의 메모리 주소를 참조\nlet obj2 = obj1; // obj2는 obj1과 동일한 메모리 주소를 참조\n\nconsole.log(obj1); // { name: \"Alice\", age: 25 }\nconsole.log(obj2); // { name: \"Alice\", age: 25 }\n\n// obj2를 통해 객체 수정\nobj2.age = 30;\nobj2.city = \"Seoul\"; // 동적으로 프로퍼티 추가\n\nconsole.log(obj1); // { name: \"Alice\", age: 30, city: \"Seoul\" }\nconsole.log(obj2); // { name: \"Alice\", age: 30, city: \"Seoul\" }\n\n// 프로퍼티 삭제\ndelete obj1.city;\n\nconsole.log(obj1); // { name: \"Alice\", age: 30 }\nconsole.log(obj2); // { name: \"Alice\", age: 30 }"},{"type":"stringlist","value":"obj2 = obj1은 obj1이 참조하는 객체의 메모리 주소를 obj2에 복사합니다. 따라서 obj1과 obj2는 동일한 객체를 가리킵니다.\nobj2.age = 30 또는 obj2.city = \"Seoul\"로 객체를 수정하면, 동일한 메모리 공간을 참조하는 obj1에도 변경 사항이 반영됩니다.\n참조형은 가변적이므로, 객체의 프로퍼티를 동적으로 추가(city), 갱신(age), 삭제(delete obj1.city)할 수 있습니다."},{"type":"Heading","headingType":"h2","value":"원시값 vs 참조형 비교"},{"type":"table","value":"","tables":{"header":[{"accessorKey":"feature","header":"특징"},{"accessorKey":"primitive","header":"원시값 (Primitive)"},{"accessorKey":"reference","header":"참조형 (Reference)"}],"contents":[{"feature":"데이터 타입","primitive":"number, string, boolean 등","reference":"object, array, function 등"},{"feature":"복제 방식","primitive":"값 자체 복사","reference":"메모리 주소 복사"},{"feature":"변경 가능성","primitive":"불변 (새로운 값으로 교체)","reference":"가변 (객체 내부 수정 가능)"},{"feature":"메모리 동작","primitive":"새로운 메모리 공간 생성","reference":"동일한 메모리 공간 공유"},{"feature":"예시","primitive":"let x = 5; x = 10;","reference":"let obj = {a: 1}; obj.a = 2;"}]}},{"type":"Heading","headingType":"h2","value":"참조형의 깊은 복사(Deep Copy)"},{"type":"normal","value":"참조형의 기본 복사는 얕은 복사(Shallow Copy)로, 동일한 객체를 참조하게 됩니다. 객체를 독립적으로 복사하려면 깊은 복사가 필요합니다."},{"type":"Heading","headingType":"h4","value":"얕은 복사 vs 깊은 복사"},{"type":"code","value":"// 얕은 복사\nlet original = { name: \"Bob\", info: { age: 40 } };\nlet shallowCopy = Object.assign({}, original);\n\nshallowCopy.name = \"Charlie\";\nshallowCopy.info.age = 50;\n\nconsole.log(original); // { name: \"Bob\", info: { age: 50 } } (info는 여전히 공유됨)\nconsole.log(shallowCopy); // { name: \"Charlie\", info: { age: 50 } }\n\n// 깊은 복사\nlet deepCopy = JSON.parse(JSON.stringify(original));\n\ndeepCopy.name = \"David\";\ndeepCopy.info.age = 60;\n\nconsole.log(original); // { name: \"Bob\", info: { age: 50 } } (변경되지 않음)\nconsole.log(deepCopy); // { name: \"David\", info: { age: 60 } }"},{"type":"stringlist","value":"얕은 복사(Object.assign)는 최상위 프로퍼티만 복사하고, 중첩 객체(info)는 여전히 원본과 공유됩니다.\n깊은 복사(JSON.parse(JSON.stringify()))는 객체 전체를 새로 생성하여 독립적인 복사본을 만듭니다."},{"type":"Heading","headingType":"h4","value":"원시값 활용"},{"type":"code","value":"function updateScore(score) {\n    score = score + 10; // 새로운 메모리 공간에 값을 저장\n    return score;\n}\n\nlet playerScore = 50;\nconsole.log(updateScore(playerScore)); // 60\nconsole.log(playerScore); // 50 (원본 값은 변경되지 않음)"},{"type":"normal","value":"원시값은 함수 내부에서 수정해도 원본에 영향을 주지 않습니다."},{"type":"Heading","headingType":"h4","value":"참조형 활용"},{"type":"code","value":"function updateProfile(profile) {\n    profile.age += 1; // 동일한 객체를 직접 수정\n    profile.city = \"Busan\"; // 동적 프로퍼티 추가\n}\n\nlet user = { name: \"Eve\", age: 28 };\nupdateProfile(user);\n\nconsole.log(user); // { name: \"Eve\", age: 29, city: \"Busan\" }"},{"type":"normal","value":"참조형은 함수 내부에서 수정하면 원본 객체가 변경됩니다. user 원본 객체가 { name: \"Eve\", age: 28 } 에서 { name: \"Eve\", age: 29, city: \"Busan\" } 으로 변경 됨"},{"type":"stringlist","value":"<b>원시값</b>: 값 자체를 복사, 불변, 재할당 시 새로운 메모리 공간 사용.\n<b>참조형</b>: 메모리 주소를 복사, 가변, 객체 내부를 직접 수정 가능 (프로퍼티 추가/갱신/삭제).\n원시값은 독립적이고 안전하지만 수정이 제한적이며, 참조형은 유연하지만 공유 메모리로 인해 주의가 필요합니다.\n깊은 복사를 통해 참조형의 독립적인 복사가 가능합니다."},{"type":"normal","value":"자바스크립트에서 깊은 복사(Deep Copy)를 하는 방법은 여러 가지가 있습니다. 상황에 따라 간단한 객체부터 복잡한 객체까지 처리할 수 있습니다. 아래에 대표적인 방법과 예제를 정리해 보겠습니다."},{"type":"normal","value":"구조적 복제 (Structured Clone)"},{"type":"normal","value":"structuredClone()은 브라우저 환경(Node.js 17+ 또는 최신 브라우저)에서 제공되는 깊은 복사를 위한 네이티브 메서드입니다. 이 방법은 JSON 방식보다 더 다양한 데이터 타입(예: Date, Map, Set 등)을 처리할 수 있습니다."},{"type":"code","value":"// 원본 객체\nlet original = {\n  name: \"Bob\",\n  info: { age: 50, date: new Date() },\n  hobbies: [\"reading\", \"gaming\"]\n};\n\n// 깊은 복사 (structuredClone 사용)\nlet deepCopy = structuredClone(original);\n\n// 복사본 수정\ndeepCopy.name = \"David\";\ndeepCopy.info.age = 60;\ndeepCopy.hobbies.push(\"coding\");\n\nconsole.log(original);\n// 출력: { name: \"Bob\", info: { age: 50, date: [Date] }, hobbies: [\"reading\", \"gaming\"] }\n\nconsole.log(deepCopy);\n// 출력: { name: \"David\", info: { age: 60, date: [Date] }, hobbies: [\"reading\", \"gaming\", \"coding\"] }"},{"type":"stringlist","value":"structuredClone()은 객체와 그 하위 구조를 완전히 독립적으로 복사합니다.\n원본 객체의 info.age나 hobbies 배열이 수정되지 않음을 확인할 수 있습니다.\nDate 객체도 별도의 인스턴스로 복사되며, JSON 방식과 달리 손실 없이 복사됩니다."},{"type":"Heading","headingType":"h4","value":"재귀 함수를 사용한 깊은 복사"},{"type":"normal","value":"직접 깊은 복사를 구현하는 방법으로, 객체와 배열을 재귀적으로 순회하며 복사합니다. 이 방법은 커스터마이징이 가능하고, 특정 데이터 타입을 추가로 처리할 수 있습니다."},{"type":"code","value":"// 깊은 복사 함수\nfunction deepCopy(obj) {\n  // 원시값이거나 null인 경우 그대로 반환\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n\n  // 배열인 경우\n  if (Array.isArray(obj)) {\n    return obj.map(item => deepCopy(item));\n  }\n\n  // 객체인 경우\n  const copy = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      copy[key] = deepCopy(obj[key]);\n    }\n  }\n  return copy;\n}"},{"type":"code","value":"\n// 원본 객체\nlet original = {\n  name: \"Bob\",\n  info: { age: 50 },\n  hobbies: [\"reading\", \"gaming\"]\n};\n\n// 깊은 복사\nlet deepCopy = deepCopy(original);\n\n// 복사본 수정\ndeepCopy.name = \"David\";\ndeepCopy.info.age = 60;\ndeepCopy.hobbies.push(\"coding\");\n\nconsole.log(original);\n// 출력: { name: \"Bob\", info: { age: 50 }, hobbies: [\"reading\", \"gaming\"] }\n\nconsole.log(deepCopy);\n// 출력: { name: \"David\", info: { age: 60 }, hobbies: [\"reading\", \"gaming\", \"coding\"] }"},{"type":"stringlist","value":"deepCopy 함수는 재귀적으로 객체의 모든 프로퍼티를 복사합니다.\n배열과 객체를 구분하여 처리하며, 원시값은 그대로 반환합니다.\n이 방식은 JSON 방식의 한계를 극복하고, 함수나 undefined 같은 값도 커스터마이징하여 처리할 수 있습니다(필요 시 추가 로직 구현 가능)."},{"type":"Heading","headingType":"h4","value":"Lodash 라이브러리의 _.cloneDeep"},{"type":"normal","value":"실제 프로젝트에서는 Lodash 같은 라이브러리를 사용하는 경우가 많습니다. Lodash의 _.cloneDeep 메서드는 깊은 복사를 간편하게 수행하며, 다양한 데이터 타입을 안전하게 처리합니다."},{"type":"code","value":"// Lodash를 사용하기 위해 필요 (HTML에서는 CDN 또는 모듈로 임포트)\n// 예: <script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"></script>\n\n// 원본 객체\nlet original = {\n  name: \"Bob\",\n  info: { age: 50 },\n  hobbies: [\"reading\", \"gaming\"]\n};\n\n// 깊은 복사 (Lodash 사용)\nlet deepCopy = _.cloneDeep(original);\n\n// 복사본 수정\ndeepCopy.name = \"David\";\ndeepCopy.info.age = 60;\ndeepCopy.hobbies.push(\"coding\");\n\nconsole.log(original);\n// 출력: { name: \"Bob\", info: { age: 50 }, hobbies: [\"reading\", \"gaming\"] }\n\nconsole.log(deepCopy);\n// 출력: { name: \"David\", info: { age: 60 }, hobbies: [\"reading\", \"gaming\", \"coding\"] }"},{"type":"stringlist","value":"_.cloneDeep은 Lodash 라이브러리의 깊은 복사 메서드로, 복잡한 객체 구조를 안전하게 복사합니다.\nJSON 방식보다 다양한 데이터 타입(예: 함수, RegExp, Map)을 지원하며, 성능도 최적화되어 있습니다.\n실제 프로젝트에서 신뢰할 수 있는 방법 중 하나입니다."},{"type":"table","value":"","tables":{"header":[{"accessorKey":"method","header":"방법"},{"accessorKey":"advantage","header":"장점"},{"accessorKey":"disadvantage","header":"단점"}],"contents":[{"method":"JSON.parse(JSON.stringify())","advantage":"간단하고 별도 라이브러리 불필요","disadvantage":"undefined, 함수, Date 등 일부 데이터 타입 손실 가능"},{"method":"structuredClone()","advantage":"네이티브 API, 다양한 데이터 타입 지원, 손실 없음","disadvantage":"브라우저/Node.js 버전 의존성 (구형 환경에서 동작하지 않을 수 있음)"},{"method":"재귀 함수 (deepCopy)","advantage":"커스터마이징 가능, 모든 데이터 타입 처리 가능","disadvantage":"직접 구현해야 하며, 복잡한 객체에서 성능 고려 필요"},{"method":"Lodash _.cloneDeep","advantage":"신뢰성 높음, 다양한 데이터 타입 지원, 테스트 완료된 라이브러리","disadvantage":"외부 라이브러리 의존성 추가 필요"}]}},{"type":"Heading","headingType":"h4","value":"복잡한 객체(중첩 객체, 배열, Date, Map 포함)를 사용한 예제"},{"type":"code","value":"$5"},{"type":"stringlist","value":"중첩 객체(address), 배열 내 객체(hobbies[1]), Date, Map 등 다양한 데이터 타입이 포함된 복잡한 객체를 복사했습니다.\nstructuredClone은 모든 수준에서 독립적인 복사본을 생성하여 원본이 수정되지 않음을 보여줍니다."}]},"nextPostTile":{"id":61,"title":"[TECH-QA] 프로토타입(Prototype)과 프로토타입체이닝","date":"2025-04-10 16:54:33","folder":"Javascript","tag":["JavaScript","TECH-QA","Prototype"],"preview":"자바스크립트에서 프로토타입(prototype)이란 객체가 생성될 때 그 객체를 만드는 데 사용된 원형, 즉 템플릿 역할을 하는 프로토타입 객체를 의미합니다.","post":[{"type":"Heading","headingType":"h2","value":"프로토타입(prototype)"},{"type":"normal","value":"프로토타입(prototype)이란 객체가 생성될 때 그 객체를 만드는 데 사용된 원형, 즉 <b>템플릿 역할</b>을 하는 프로토타입 객체를 의미합니다. 모든 자바스크립트 객체는 이 프로토타입 객체와 연결되어 있으며, 이 연결은 객체의 숨겨진 속성인 <span class=\"point\">__proto__</span>  (proto 속성)를 통해 참조됩니다. 이 <span class=\"point\">__proto__</span> 속성은 <b>해당 객체가 어떤 프로토타입 객체를 기반</b>으로 만들어졌는지를 가리키는 링크 역할을 합니다. 따라서 프로토타입은 객체와 그 원형 객체를 연결하는 핵심적인 메커니즘이라고 볼 수 있습니다."},{"type":"Heading","headingType":"h4","value":"기본 객체의 __proto__"},{"type":"code","value":"// 빈 객체 생성\nconst obj = {};\n\nconsole.log(obj.__proto__); // [Object: null prototype] {} (Object.prototype)\n\nconsole.log(obj.__proto__.__proto__); // null"},{"type":"GuideMessage","value":"obj는 기본 객체로, Object 생성자를 통해 만들어졌습니다.</br>\nobj.__proto__는 <b>Object.prototype을 참조</b>합니다. 이는 <b>모든 기본 객체의 프로토타입</b>입니다.</br>\nObject.prototype의 __proto__는 null로, 프로토타입 체인의 끝을 나타냅니다.","promptTypeProps":"INFO"},{"type":"Heading","headingType":"h4","value":"배열 객체의 __proto__"},{"type":"code","value":"const arr = [1, 2, 3];\n\nconsole.log(arr.__proto__); // [Array: null prototype] [] (Array.prototype)\n\nconsole.log(arr.__proto__.__proto__); // [Object: null prototype] {} (Object.prototype)\n\nconsole.log(arr.__proto__.__proto__.__proto__); // null"},{"type":"stringlist","value":"arr는 배열 객체로, Array 생성자를 통해 만들어졌습니다.\narr.__proto__는 Array.prototype을 참조하며, 배열 관련 메서드(push, pop 등)가 이 프로토타입에 정의되어 있습니다.\nArray.prototype의 __proto__는 Object.prototype을 참조합니다. 따라서 배열도 기본적으로 객체의 속성을 상속받습니다."},{"type":"Heading","headingType":"h4","value":"커스텀 객체와 생성자 함수"},{"type":"code","value":"// 생성자 함수 정의\nfunction Person(name) {\n  this.name = name;\n}\n\n// Person.prototype에 메서드 추가\nPerson.prototype.sayHello = function () {\n  console.log(\"Hello, I'm ${this.name}\");\n};\n\n// 객체 생성\nconst person = new Person(\"Alice\");\n\n// person의 __proto__ 확인\nconsole.log(person.__proto__); // Person { sayHello: [Function (anonymous)] } (Person.prototype)\n\n// Person.prototype의 __proto__ 확인\nconsole.log(person.__proto__.__proto__); // [Object: null prototype] {} (Object.prototype)\n\n// 프로토타입 체인을 따라 메서드 호출\nperson.sayHello(); // Hello, I'm Alice"},{"type":"stringlist","value":"Person은 생성자 함수로, new Person()으로 생성된 person 객체의 __proto__는 Person.prototype을 참조합니다.\nPerson.prototype에는 sayHello 메서드가 정의되어 있으므로, person은 이 메서드를 상속받아 사용할 수 있습니다.\nPerson.prototype.__proto__는 Object.prototype을 참조하며, 체인은 결국 null로 끝납니다."},{"type":"GuideMessage","value":"__proto__는 비표준 속성이지만, 대부분의 브라우저에서 디버깅 용도로 접근 가능합니다. </br> 실제 코드에서는 Object.getPrototypeOf(obj)를 사용하는 것이 권장됩니다.","promptTypeProps":"TIP"},{"type":"code","value":"console.log(Object.getPrototypeOf(person) === Person.prototype); // true"},{"type":"stringlist","value":"__proto__는 객체와 프로토타입 간의 연결을 보여주며, 이를 통해 프로토타입 체이닝이 동작합니다."},{"type":"Heading","headingType":"h2","value":"프로토타입 체인(prototype chain)"},{"type":"normal","value":"프로토타입 체인(prototype chain)에 대해 살펴보면, 객체의 __proto__ 속성이 또 다른 객체의 프로토타입을 참조하고, 그 참조된 프로토타입 객체의 __proto__가 다시 또 다른 프로토타입을 참조하는 식으로 연쇄적으로 이어진 구조를 말합니다. 이 체인은 최종적으로 Object.prototype이라는 기본 프로토타입 객체에 도달 할 때까지 이어지며, 그 끝에는 __proto__가 null인 지점이 존재합니다."},{"type":"Heading","headingType":"h2","value":"프로토타입 체이닝(prototype chaining)"},{"type":"normal","value":"이러한 프로토타입 체인을 활용하여 자바스크립트는 속성이나 메서드를 검색하는데, 이를 프로토타입 체이닝(prototype chaining)이라고 합니다. 예를 들어, 객체에서 특정 속성이나 메서드를 호출하려 할 때, 자바스크립트 엔진은 먼저 그 객체 자체에서 해당 속성을 찾습니다. 만약 찾지 못하면 __proto__를 통해 연결된 프로토타입 객체로 이동하여 검색을 계속하고, 이 과정을 체인을 따라 끝까지 반복합니다. 이렇게 체인을 따라가며 속성을 탐색하는 방식이 프로토타입 체이닝의 핵심입니다."},{"type":"Heading","headingType":"h2","value":"프로토타입 기반 상속(prototype-based inheritance)"},{"type":"normal","value":"자바스크립트에서 객체는 자신의 프로토타입 객체로부터 속성과 메서드를 \"상속\"받아 사용할 수 있습니다."},{"type":"stringlist","value":"<b>동적 연결</b>: 객체는 __proto__를 통해 프로토타입 객체와 연결되며, 이 연결은 런타임에 동적으로 속성이나 메서드를 참조할 수 있게 합니다.\n<b>공유</b>: 프로토타입에 정의된 속성이나 메서드는 해당 프로토타입을 상속받는 모든 객체가 공유합니다. 즉, 각 객체마다 새로 생성되지 않고 프로토타입에서 참조됩니다.\n<b>체인 구조</b>: 상속은 단일 객체 수준에서 끝나는 것이 아니라, 프로토타입 체인을 따라 여러 단계로 이어질 수 있습니다."},{"type":"Heading","headingType":"h4","value":"객체를 통해 상속으로 이해하는 예시"},{"type":"code","value":"// 부모 역할을 할 프로토타입 객체\nconst animal = {\n  eat: function() {\n    console.log(\"${this.name} is eating!\");\n  }\n};\n\n// 자식 객체 생성 및 상속 설정\nconst dog = {\n  name: \"Dog\"\n};\nObject.setPrototypeOf(dog, animal);\n\n// 상속받은 메서드 호출\ndog.eat(); \n// 출력: \"Dog is eating!\"\n\n// 프로토타입 확인\nconsole.log(dog.__proto__ === animal); \n// 출력: true"},{"type":"stringlist","value":"dog 객체는 animal 객체를 프로토타입으로 상속받았습니다.\ndog 자체에는 eat 메서드가 없지만, __proto__를 통해 animal의 eat 메서드를 상속받아 사용할 수 있습니다."},{"type":"Heading","headingType":"h4","value":"생성자 함수를 통한 상속 예시"},{"type":"code","value":"// 부모 생성자 함수\nfunction Animal(name) {\n  this.name = name;\n}\nAnimal.prototype.eat = function() {\n  console.log(\"${this.name} is eating!\");\n};\n\n// 자식 생성자 함수\nfunction Dog(name) {\n  Animal.call(this, name); // Animal의 속성 상속\n}\nObject.setPrototypeOf(Dog.prototype, Animal.prototype); // 프로토타입 상속\n\n// 객체 생성\nconst myDog = new Dog(\"Max\");\n\n// 상속받은 메서드 호출\nmyDog.eat(); \n// 출력: \"Max is eating!\"\n\n// 프로토타입 체인 확인\nconsole.log(myDog.__proto__ === Dog.prototype); \n// 출력: true\nconsole.log(myDog.__proto__.__proto__ === Animal.prototype); \n// 출력: true"},{"type":"stringlist","value":"Dog는 Animal의 프로토타입을 상속받아 eat 메서드를 사용할 수 있습니다.\nAnimal.call(this, name)으로 <b>name 속성을 상속</b>받고, Object.setPrototypeOf로 프로토타입 체인을 연결해 <b>메서드까지 상속</b>받았습니다.\n이는 전통적인 상속처럼 \"부모(Animal)로부터 자식(Dog)이 기능을 물려받는다\"는 개념으로 이해할 수 있습니다."},{"type":"Heading","headingType":"h3","value":"상속으로 볼 수 있는 이유"},{"type":"stringlist","value":"<b>속성과 메서드 재사용</b>: 객체가 프로토타입에서 속성과 메서드를 물려받아 사용하므로, 코드 중복을 줄이고 재사용성을 높이는 상속의 목적을 충족합니다.\n<b>계층 구조</b>: 프로토타입 체인을 통해 부모-자식 관계와 유사한 계층 구조를 형성합니다.\n<b>확장 가능성</b>: 프로토타입에 새로운 기능을 추가하면 이를 상속받는 모든 객체가 그 기능을 사용할 수 있어, 상속의 유연성을 보여줍니다."},{"type":"GuideMessage","value":"<b>주의할 점</b></br>\n\t\t\t\t자바스크립트의 상속은 클래스 기반 언어처럼 고정된 계층 구조를 따르지 않고, 객체 간의 동적 연결(__proto__)에 의존합니다.\n상속받은 속성이나 메서드는 실제로 객체 자체에 복사되는 것이 아니라 참조되는 것이므로, <b>프로토타입을 수정하면 모든 상속받은 객체에 영향을 미칩니다.</b>","promptTypeProps":"WARNING"}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","posts","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L6",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5048045ff4a95083.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
