2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","868","static/chunks/app/(layoutCase)/posts/%5Bpostid%5D/page-fafdd9518da4a7da.js"],""]
3:I[777,["250","static/chunks/250-8b90be581650ff9d.js","868","static/chunks/app/(layoutCase)/posts/%5Bpostid%5D/page-fafdd9518da4a7da.js"],""]
4:I[5613,[],""]
6:I[1778,[],""]
9:I[8144,["250","static/chunks/250-8b90be581650ff9d.js","304","static/chunks/304-f6bea3ededee4fbe.js","730","static/chunks/730-7ade87634bab4187.js","566","static/chunks/566-b141861ca793acbd.js","35","static/chunks/35-e2e6977abccdaf39.js","406","static/chunks/406-510aa82f57e1650d.js","553","static/chunks/553-fac5a7c0d4eb7378.js","464","static/chunks/app/(layoutCase)/layout-70be184e32f7e444.js"],""]
5:["postid","3","d"]
7:"$L8"
a:[]
b:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
c:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
d:{"display":"inline-block"}
e:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["ssOoWXMkhPmLSCDm6crXF",[[["",{"children":["(layoutCase)",{"children":["posts",{"children":[["postid","3","d"],{"children":["__PAGE__?{\"postid\":\"3\"}",{}]}]}],"modal":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["posts",{"children":[["postid","3","d"],{"children":["__PAGE__",{},["$L1",[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postDetail_h1__36D1I","children":"프론트 서버"}]}]}],["$","div",null,{"className":"postDetail_post_meta__zCdVW","children":[["$","span",null,{"children":["Posted",["$","time",null,{"className":"postDetail_time__99zYg","children":" Aug 8, 2019"}]]}],["$","span",null,{"className":"postDetail_update__21dkl","children":["Updated",["$","time",null,{"className":"postDetail_time__99zYg","children":" Sep 23, 2023"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postDetail_post_meta__zCdVW","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://github.com/nam-yeun-hwa","className":"postDetail_author__jc_NJ","children":"Carys Chung"}]}]]}]}],[["$","div","0",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"브라우저 작동원리에 대해 공부하던 중 의문점이 발생했다.</br></br>\n\n        <b>\"브라우저 주소창에 URL을 입력하면 브라우저는 HTTP GET 요청을 URL 프론트 서버로 전송한다.\n        보통 프론트 엔드가 있는 웹 서비스의 경우 HTML 파일을 결과로 반환한다.\"</b>\n        \n        라는 부분인데 프론트 서버의 존재가 정확히 어떤 일을 하는 것인지 궁금해 졌다..</br>"}}],[false,false,["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_warning__ZYPQt","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"프론트 서버는 어떤 주소에 대한 요청을 보냈을 때, Markup Language (HTML,CSS, Javascript)를 응답해서 사용자에게 GUI 환경을 제공해준다."}}]}],false],["$","div","2",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"→ react, next, styled-components, redux 등\n        <img href=\"https://velog.velcdn.com/images/bunny/post/f81790cf-1b26-4a2e-88a5-c6bc23fe7955/image.jpg\"/></br></br>\n        프론트엔드 개발자가 React 라이브러리를 활용하여 클라이언트(브라우저)에게 제공할 Javascript 파일들을 ES6 + JSX 문법으로 작성하게 되면, Babel 등의 컴파일러가 모든 브라우저에서 호환 가능한 문법으로 변환해준다.</br></br>\n        또한 Webpack 등의 모듈 번들러가 HTML, CSS, Javascript 파일들을 효율적인 방식으로 적절히 번들링하여 준비해둔다.</br></br>\n        클라이언트가 요청을 보낼 때마다 프론트 서버는 미리 준비해둔 HTML, CSS, Javascript 파일들을 클라이언트에게 제공한다. 그러면 클라이언트(브라우저)는 전달받은 Javascript를 실행해 페이지에 렌더링을 시작한다. 즉, React 라이브러리를 활용했던 Javascript 코드는 동적으로 DOM에 렌더링 해준다.\n        "}}],[false,["$","h2",null,{"className":"postDetail_h2__ZGkVK","children":"브라우저의 전체 흐름"}],false,false],[false,false,false,["$","h4",null,{"className":"postDetail_h4__Af1O8","children":["📝 ","SSR"]}]],["$","div","5",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"SSR 전통적인 웹사이트에서는 브라우저에서는 프론트 서버로 GET 요청을 하고 프론트 서버에서 백엔드 서버로 데이터 요청을 하여 백엔드 서버는 데이터베이스에서 데이터를 받아와서 프론트서버로 데이터를 보내주고 프론트 서버는 HTML과 데이터를 합쳐서 브라우저에게 보내준다.</br></br>\n        브라우저 ➔ 프론트 서버 ➔ 백엔드 서버 ➔ DB"}}],[false,false,false,["$","h4",null,{"className":"postDetail_h4__Af1O8","children":["📝 ","SPA"]}]],["$","div","7",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"SPA 에서는 프론트 서버에서 정적파일들을 먼저 받아(HTML, CSS, Javascript) 화면을 그리고 데이터를 백엔서 서버에서 받아오는동안 로딩바를 화면에 표시해 주도록 한다.</br></br>\n        브라우저 ➔ 프론트 서버에서 정적파일들을 받아옴(HTML, CSS, Javascript) </br> 브라우저 ➔ 백엔드 서버(프론트 서버를 거치지 않고 백엔드 서버로 바로 데이터를 요청) ➔ DB"}}],[false,false,false,["$","h4",null,{"className":"postDetail_h4__Af1O8","children":["📝 ","프론트 서버(웹 서버)"]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":["$undefined",["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        다른말로 HTTP Server라고도 한다. 웹 브라우저의 파트너로서 서버의 정보를 제공하는 소프트웨어라고 할 수 있다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        대표적으로 Nginx, Apache가 있다."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        웹 서버는 인터넷 네트워크 위에서 HTTP 프로토콜을 이용해 HTML, CSS, Javascript, image/mediafile과 같은 정적인 정보들을 웹 브라우저에 전송한다."}}],["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        아파치 소프트웨어 재단에서 만든 웹서버(web server)를 일컫는다."}}],["$","li","5",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        리눅스에서는 httpd 로 명명지어져 배포된다."}}],["$","li","6",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        정적인 데이터들 (html, css 이미지, 파일 등)에 대한 클라이언트의 요청을 데이터로 만들어서 응답한다."}}],["$","li","7",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        80 포트를 사용"}}]]}],["$","div","10",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"http 프로토콜 기반으로 web client (browser) 로부터의 요청을 서비스하는 기능을 담당하는 프로그램.\n        80번 포트로 클라이언트 요청(POST,GET,DELETE)이 왔을때만 응답한다.\n        정적인 데이터에 대한 처리를 담당한다."}}],[false,false,false,["$","h4",null,{"className":"postDetail_h4__Af1O8","children":["📝 ","웹서버를 이해하기에 가장 편했던 유투브 영상</h4>"]}]],["$","div","12",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"https://www.youtube.com/watch?v=Zimhvf2B7Es"}}]],["$","$L3",null,{"postid":3,"prePostTitle":{"id":2,"title":"함수형 프로그래밍","date":"2024-01-15","folder":"Javascript","tag":["Javascript"],"preview":"데이터를 함수를 이용해 새로운 데이터로 만들어 나가는 데이터 파이프 라인의 형태로 프로그래밍이 작동 하며 함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다.","post":[{"type":"normal","value":"데이터를 함수를 이용해 새로운 데이터로 만들어 나가는 데이터 파이프 라인의 형태로 프로그래밍이 작동 하며 함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다. (클로저, 하스켈, 리스프)"},{"type":"stringlist","value":"\n        객체지향 추상화의 최소단위가 객체인것 처럼 함수형은 함수가 최소 단위이다.\n        함수 단위로 나누어지므로 재사용성이 높다.\n        불변성을 지향하기에 동작을 예측하기 쉽고 부수효과(Side Effect)방지한다.\n        부수효과(Side Effect)를 방지 한다는 것은 동시성 문제도 해결된다는 의미이다.\n        객체지향은 제어흐름의 간접적인 전환에 부과되는 규율 함수형은 변수 할당에 부과되는 규율"},{"type":"h2","value":"함수형 vs. 절차형"},{"type":"normal","value":"아래의 코드는 N개의 숫자가 공백 없이 쓰여있다. </br> 이 숫자를 모두합해서 출력하는 프로그램을 작성하시오."},{"type":"code","value":"예) \"12345\" -> 15"},{"type":"h4","value":"절차형 프로그래밍"},{"type":"normal","value":"절차형 프로그래밍은 프로그램을 일련의 절차나 명령어로 구성하는 방식입니다. 절차형 언어는 상태를 중심으로 프로그램을 작성하며, 명령어의 순서가 중요한 역할을 합니다. 프로시저(절차)를 작성하고 호출하여 문제를 해결하는 방식이 특징입니다."},{"type":"code","value":"const stringNumber = \"12345\";\nlet sum = 0;\nfor(let i=0; i < stringNumber.length; i+=1){\n  sum += stringNumber[i] - \"0\";\n}"},{"type":"h4","value":"함수형 프로그래밍"},{"type":"normal","value":"함수형 프로그래밍은 함수를 주요 구성 요소로 삼는 프로그래밍 패러다임입니다. 함수형 언어는 상태 변경을 피하고, 불변성을 강조하며, 함수 조합성에 중점을 둡니다. 함수형 프로그래밍은 입력과 출력 간의 관계를 정의하는 함수들을 조합하여 프로그램을 작성하며, 부작용을 최소화하려는 경향이 있습니다."},{"type":"code","value":"const stringNumber = \"12345\";\nlet result = stringNumber.split(\" \")\n    .map((num) => parseInt(num))\n    .reduce((acc, value) => acc + value, 0);"},{"type":"h2","value":"선언형 vs. 명령형"},{"type":"h4","value":"명령형"},{"type":"normal","value":"명령형 프로그래밍은 프로그램이 어떻게 수행되는지를 명시적으로 나타내는 스타일입니다. 대부분의 절차형 언어가 명령형 패러다임을 따릅니다. 프로그래머는 상태와 명령어의 순서에 중점을 두어 프로그램을 작성합니다."},{"type":"h4","value":"control Flow"},{"type":"normal","value":"Goto </br>\n        if/Then/Else</br>\n        Switch/Case</br>\n        For/While"},{"type":"code","value":"const stringNumber = \"12345\";\nlet result = stringNumber.split(\" \")\n    .map((num) => parseInt(num))\n    .reduce((acc, value) => acc + value, 0);"},{"type":"h4","value":"선언형"},{"type":"normal","value":"선언형 프로그래밍은 원하는 결과를 설명하고, 시스템이 그 결과를 어떻게 달성할지에 대한 구체적인 단계나 순서를 명시하지 않는 스타일이다. 선언형 프로그래밍의 예로 SQL, HTML, CSS 등이 있다. 프로그래머는 \"무엇(What)\"을 명시하고, 해결방법은 컴퓨터에게 위임하는 방법 이다."},{"type":"h4","value":"control Flow"},{"type":"data Flow","value":"Stateless</br>\n        Recursion</br>\n        pipe"},{"type":"code","value":"[1,2,3,4,5].filter(v => v% === 0)\n  .forEach(v => console.log(v));"},{"type":"h2","value":"함수형 프로그래밍의 장점"},{"type":"normal","value":"함수형 프로그래밍은 다양한 장점을 가지고 있어서 많은 프로그래머들이 이를 선호하는 이유가 있습니다. 몇 가지 주요 장점은 다음과 같습니다."},{"type":"stringlist","value":"\n        불변성 (Immutability): 함수형 프로그래밍에서는 데이터를 변경할 수 없는 불변의 구조로 다룹니다. 이로써 부작용이 감소하고, 코드의 예측 가능성과 안정성이 높아집니다. 또한, 병렬 처리와 캐싱 등의 최적화가 쉬워집니다.\n        순수 함수 (Pure Functions): 함수형 프로그래밍에서는 순수 함수를 강조합니다. 순수 함수는 입력 값에만 의존하며, 같은 입력에 대해서는 항상 같은 출력을 반환합니다. 이로써 코드의 테스트, 디버깅, 이해가 용이해지며, 예측 가능한 동작을 보장합니다.\n        부작용 최소화 (Minimizing Side Effects): 부작용(side effect)을 최소화하여 코드의 안정성을 높입니다. 부작용은 함수 호출로 인해 발생하는 외부 상태 변경을 의미하며, 이를 최소화함으로써 코드를 이해하기 쉽고 디버깅이 쉬워집니다.\n        고차 함수 (Higher-order Functions): 함수를 값으로 다룰 수 있는 고차 함수 개념이 풍부합니다. 함수를 매개변수로 전달하거나 함수를 반환할 수 있기 때문에 코드의 모듈화와 재사용성이 높아집니다.\n        코드 간결성과 가독성: 함수형 프로그래밍은 작은 함수들을 조합하여 더 큰 기능을 만들기 때문에 코드가 간결하고 가독성이 높습니다. 이로써 유지보수가 쉬워지고 버그를 찾기 쉬워집니다.\n        병렬 및 분산 처리 용이성: 불변성과 부작용 최소화로 인해 함수형 프로그래밍은 병렬 및 분산 처리를 더 쉽게 수행할 수 있습니다. 여러 스레드 또는 프로세스에서 안전하게 동작할 수 있어서 성능을 향상시키는 데 도움이 됩니다.\n        테스트 용이성: 순수 함수와 불변성은 코드의 테스트 용이성을 증가시킵니다. 각 함수는 독립적으로 테스트할 수 있고, 예측 가능한 결과를 가지기 때문에 테스트 작성이 쉬워집니다."}]},"nextPostTile":{"id":4,"title":"브라우저에서 이벤트가 발생하고 전파되는 방식","date":"2024-01-15","folder":"Javascript","tag":["browser"],"preview":"이벤트 버블링과 이벤트 캡쳐는 브라우저에서 이벤트가 발생하고 전파되는 방식을 설명하는 개념입니다. 이벤트 버블링은 특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성을 의미합니다. 이는 이벤트가 가장 하위의 요소에서 시작하여 상위 요소로 전파되는 방식입니다.","post":[{"type":"h4","value":"이벤트 버블링 - Event Bubbling"},{"type":"normal","value":"이벤트 버블링은 특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성을 의미합니다. 이는 이벤트가 가장 하위의 요소에서 시작하여 상위 요소로 전파되는 방식입니다."},{"type":"code","value":"&lt;body>\n  &lt;div class=\"layer1\">\n    &lt;div class=\"layer2\">\n      &lt;div class=\"layer3\">\n        &lt;/div>\n     &lt;/div>\n   &lt;/div>\n &lt;/body>\n\n &lt;script>\n  var divList = document.querySelectorAll('div');\n  divList.forEach(function(div) {\n    div.addEventListener('click', logEvent);\n  });\n\n  function logEvent(event) {\n    console.log(event.currentTarget.className);\n  }\n&lt;/script>\n      "},{"type":"normal","value":"클릭한 것이 가장 하위의 div 태그인 \"layer3\"이라면, 콘솔에는 <b>\"layer3 -> layer2 -> layer1\" </b> 순서로 출력됩니다. 이는 이벤트가 하위에서 상위 요소로 전파되는 특성을 보여줍니다."},{"type":"h4","value":"이벤트 캡쳐 - Event Capture"},{"type":"normal","value":"이벤트 캡쳐는 이벤트 버블링과는 반대 방향으로 이벤트가 전파되는 방식입니다. 이는 이벤트가 최상위 요소에서 시작하여 가장 하위의 요소로 향하는 방식입니다."},{"type":"code","value":"&lt;body>\n&lt;div class=\"layer1\">\n  &lt;div class=\"layer2\">\n    &lt;div class=\"layer3\">\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/body>\n\n&lt;script>\nvar divList = document.querySelectorAll('div');\ndivList.forEach(function(div) {\n  div.addEventListener('click', logEvent, true);\n});\n\nfunction logEvent(event) {\n  console.log(event.currentTarget.className);\n}\n&lt;/script>\n      "},{"type":"emphasis","value":"여기서는 addEventListener 함수의 <b>세 번째 인자로 true</b>를 전달하여 이벤트 캡처링을 활성화합니다. </br> 클릭한 것이 최상위의 div 태그인 \"layer1\"이라면, 콘솔에는 \"layer1 -> layer2 -> layer3\" 순서로 출력됩니다."},{"type":"h4","value":"stopPropagation()"},{"type":"normal","value":"stopPropagation() 메서드는 이벤트의 전파를 중지시키는 역할을 합니다. 만약 이를 사용하면 이벤트가 현재 요소에서 더 이상 상위 또는 하위로 전파되지 않습니다."},{"type":"code","value":"function logEvent(event) {\n  event.stopPropagation();\n  console.log(event.currentTarget.className);\n}"},{"type":"emphasis","value":"이렇게 사용하면 클릭한 요소의 이벤트만 발생하고 상위 또는 하위 요소로의 이벤트 전파가 중지됩니다."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":"© 2024 베짱이가 되고 싶은 개미。 Some rights reserved."}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.0"}]]}]}]],null]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","posts","children","$5","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7169c90687fbb3ce.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"modal":["__DEFAULT__",{},["$7",null,null]]},[null,["$","$L9",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"modal":["$","$L4",null,{"parallelRouterKey":"modal","segmentPath":["children","(layoutCase)","modal"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$a","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}]}],["$","title",null,{"children":"Become a Bejjangyi"}],["$","meta",null,{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}],["$","body",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$b","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$c","children":"404"}],["$","div",null,{"style":"$d","children":["$","h2",null,{"style":"$e","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7339c07af4f65b9c.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/49964d369cf2e029.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ce6a7f582a819c93.css","precedence":"next","crossOrigin":""}]],"$Lf"]]]]
f:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
8:null
