"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[35],{9035:function(e,n,r){r.d(n,{s:function(){return o}});var t=r(5254);let o=[{id:1,title:"리액트와 불변성",date:"2024-01-15",folder:t.gt.REACT,tag:["React"],preview:"React의 문서를 읽다 보면 불변성을 강조하는 부분 또는 State를 직접적으로 변경하지 말라는 말을 본 적이 있을 것이다. 왜 그런 걸까? 리액트에서 상태를 다룰 때는 객체가 지닌 값을 바꾸고 싶다고 해서 값을 직접 수정하면 안된다.",post:[{type:t.re.H2,value:"리액트에서 불변성을 지켜야 하는 이유는?"},{type:t.re.NORMAL,value:"React의 문서를 읽다 보면 불변성을 강조하는 부분 또는 State를 직접적으로 변경하지 말라는 말을 본 적이 있을 것이다. 왜 그런 걸까?</br></br>\n        리액트에서 상태를 다룰 때는 객체가 지닌 값을 바꾸고 싶다고 해서 값을 직접 수정하면 안된다. 아래처럼 기존 객체는 그대로 두고, 새로운 객체를 만들어 원하는 값을 덮어씌워야 한다."},{type:t.re.CODE,value:"const info={\nid:1,\n  name:'John'\n}\n      \nconst nextInfo={\n  ...info,\n  name: 'Jane'\n}"},{type:t.re.NORMAL,value:"리액트는 컴포넌트에 변화가 필요한지 필요하지 않은지 Props의 변화 통해 알 수 있는데 컴포넌트의 렌더링 성능을 최적화 하기 위해서는 이전에 컴포넌트가 들고 있던 Props와 새로 받아올 Props를 비교하는 과정이 필요하며 불변성을 유지시켜 주어야 한다."},{type:t.re.H4,value:"불변성이 유지되지 않은 같은 참조를 가리키고 있는 데이터"},{type:t.re.CODE,value:"const data = { id:1, text:'안녕하세요'};\n    \nconst sameData = data;\nsameData.text = '안녕하세요';\n      \nconsole.log(sameData === data); // true"},{type:t.re.NORMAL,value:"sameData에 기존의 data를 대입하고 text 값을 수정 했다. 비록 새로운 이름을 선언 하긴 했지만 sameData와 data는 똑같은 객체를 가리키고 있다.</br></br>\n        따라서 sameData.text 값을 바꾸면 당연히 data.text 값 또한 바뀌게 된다. sameData와 data는 완전히 일치하는 객채이기 때문에 이를 비교하면 결과는 true 이다."},{type:t.re.EMPHASIS,value:"객체의 특정 프로퍼티만 변경하는 작업을 수행하면 리액트에서는 변경이 일어나지 않았다고 인식하여 리렌더링이 일어나지 않는다. <b>불변성을 지켜주면서 값을 전달해 주어야 한다.</b>"},{type:t.re.H2,value:"불변성을 유지하면서 상태를 업데이트하는 방법"},{type:t.re.CODE,value:"const data = { id:1, text:'안녕하세요'};\nconst nextData = { ...data, text: '사요나라'};\n      \nconsole.log(nextData === data) // false"},{type:t.re.NORMAL,value:"위 코드는 data 변수를 참조가 끊어진 새로운 값으로 생성 한다. 이번에 선언한 nextData는 완전히 새로운 객체 이다.</br></br>\n        리액트는 상태가 변경되었는지 여부를 판단할 때 이전 상태와 현재 상태를 비교하여 기본적으로 부모로 부터 내려받는 Props나 내부 상태인 State가 변경되었을 때 컴포넌트를 다시 렌더링 하는 리렌더링 과정이 일어난다.<br/>\n        "},{type:t.re.EMPHASIS,value:"React는 <b>Props</b>와 <b>State</b>의 변경을 불변성을 이용해서 감지한다."},{type:t.re.NORMAL,value:"객체의 참조를 복사한다는 점을 이용해 단순히 참조만 비교하는 얕은 비교를 이용해서 변경이 일어났는지 확인한다.</br></br>\n        자바스크립트에서 참조 타입의 데이터인 경우 메모리 힙 영역에 저장이 되어 내부 프로퍼티를 변경해도 같은 참조를 갖고 있다.</br></br>\n        따라서 객체의 특정 프로퍼티만 변경하는 작업을 수행하면 리액트에서는 변경이 일어나지 않았다고 인식하여 리렌더링이 일어나지 않는다. 따라서 리렌더링을 일으키려면 리액트에 이전의 참조와 다른 참조로 변경되었음을 알려야 한다.</br></br>\n        상태가 변경되었는지를 정확하게 판단하기 위해서는 불변성을 유지해야 하며 불변성을 유지하지 않으면 리액트가 제대로 동작하지 않고 성능 최적화가 무력화될 수 있다.</br>\n        "}]},{id:2,title:"함수형 프로그래밍",date:"2024-01-15",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"데이터를 함수를 이용해 새로운 데이터로 만들어 나가는 데이터 파이프 라인의 형태로 프로그래밍이 작동 하며 함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다.",post:[{type:t.re.NORMAL,value:"데이터를 함수를 이용해 새로운 데이터로 만들어 나가는 데이터 파이프 라인의 형태로 프로그래밍이 작동 하며 함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다. (클로저, 하스켈, 리스프)"},{type:t.re.STRINGLIST,value:"\n        객체지향 추상화의 최소단위가 객체인것 처럼 함수형은 함수가 최소 단위이다.\n        함수 단위로 나누어지므로 재사용성이 높다.\n        불변성을 지향하기에 동작을 예측하기 쉽고 부수효과(Side Effect)방지한다.\n        부수효과(Side Effect)를 방지 한다는 것은 동시성 문제도 해결된다는 의미이다.\n        객체지향은 제어흐름의 간접적인 전환에 부과되는 규율 함수형은 변수 할당에 부과되는 규율"},{type:t.re.H2,value:"함수형 vs. 절차형"},{type:t.re.NORMAL,value:"아래의 코드는 N개의 숫자가 공백 없이 쓰여있다. </br> 이 숫자를 모두합해서 출력하는 프로그램을 작성하시오."},{type:t.re.CODE,value:'예) "12345" -> 15'},{type:t.re.H4,value:"절차형 프로그래밍"},{type:t.re.NORMAL,value:"절차형 프로그래밍은 프로그램을 일련의 절차나 명령어로 구성하는 방식입니다. 절차형 언어는 상태를 중심으로 프로그램을 작성하며, 명령어의 순서가 중요한 역할을 합니다. 프로시저(절차)를 작성하고 호출하여 문제를 해결하는 방식이 특징입니다."},{type:t.re.CODE,value:'const stringNumber = "12345";\nlet sum = 0;\nfor(let i=0; i < stringNumber.length; i+=1){\n  sum += stringNumber[i] - "0";\n}'},{type:t.re.H4,value:"함수형 프로그래밍"},{type:t.re.NORMAL,value:"함수형 프로그래밍은 함수를 주요 구성 요소로 삼는 프로그래밍 패러다임입니다. 함수형 언어는 상태 변경을 피하고, 불변성을 강조하며, 함수 조합성에 중점을 둡니다. 함수형 프로그래밍은 입력과 출력 간의 관계를 정의하는 함수들을 조합하여 프로그램을 작성하며, 부작용을 최소화하려는 경향이 있습니다."},{type:t.re.CODE,value:'const stringNumber = "12345";\nlet result = stringNumber.split(" ")\n    .map((num) => parseInt(num))\n    .reduce((acc, value) => acc + value, 0);'},{type:t.re.H2,value:"선언형 vs. 명령형"},{type:t.re.H4,value:"명령형"},{type:t.re.NORMAL,value:"명령형 프로그래밍은 프로그램이 어떻게 수행되는지를 명시적으로 나타내는 스타일입니다. 대부분의 절차형 언어가 명령형 패러다임을 따릅니다. 프로그래머는 상태와 명령어의 순서에 중점을 두어 프로그램을 작성합니다."},{type:t.re.H4,value:"control Flow"},{type:"normal",value:"Goto </br>\n        if/Then/Else</br>\n        Switch/Case</br>\n        For/While"},{type:t.re.CODE,value:'const stringNumber = "12345";\nlet result = stringNumber.split(" ")\n    .map((num) => parseInt(num))\n    .reduce((acc, value) => acc + value, 0);'},{type:t.re.H4,value:"선언형"},{type:t.re.NORMAL,value:'선언형 프로그래밍은 원하는 결과를 설명하고, 시스템이 그 결과를 어떻게 달성할지에 대한 구체적인 단계나 순서를 명시하지 않는 스타일이다. 선언형 프로그래밍의 예로 SQL, HTML, CSS 등이 있다. 프로그래머는 "무엇(What)"을 명시하고, 해결방법은 컴퓨터에게 위임하는 방법 이다.'},{type:t.re.H4,value:"control Flow"},{type:"data Flow",value:"Stateless</br>\n        Recursion</br>\n        pipe"},{type:t.re.CODE,value:"[1,2,3,4,5].filter(v => v% === 0)\n  .forEach(v => console.log(v));"},{type:t.re.H2,value:"함수형 프로그래밍의 장점"},{type:t.re.NORMAL,value:"함수형 프로그래밍은 다양한 장점을 가지고 있어서 많은 프로그래머들이 이를 선호하는 이유가 있습니다. 몇 가지 주요 장점은 다음과 같습니다."},{type:t.re.STRINGLIST,value:"\n        불변성 (Immutability): 함수형 프로그래밍에서는 데이터를 변경할 수 없는 불변의 구조로 다룹니다. 이로써 부작용이 감소하고, 코드의 예측 가능성과 안정성이 높아집니다. 또한, 병렬 처리와 캐싱 등의 최적화가 쉬워집니다.\n        순수 함수 (Pure Functions): 함수형 프로그래밍에서는 순수 함수를 강조합니다. 순수 함수는 입력 값에만 의존하며, 같은 입력에 대해서는 항상 같은 출력을 반환합니다. 이로써 코드의 테스트, 디버깅, 이해가 용이해지며, 예측 가능한 동작을 보장합니다.\n        부작용 최소화 (Minimizing Side Effects): 부작용(side effect)을 최소화하여 코드의 안정성을 높입니다. 부작용은 함수 호출로 인해 발생하는 외부 상태 변경을 의미하며, 이를 최소화함으로써 코드를 이해하기 쉽고 디버깅이 쉬워집니다.\n        고차 함수 (Higher-order Functions): 함수를 값으로 다룰 수 있는 고차 함수 개념이 풍부합니다. 함수를 매개변수로 전달하거나 함수를 반환할 수 있기 때문에 코드의 모듈화와 재사용성이 높아집니다.\n        코드 간결성과 가독성: 함수형 프로그래밍은 작은 함수들을 조합하여 더 큰 기능을 만들기 때문에 코드가 간결하고 가독성이 높습니다. 이로써 유지보수가 쉬워지고 버그를 찾기 쉬워집니다.\n        병렬 및 분산 처리 용이성: 불변성과 부작용 최소화로 인해 함수형 프로그래밍은 병렬 및 분산 처리를 더 쉽게 수행할 수 있습니다. 여러 스레드 또는 프로세스에서 안전하게 동작할 수 있어서 성능을 향상시키는 데 도움이 됩니다.\n        테스트 용이성: 순수 함수와 불변성은 코드의 테스트 용이성을 증가시킵니다. 각 함수는 독립적으로 테스트할 수 있고, 예측 가능한 결과를 가지기 때문에 테스트 작성이 쉬워집니다."}]},{id:3,title:"프론트 서버",date:"2024-01-15",folder:t.gt.JAVASCRIPT,preview:'브라우저 작동원리에 대해 공부하던 중 의문점이 발생했다.<b>"브라우저 주소창에 URL을 입력하면 브라우저는 HTTP GET 요청을 URL 프론트 서버로 전송한다.',post:[{type:t.re.NORMAL,value:'브라우저 작동원리에 대해 공부하던 중 의문점이 발생했다.</br></br>\n\n        <b>"브라우저 주소창에 URL을 입력하면 브라우저는 HTTP GET 요청을 URL 프론트 서버로 전송한다.\n        보통 프론트 엔드가 있는 웹 서비스의 경우 HTML 파일을 결과로 반환한다."</b>\n        \n        라는 부분인데 프론트 서버의 존재가 정확히 어떤 일을 하는 것인지 궁금해 졌다..</br>'},{type:t.re.EMPHASIS,value:"프론트 서버는 어떤 주소에 대한 요청을 보냈을 때, Markup Language (HTML,CSS, Javascript)를 응답해서 사용자에게 GUI 환경을 제공해준다."},{type:t.re.NORMAL,value:'→ react, next, styled-components, redux 등\n        <img href="https://velog.velcdn.com/images/bunny/post/f81790cf-1b26-4a2e-88a5-c6bc23fe7955/image.jpg"/></br></br>\n        프론트엔드 개발자가 React 라이브러리를 활용하여 클라이언트(브라우저)에게 제공할 Javascript 파일들을 ES6 + JSX 문법으로 작성하게 되면, Babel 등의 컴파일러가 모든 브라우저에서 호환 가능한 문법으로 변환해준다.</br></br>\n        또한 Webpack 등의 모듈 번들러가 HTML, CSS, Javascript 파일들을 효율적인 방식으로 적절히 번들링하여 준비해둔다.</br></br>\n        클라이언트가 요청을 보낼 때마다 프론트 서버는 미리 준비해둔 HTML, CSS, Javascript 파일들을 클라이언트에게 제공한다. 그러면 클라이언트(브라우저)는 전달받은 Javascript를 실행해 페이지에 렌더링을 시작한다. 즉, React 라이브러리를 활용했던 Javascript 코드는 동적으로 DOM에 렌더링 해준다.\n        '},{type:t.re.H2,value:"브라우저의 전체 흐름"},{type:t.re.H4,value:"SSR"},{type:t.re.NORMAL,value:"SSR 전통적인 웹사이트에서는 브라우저에서는 프론트 서버로 GET 요청을 하고 프론트 서버에서 백엔드 서버로 데이터 요청을 하여 백엔드 서버는 데이터베이스에서 데이터를 받아와서 프론트서버로 데이터를 보내주고 프론트 서버는 HTML과 데이터를 합쳐서 브라우저에게 보내준다.</br></br>\n        브라우저 ➔ 프론트 서버 ➔ 백엔드 서버 ➔ DB"},{type:t.re.H4,value:"SPA"},{type:t.re.NORMAL,value:"SPA 에서는 프론트 서버에서 정적파일들을 먼저 받아(HTML, CSS, Javascript) 화면을 그리고 데이터를 백엔서 서버에서 받아오는동안 로딩바를 화면에 표시해 주도록 한다.</br></br>\n        브라우저 ➔ 프론트 서버에서 정적파일들을 받아옴(HTML, CSS, Javascript) </br> 브라우저 ➔ 백엔드 서버(프론트 서버를 거치지 않고 백엔드 서버로 바로 데이터를 요청) ➔ DB"},{type:t.re.H4,value:"프론트 서버(웹 서버)"},{type:t.re.STRINGLIST,value:"\n        다른말로 HTTP Server라고도 한다. 웹 브라우저의 파트너로서 서버의 정보를 제공하는 소프트웨어라고 할 수 있다.\n        대표적으로 Nginx, Apache가 있다.\n        웹 서버는 인터넷 네트워크 위에서 HTTP 프로토콜을 이용해 HTML, CSS, Javascript, image/mediafile과 같은 정적인 정보들을 웹 브라우저에 전송한다.\n        아파치 소프트웨어 재단에서 만든 웹서버(web server)를 일컫는다.\n        리눅스에서는 httpd 로 명명지어져 배포된다.\n        정적인 데이터들 (html, css 이미지, 파일 등)에 대한 클라이언트의 요청을 데이터로 만들어서 응답한다.\n        80 포트를 사용"},{type:t.re.NORMAL,value:"http 프로토콜 기반으로 web client (browser) 로부터의 요청을 서비스하는 기능을 담당하는 프로그램.\n        80번 포트로 클라이언트 요청(POST,GET,DELETE)이 왔을때만 응답한다.\n        정적인 데이터에 대한 처리를 담당한다."},{type:t.re.H4,value:"웹서버를 이해하기에 가장 편했던 유투브 영상</h4>"},{type:t.re.NORMAL,value:"https://www.youtube.com/watch?v=Zimhvf2B7Es"}]},{id:4,title:"브라우저에서 이벤트가 발생하고 전파되는 방식",date:"2024-01-15",folder:t.gt.JAVASCRIPT,tag:["browser"],preview:"이벤트 버블링과 이벤트 캡쳐는 브라우저에서 이벤트가 발생하고 전파되는 방식을 설명하는 개념입니다. 이벤트 버블링은 특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성을 의미합니다. 이는 이벤트가 가장 하위의 요소에서 시작하여 상위 요소로 전파되는 방식입니다.",post:[{type:t.re.H4,value:"이벤트 버블링 - Event Bubbling"},{type:t.re.NORMAL,value:"이벤트 버블링은 특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성을 의미합니다. 이는 이벤트가 가장 하위의 요소에서 시작하여 상위 요소로 전파되는 방식입니다."},{type:t.re.CODE,value:'&lt;body>\n  &lt;div class="layer1">\n    &lt;div class="layer2">\n      &lt;div class="layer3">\n        &lt;/div>\n     &lt;/div>\n   &lt;/div>\n &lt;/body>\n\n &lt;script>\n  var divList = document.querySelectorAll(\'div\');\n  divList.forEach(function(div) {\n    div.addEventListener(\'click\', logEvent);\n  });\n\n  function logEvent(event) {\n    console.log(event.currentTarget.className);\n  }\n&lt;/script>\n      '},{type:t.re.NORMAL,value:'클릭한 것이 가장 하위의 div 태그인 "layer3"이라면, 콘솔에는 <b>"layer3 -> layer2 -> layer1" </b> 순서로 출력됩니다. 이는 이벤트가 하위에서 상위 요소로 전파되는 특성을 보여줍니다.'},{type:t.re.H4,value:"이벤트 캡쳐 - Event Capture"},{type:t.re.NORMAL,value:"이벤트 캡쳐는 이벤트 버블링과는 반대 방향으로 이벤트가 전파되는 방식입니다. 이는 이벤트가 최상위 요소에서 시작하여 가장 하위의 요소로 향하는 방식입니다."},{type:t.re.CODE,value:'&lt;body>\n&lt;div class="layer1">\n  &lt;div class="layer2">\n    &lt;div class="layer3">\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/body>\n\n&lt;script>\nvar divList = document.querySelectorAll(\'div\');\ndivList.forEach(function(div) {\n  div.addEventListener(\'click\', logEvent, true);\n});\n\nfunction logEvent(event) {\n  console.log(event.currentTarget.className);\n}\n&lt;/script>\n      '},{type:t.re.EMPHASIS,value:'여기서는 addEventListener 함수의 <b>세 번째 인자로 true</b>를 전달하여 이벤트 캡처링을 활성화합니다. </br> 클릭한 것이 최상위의 div 태그인 "layer1"이라면, 콘솔에는 "layer1 -> layer2 -> layer3" 순서로 출력됩니다.'},{type:t.re.H4,value:"stopPropagation()"},{type:t.re.NORMAL,value:"stopPropagation() 메서드는 이벤트의 전파를 중지시키는 역할을 합니다. 만약 이를 사용하면 이벤트가 현재 요소에서 더 이상 상위 또는 하위로 전파되지 않습니다."},{type:t.re.CODE,value:"function logEvent(event) {\n  event.stopPropagation();\n  console.log(event.currentTarget.className);\n}"},{type:t.re.EMPHASIS,value:"이렇게 사용하면 클릭한 요소의 이벤트만 발생하고 상위 또는 하위 요소로의 이벤트 전파가 중지됩니다."}]},{id:5,title:"일반함수 VS 화살표 함수의 this 바인딩",date:"2023-03-20",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"일반 함수와 화살표 함수의 this 바인딩에 대한 차이에 대한 내용을 약간 각색하여 정리하겠습니다. 일반 함수에서 this는 함수가 호출될 때 동적으로 결정되며, 호출된 컨텍스트에 바인딩됩니다.",post:[{type:t.re.H4,value:"일반 함수"},{type:t.re.CODE,value:"const foo = function () {\n  console.log('일반 함수');\n}"},{type:t.re.H4,value:"화살표 함수"},{type:t.re.CODE,value:"const foo = () => console.log('화살표 함수');"},{type:t.re.NORMAL,value:"두 함수는 기능적으로 완전히 동일하게 작동합니다."},{type:t.re.H2,value:"JavaScript 일반 함수의 this 바인딩"},{type:t.re.CODE,value:"const cat = {\n  name: 'meow',\n  foo1: function() {\n    const foo2 = function() {\n      console.log(this.name); // undefined\n    }\n    foo2();\n  }\n};\n\ncat.foo1(); // undefined\n        "},{type:t.re.STRINGLIST,value:"일반 함수에서 this는 함수가 호출될 때 함수가 어디에서 호출되었는지에 따라 동적으로 결정되며, 호출된 컨텍스트에 바인딩됩니다.\n        전역스코프에서 실행(선언)이 되어 foo2 내부의 this는 지정되지 않아서 곧 전역 객체를 가리키게 됩니다.\n        내부 함수의 this는 전역 객체(window)를 가리키므로 전역 객체에 name이란 속성은 존재하지 않아 undefined 출력 됩니다.\n        이 내부함수가 global에서도 제대로 작동하기 위해서 우리는 저 내부함수에 객체의 this를 바인딩 할 필요가 있을 것입니다."},{type:t.re.H2,value:"JavaScript 화살표 함수의 this 바인딩"},{type:t.re.CODE,value:"const cat = {\n  name: 'meow',\n  foo1: function() {\n    const foo2 = () => {\n      console.log(this.name);\n    }\n    foo2();\n  }\n};\n\ncat.foo1(); // meow\n"},{type:t.re.NORMAL,value:"위 코드와 달라진 점은 cat 객체의 내부함수 foo2가 화살표 함수로 선언됐다는 점 뿐입니다. 그런데 이번엔 우리가 의도한대로 meow가 잘 찍혔습니다. 어떻게 가능한걸까요? </br></br>\n        화살표 함수에서 this는 함수가 정의된 스코프에서 상속됩니다. (Lexical this) 내부 함수의 this는 외부 함수의 this를 상속받아 cat을 가리키므로 meow 출력 됩니다."},{type:t.re.H2,value:"addEventListener()의 콜백함수"},{type:t.re.NORMAL,value:"원래 addEventListener의 콜백함수에서는 this에 해당 이벤트 리스너가 호출된 엘리먼트가 바인딩되도록 정의되어 있습니다. 그러나 화살표 함수를 사용할 경우, 이미 this의 값이 정해져 있는 콜백함수의 경우 기존 바인딩 값이 사라지고 상위 스코프(이 경우엔 전역 객체)가 바인딩되기 때문에 의도했던 대로 동작하지 않을 수 있습니다. 물론 상위 스코프의 속성들을 쓰려고 의도한 경우라면 사용할 수 있습니다."},{type:t.re.CODE,value:"const button = document.getElementById('myButton');\n\n// 화살표 함수 사용 (비권장)\nbutton.addEventListener('click', () => {\n  console.log(this); // Window\n  this.innerHTML = 'clicked'; // 전역 객체(window)의 innerHTML을 변경\n});\n\n// 일반 함수 사용\nbutton.addEventListener('click', function() {\n    console.log(this); // button 엘리먼트\n    this.innerHTML = 'clicked'; // 해당 버튼의 innerHTML을 변경\n});    \n"},{type:t.re.STRINGLIST,value:"화살표 함수의 경우, this가 해당 이벤트 리스너를 호출한 문맥이 아닌 상위 스코프의 this를 가리키므로 비추천합니다.\n        일반 함수를 사용하면 this는 해당 이벤트가 발생한 엘리먼트를 가리키며, 버튼의 innerHTML을 변경하는 등의 작업이 의도한 대로 동작합니다.\n        "},{type:t.re.NORMAL,value:"위의 예시에서는 화살표 함수를 사용할 경우 this가 Window를 가리키므로 버튼의 innerHTML을 변경하는 동작이 의도와 다릅니다. 따라서 일반 함수를 사용하여 콜백함수를 정의하는 것이 바람직합니다.\n        "}]},{id:6,title:"중첩된 객체를 가진 객체의 깊은 복사 하는 방법",date:"2023-03-03",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"키-값 쌍이 여러 개인 객체가 있습니다. 문제는 객체가 완전하지 않다는 것입니다. 이 문제는 객체에 기존데이터가 있는 상태에서 새로운 필드를 추가하는 경우나 외부 API에서 데이터를 가져와 현재 데이터 모델에 연결해야 하는 경우에 자주 발생합니다. 어느 쪽이든 문제가 되는 부분은 같습니다.",post:[{type:t.re.NORMAL,value:"키-값 쌍이 여러 개인 객체가 있습니다. 문제는 객체가 완전하지 않다는 것입니다. 이 문제는 객체에 기존데이터가 있는 상태에서 새로운 필드를 추가하는 경우나 외부 API에서 데이터를 가져와 현재 데이터 모델에 연결해야 하는 경우에 자주 발생합니다. 어느 쪽이든 문제가 되는 부분은 같습니다. 새로운 필드 또는 데이터로 채워지지 않는 나머지 부분을 기본값 객체로 채워야 한다는 점입니다.</br></br>\n\n        기본값을 설정하면서 원래의 데이터를 유지하는 새로운 객체를 생성하려면 어떻게 해야 할까요?</br>\n        당연히 부수 효과나 조작은 발생하지 않아야 합니다."},{type:t.re.H4,value:"Object.assign()을 이용한 값이 중첩되지 않은 객체의 복사 (Shallow Copy)"},{type:t.re.CODE,value:"const default = {\n  author:'',\n  title:'',\n  year:2017,\n  rating:null\n};\n\nconst book = {\n  author : 'joe Morgan',\n  title : 'Simplifying Javascript'\n};\n\nconst updated = Object.assign({}, defaults, book);\nconsole.log(updated);\n\n//{ \n//  author : 'joe Morgan',\n//  title : 'Simplifying Javascript,\n//  year:2017,\n//  rating:null\n//}"},{type:t.re.EMPHASIS,value:"첫번째 객체에 빈 객체를 사용하면 빈객체에 새로운 값이 갱신되어 반환됩니다.</br>다른 객체에는 조작이 발생하지 않습니다."},{type:t.re.NORMAL,value:"위의 코드는 defaults와 book 객체를 병합하여 얕은 복사를 수행합니다. 하지만 details 객체는 참조 관계가 유지되므로 shallowCopy 객체를 수정하면 defaults나 book에도 영향을 미칠 수 있습니다.</br></br>"},{type:t.re.H4,value:"Object.assign()을 이용한 값이 중첩된 객체의 복사 (Deep Copy)"},{type:t.re.NORMAL,value:"중첩된 객체가 있는 경우에 Object.assign()을 이용해서 복사하도록 하면 모든 것을 갱신할 수 있습니다."},{type:t.re.CODE,value:"const defaultEmployee = {\n    name : {\n          first : '',\n          last : ''\n        }\n    years : 0,\n};\nconst employee = Object.assign({}, defaultEmployee);"},{type:t.re.NORMAL,value:"위의 코드에서 name 속성은 복사 할수 없습니다. 실제로 키 name에 할당된 독립적인 객체에 대해 참조만 복사 됩니다. 중첩된 객체는 해당 객체를 담고 있는 객체와 독립적으로 존재합니다.</br></br>\n        중첩된 객체를 담고 있는 객체가 가지고 있는 것은 중첩된 객체에 대한 참조 뿐입니다. 참조에 대한 복사만으로는 중첩된 객체에 깊은 복사를 적용할 수 없습니다. 단지 참조의 위치를 복사하는 것에 불과 합니다.</br></br>\n        \n        따라서 원본 객체 또는 복사한 객체 중 어디서라도 중첩된 객체의 값을 변경하면 원본 객체와 복사한 객체 모두 변경됩니다."},{type:t.re.EMPHASIS,value:"<b>중첩된 객체</b>가 있는 경우에 <b>Object.assign()</b>을 이용해서 복사하도록 하면 모든 것을 갱신할 수 있습니다."},{type:t.re.CODE,value:"const defaultEmployee = {\n  name : {\n           first : '',\n           last : ''\n         }\n  years : 0,\n};\n\nconst employee2 = Object.assign(\n  {},\n    defaultEmployee,\n    {\n      name : Object.assign({} , defaultEmployee.name)\n    }\n);"},{type:t.re.H4,value:"Lodash를 이용한 깊은 복사 cloneDeep"},{type:t.re.NORMAL,value:"Lodash 라이브러리는 깊은 복사를 수행하는 cloneDeep 메서드를 제공합니다. Lodash는 일반적인 유틸리티 함수들을 모아놓은 라이브러리로서, 깊은 복사를 쉽게 처리할 수 있게 도와줍니다."},{type:t.re.CODE,value:"const _ = require('lodash');\n\nconst defaults = {\n  author: '',\n  title: '',\n  details: {\n    pages: 0,\n    language: ''\n  }\n};\n\nconst book = {\n  author: 'John Doe',\n  title: 'Sample Book',\n  details: {\n    pages: 200,\n    language: 'English'\n  }\n};\n\nconst deepCopyResult = _.cloneDeep(defaults);\n_.merge(deepCopyResult, book);\n\nconsole.log(deepCopyResult);"},{type:t.re.NORMAL,value:"cloneDeep 함수를 사용하면 중첩된 객체까지 깊은 복사가 이루어집니다. 이후 merge 함수를 사용하여 두 객체를 병합할 수 있습니다."},{type:t.re.H4,value:"JSON.stringify() 이용한 깊은 복사 cloneDeep"},{type:t.re.NORMAL,value:"JSON.stringify()와 JSON.parse()를 이용하여 객체를 문자열로 변환하고 다시 파싱하여 깊은 복사를 수행할 수 있습니다. 단, 이 방법은 함수나 특별한 타입의 객체에는 적용되지 않을 수 있습니다."},{type:t.re.CODE,value:"const originalObject = {\n  nestedObject: {\n    key: 'value'\n  },\n  otherKey: 'otherValue'\n};\n\nconst deepCopy = JSON.parse(JSON.stringify(originalObject));\n        "},{type:t.re.NORMAL,value:"하지만 이방법은 사용하기는 쉽지만 <b>다른 방법에비해 아주 느리다</b>고 알려져 있습니다."}]},{id:7,title:"const, let, var",date:"2023-02-21",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"let은 재할당 할 수 있다는 점에서 var와 유사합니다. 그렇지만 var는 어휘적 유효범위(lexical scope)를 따르는 반면 let은 블록 유효범위를 따릅니다. 일단 블록 유효범위 변수는 if블록이나 for 반복문 같은 블록의 내부에만 존재한다고 알아두세요.",post:[{type:t.re.H4,value:"블록유효범위를 따르는 const"},{type:t.re.STRINGLIST,value:"블록의 문맥 내에서 재할당할 수 없는 변수 입니다.\n        const는 한 번 선언되면 재할당이 불가능한 변수를 선언하는 데 사용됩니다.\n        그러나 const로 선언된 변수가 가리키는 값(객체 또는 배열 등)의 내부는 수정될 수 있습니다. 이는 변수가 참조하는 메모리 주소가 변경되지 않는다는 의미입니다."},{type:t.re.CODE,value:"const discountable = [];\n\nfor(let i = 0; i < cart.length; i++){\n    discountable.push(i);\n}"},{type:t.re.H4,value:"블록유효범위를 따르는 let"},{type:t.re.STRINGLIST,value:"let은 변수를 선언하고, 필요에 따라 재할당할 수 있는 키워드입니다.\n        let은 블록 유효범위(block scope)를 가지며, 블록 외부에서는 해당 변수에 접근할 수 없습니다.\n        같은 블록 내에서 같은 이름의 변수를 재선언할 수 없습니다."},{type:t.re.CODE,value:"if (true) {\n    let blockScopedVar = 'I am a block-scoped variable';\n    console.log(blockScopedVar); // 유효\n}\n\nconsole.log(blockScopedVar); // 에러: blockScopedVar is not defined"},{type:t.re.EMPHASIS,value:"var를 사용하는 경우에는 같은 유효범위에서 같은 이름의 변수를 다시 선언할 수 있지만</br>\n        let과 const는 같은 이름이 변수를 다시 선언할 수 없습니다."},{type:t.re.H4,value:"어휘적 유효범위(lexical scope)를 따르는 var"},{type:t.re.STRINGLIST,value:"var는 어휘적 유효범위(lexical scope)를 가지며, 함수 유효범위를 따릅니다.\n        함수 내에서 선언된 변수는 함수 전체에서 접근 가능하며, 함수 외부에서는 변수에 접근할 수 없습니다.\n        같은 함수 내에서 같은 이름의 변수를 재선언할 수 있습니다."},{type:t.re.CODE,value:"function exampleFunction() {\n    var lexicalScopedVar = 'I am a lexical-scoped variable';\n    console.log(lexicalScopedVar); // 유효\n}\n\nconsole.log(lexicalScopedVar); // 에러: lexicalScopedVar is not defined"},{type:t.re.H4,value:"var를 사용하여 함수 유효범위를 따르는 클로저"},{type:t.re.CODE,value:"// var를 사용한 클로저 예제\nfunction createClosureVar() {\n    var closuresVar = [];\n\n    for (var i = 0; i < 5; i++) {\n        closuresVar.push(function () {\n            console.log(i);\n        });\n    }\n\n    return closuresVar;\n}\n\nvar closuresVarArray = createClosureVar();\n\n// 클로저 호출\nfor (var j = 0; j < closuresVarArray.length; j++) {\n    closuresVarArray[j](); // 모든 클로저가 5를 출력\n}"},{type:t.re.STRINGLIST,value:"var를 사용한 경우, for 루프에서 생성된 클로저가 i를 참조하고 있습니다.\n        하지만 var는 함수 스코프를 갖기 때문에 for 루프가 종료된 후에도 i는 전역 스코프에 남아 있고, 클로저는 항상 전역 스코프에 있는 i를 참조합니다.\n        따라서 클로저를 호출할 때 모든 클로저가 i의 최종 값인 5를 출력합니다.\n        "},{type:t.re.EMPHASIS,value:"<b>var를 사용</b>한 경우 함수 내부에서 만든 <b>클로저에서 외부 변수를 참조할 때 주의</b>가 필요합니다."},{type:t.re.H4,value:"let을 사용하여 클로저 문제를 해결한 코드"},{type:t.re.CODE,value:"// let을 사용한 클로저 예제\nfunction createClosureLet() {\n    var closuresLet = [];\n\n    for (let i = 0; i < 5; i++) {\n        closuresLet.push(function () {\n            console.log(i);\n        });\n    }\n\n    return closuresLet;\n}\n\nvar closuresLetArray = createClosureLet();\n\n// 클로저 호출\nfor (let j = 0; j < closuresLetArray.length; j++) {\n    closuresLetArray[j](); // 각 클로저가 해당하는 값(0부터 4까지)을 출력\n}"},{type:t.re.STRINGLIST,value:"let을 사용한 경우, for 루프에서 생성된 클로저가 i를 참조하고 있습니다. \n        let은 블록 스코프를 갖기 때문에 각 클로저는 해당 블록에서의 i를 참조합니다.\n        따라서 클로저를 호출할 때 각각의 클로저는 자신이 생성된 시점의 i 값을 출력하게 됩니다."},{type:t.re.EMPHASIS,value:"쉽게 말해 let을 이용하면 for문이 반복될 때마다 값을 잠급니다."},{type:t.re.H4,value:"블록 유효범위 (Block Scope)"},{type:t.re.STRINGLIST,value:"블록 유효범위는 중괄호 {}로 둘러싸인 영역을 가리킵니다.\n        let 및 const 키워드로 선언된 변수는 블록 유효 범위를 가집니다. 즉, 해당 변수는 그 변수가 선언된 블록 내에서만 유효하며 외부에서 접근할 수 없습니다.\n        블록은 주로 조건문 (if, else, for, while 등) 내부, 함수 내부, 또는 단독 중괄호 블록으로 정의됩니다."},{type:t.re.H4,value:"어휘적 유효범위 (Lexical Scope 또는 Static Scope)"},{type:t.re.NORMAL,value:"어휘적 유효범위는 코드를 작성하는 시점에 결정되는 스코프의 종류입니다. 변수가 어디에서 선언되었는지에 따라 그 변수의 유효 범위가 정해집니다. 어휘적 유효범위는 함수를 어디에 작성했는지에 따라 함수의 스코프가 결정되는 것을 의미합니다."},{type:t.re.CODE,value:"function outer() {\n  let outerVar = 'I am outer';\n\n  function inner() {\n    let innerVar = 'I am inner';\n    console.log(outerVar); // outerVar는 어휘적 유효범위에 의해 접근 가능\n    console.log(innerVar); // innerVar는 현재 스코프에 선언되어 있어 직접 접근 가능\n  }\n\n  inner();\n\n  console.log(outerVar); // outerVar는 여전히 어휘적 유효범위에 의해 접근 가능\n  console.log(innerVar); // Error: innerVar는 outer 함수의 스코프를 벗어나서 접근 불가능\n}\n\nouter();"},{type:t.re.NORMAL,value:"위 예제에서 inner 함수는 자신의 스코프와 외부 함수인 outer 함수의 스코프에 접근할 수 있습니다. 이는 어휘적 유효범위에 의한 것입니다. 변수의 유효 범위는 코드를 작성하는 시점에 이미 정해져 있습니다."},{type:t.re.H4,value:"함수 유효범위 (Function Scope)"},{type:t.re.NORMAL,value:"함수 유효범위는 함수 내에서 선언된 변수가 함수 내부에서만 유효하다는 원칙을 나타냅니다. 함수 유효범위는 함수가 실행될 때마다 새로운 스코프가 생성되며, 함수 내에서 선언된 변수는 해당 함수 내에서만 접근할 수 있습니다."},{type:t.re.CODE,value:"function exampleFunction() {\n  let localVar = 'I am a local variable'; // 함수 유효범위에 속한 변수\n\n  if (true) {\n    let blockVar = 'I am a block-scoped variable'; // 블록 유효범위에 속한 변수\n    console.log(localVar); // 함수 유효범위 내에서 접근 가능\n    console.log(blockVar); // 블록 유효범위 내에서 접근 가능\n  }\n\n  console.log(localVar); // 함수 유효범위 내에서 접근 가능\n  console.log(blockVar); // Error: 블록 유효범위를 벗어난 곳에서는 접근 불가능\n}"},{type:t.re.NORMAL,value:"위 예제에서 localVar는 함수 유효범위 내에서 선언되어 함수 전체에서 접근 가능합니다. 하지만 blockVar는 블록 내에서만 유효한 변수이므로 블록 외부에서는 접근할 수 없습니다. </br></br>\n\n        요약하면, 어휘적 유효범위는 코드를 작성하는 시점에 변수의 스코프가 결정되며, 함수 유효범위는 함수가 실행될 때 생성되는 스코프입니다. 함수 유효범위는 어휘적 유효범위를 따르기 때문에 함수가 어디에 선언되었는지에 따라 스코프가 결정됩니다."}]},{id:8,title:"클로저 (Closure)",date:"2023-02-19",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"비공개 변수는 클로저 함수 내부에 생성한 변수도 아니고, 매개변수도 아닌 변수를 의미합니다. 클로저를 말할 때는 스코프/컨텍스트/비공개 변수와 함수의 관계를 항상 같이 말해주어야 합니다. closure 함수 안에 console.log(name)이 있는데요.",post:[{type:t.re.NORMAL,value:"\n        클로저는 자바스크립트에서 매우 강력하고 중요한 개념 중 하나입니다. 클로저는 외부 변수(외부 렉시컬 환경에 있는 변수)를 기억하고 접근할 수 있는 함수입니다. 이를테면, 어떤 함수가 다른 함수 내에서 정의되고 그 함수가 외부 변수를 참조하면, 클로저가 형성됩니다.</br></br>\n        클로저는 함수가 선언될 때의 렉시컬 스코프(Lexical Scope)를 기억하여, 함수가 다른 스코프에서 호출되더라도 해당 스코프의 변수에 접근할 수 있게 하는 기능을 말합니다."},{type:t.re.CODE,value:"var makeClosure = function() {\n  var name = 'zero';\n  return function() {\n    console.log(name);\n  };\n};\n\nvar closure = makeClosure();\nclosure(); // 'zero'\n        "},{type:t.re.NORMAL,value:"makeClosure 함수가 실행될 때 name 변수가 생성되고, 반환된 내부 함수가 클로저 역할을 합니다. 클로저인 내부 함수는 외부 함수의 스코프에 접근할 수 있기 때문에 name 변수에 접근하여 값을 출력할 수 있습니다."},{type:t.re.H2,value:"비공개 변수"},{type:t.re.NORMAL,value:"비공개 변수는 클로저를 사용하여 함수 내부에서만 접근할 수 있는 변수를 의미합니다. 이 변수는 함수 내부에서 선언되거나 함수의 매개변수로 전달되지 않으면서도 클로저를 통해 접근 가능합니다."},{type:t.re.CODE,value:"function makeCounter() {\n  let count = 0;\n\n  // 내부 함수(클로저)를 반환\n  return function() {\n    return count++;\n  };\n}\n\n// makeCounter 함수 호출로 클로저 생성\nlet counter = makeCounter();\n\n// 클로저를 통해 외부 변수(count)에 접근하고 값을 변경\nconsole.log(counter()); // 0\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n        \n        "},{type:t.re.STRINGLIST,value:"makeCounter 함수가 호출되면서 새로운 렉시컬 환경이 만들어지고, count 변수가 그 환경에 저장됩니다.\n        makeCounter 함수 내부에서 정의된 익명 함수(클로저)가 반환되면서 <b>외부 변수 count에 대한 참조를 유지</b>합니다.\n        반환된 익명 함수가 counter 변수에 할당되면서 클로저가 형성됩니다.\n        counter를 호출할 때마다 클로저는 외부 변수 count에 접근하여 값을 변경하고 반환합니다."},{type:t.re.NORMAL,value:"클로저는 함수가 생성될 때의 렉시컬 스코프(어휘적 스코프)에 있는 변수에 대한 참조를 기억합니다. 이를 통해 함수가 나중에 호출될 때에도 해당 변수에 접근할 수 있습니다. 클로저는 함수형 프로그래밍, 비동기 작업, 정보 은닉 등 다양한 상황에서 사용되며, 자바스크립트에서 고유하고 강력한 특징 중 하나입니다."},{type:t.re.H2,value:"이벤트 리스너와 클로저"},{type:t.re.NORMAL,value:"이벤트 리스너와 클로저 관련 문제에 대한 설명에서, 클로저를 사용하여 각 이벤트 핸들러가 반복문의 각 단계에서 고유한 인덱스를 기억하도록 수정한 예제입니다."},{type:t.re.CODE,value:"for (var i = 0; i < 5; i++) {\n  (function(j) {\n    $('#target' + j).on('click', function() {\n      alert(j);\n    });\n  })(i);\n}"},{type:t.re.NORMAL,value:"이렇게 하면 클로저를 통해 각 이벤트 핸들러가 자신만의 고유한 j 값을 기억하게 되어, 클릭할 때 각 버튼에 해당하는 인덱스가 올바르게 출력됩니다. 클로저를 사용하여 변수의 값을 고정시켜 이벤트 핸들러가 정상적으로 작동하도록 만들었습니다."},{type:t.re.NORMAL,value:"같이 참고하면 좋은 링크 </br>\n        ".concat("http://localhost:3000"," </br> \n        https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0")}]},{id:9,title:"함수선언식 VS 함수표현식의 호이스팅(Hoisting)",date:"2023-02-19",folder:t.gt.JAVASCRIPT,tag:["Javascript"],preview:"호이스팅(Hoisting)은 JavaScript에서 변수와 함수 선언이 최상단으로 끌어올려지는 현상을 말합니다. 하지만 함수 선언식과 함수 표현식은 다르게 동작하므로 주의가 필요합니다.\n    ",post:[{type:t.re.NORMAL,value:"호이스팅(Hoisting)은 JavaScript에서 변수와 함수 선언이 최상단으로 끌어올려지는 현상을 말합니다. 하지만 함수 선언식과 함수 표현식은 다르게 동작하므로 주의가 필요합니다."},{type:t.re.H4,value:"함수 선언식"},{type:t.re.NORMAL,value:"함수 선언식은 전체가 호이스팅되기 때문에 함수를 선언하기 전에 호출해도 정상적으로 동작합니다."},{type:t.re.CODE,value:"console.log(zero); // undefined\nsayWow(); // 'wow'\n\nfunction sayWow() {\n  console.log('wow');\n}\n\nvar zero = 'zero';\n        "},{type:t.re.NORMAL,value:"함수 선언식인 sayWow는 전체가 끌어올려져서 호출 전에도 함수가 정의되어 있습니다. 아래 sayWow함수가 상단으로 끌여 올려진것과 같은 의미가 됩니다."},{type:t.re.CODE,value:"function sayWow() {\n  console.log('wow');\n}\n\nvar zero;\nconsole.log(zero);\nsayWow();\nzero = 'zero';"},{type:t.re.H4,value:"함수 표현식"},{type:t.re.NORMAL,value:"함수 표현식은 변수만 끌어올려지고 함수의 할당은 그대로 유지되기 때문에 호출하기 전에 변수에 함수를 할당해야 합니다."},{type:t.re.CODE,value:"\nsayWow(); // 에러\nsayYeah(); // 에러\n\nvar sayYeah = function() {\n  console.log('yeah');\n}\n\nfunction sayWow() {\n  console.log('wow');\n}\n"},{type:t.re.NORMAL,value:"함수 표현식인 sayYeah는 변수 선언만 호이스팅되어 sayYeah()를 호출하기 전에 함수를 할당해주지 않으면 에러가 발생합니다. 아래는 sayYeah가 호이스팅되어 상단으로 올려졌으나 값이 할당되지 않아 호출하면 에러를 발생시킵니다."},{type:t.re.CODE,value:"var sayYeah;\nsayYeah(); // 에러\n\nsayYeah = function() {\n  console.log('yeah');\n}\n\nfunction sayWow() {\n  console.log('wow');\n}\n        "},{type:t.re.NORMAL,value:"함수 표현식은 변수에 함수를 할당하는 형태이므로 변수 호이스팅은 발생하지만 함수의 할당은 유지되지 않아 함수를 먼저 호출할 수 없습니다. "},{type:t.re.EMPHASIS,value:"함수 표현식을 사용할 때는 변수에 함수가 할당된 이후에 호출하도록 유의해야 합니다."},{type:t.re.NORMAL,value:"참고하면 좋은 링크</br>\n          https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0"}]},{id:10,title:"컨텍스트와 실행 과정",date:"2023-02-18",folder:t.gt.JAVASCRIPT,preview:"호이스팅(Hoisting)은 JavaScript에서 변수와 함수 선언이 최상단으로 끌어올려지는 현상을 말합니다. 하지만 함수 선언식과 함수 표현식은 다르게 동작하므로 주의가 필요합니다.\n    ",tag:["Javascript"],post:[{type:t.re.CODE,value:"var name = 'zero'; \n\nfunction wow(word) { \n  console.log(word + ' ' + name); \n}\n\nfunction say () { \n  var name = 'nero'; \n  console.log(name); \n  wow('hello'); \n}\nsay();"},{type:t.re.NORMAL,value:"일단 처음 브라우저가 스크립트를 로딩해서 실행하기 시작하는 순간 모든 것을 포함하는 전역 컨텍스트가 생깁니다. 모든 것을 관리하는 환경입니다. 페이지가 종료될 때까지 유지됩니다."},{type:t.re.H4,value:"1. 전역 컨텍스트(Global Context) 생성"},{type:t.re.NORMAL,value:"전역 컨텍스트를 객체 형식으로 표현해보겠습니다."},{type:t.re.CODE,value:"변수객체: { name: 'zero', wow: Function, say: Function }\nscopeChain: ['전역 변수객체']\nthis: window"},{type:t.re.NORMAL,value:"전역 컨텍스트는 arguments(함수의 인자)가 없으며 variable은 해당 스코프의 변수들입니다. </br> name, wow, say가 있습니다.</br></br>\n        자신과 상위 스코프들의 변수객체인 scope chain생성 됩니다.</br>스코프 체인은 자기 자신인 전역 변수객체입니다.</br></br>\n        this는 따로 설정되어 있지 않으면 window입니다. </br>this를 바꾸는 방법이 바로 new를 호출하는 겁니다. </br>또는 함수에 다른 this 값을 bind할 수도 있습니다.</br></br>\n        일반 함수의 this가 왜 window인지 아시겠죠? </br>원래 기본적으로 window고 new나 bind같은 상황에서 this가 바뀌는 겁니다.\n        "},{type:t.re.H4,value:"2. say 함수 호출 시 컨텍스트 생성"},{type:t.re.CODE,value:"변수객체: { name: 'nero' }\nscopeChain: ['say 변수객체', '전역 변수객체']\nthis: window"},{type:t.re.NORMAL,value:"맨위 코드에서 say();호출 하는 순간 새로운 컨텍스트인 say함수 컨텍스트가 생깁니다. </br> 아까 전역 컨텍스트는 그대로 있습니다."},{type:t.re.H4,value:"say함수 실행"},{type:t.re.CODE,value:"var name = 'nero';\nconsole.log(name); (결과: 'nero')\nwow('hello');;\n        "},{type:t.re.NORMAL,value:"say를 호출한 후 차례대로 say함수 내의 내용들이 실행하는데요.</br>\n        variable의 name에 nero를 대입해주고 나서 console.log(name);이 있습니다.</br></br>\n        \n        name 변수는 say 컨텍스트 안에서 찾으면 됩니다.</br>\n        variable에 name이 nero라고 되어 있네요. name이 콘솔에 찍힙니다.</br></br>\n        \n        그 다음엔 wow('hello')가 있습니다. </br>\n        say 컨텍스트 안에서 wow 변수를 찾을 수 없습니다.</br>\n        찾을 수 없다면 scope chain을 따라 올라가 상위 변수객체에서 찾습니다. 그래서 전역 변수객체에서 찾습니다. </br>전역 변수객체의 variable에 wow라는 함수가 있네요. 이걸 호출합니다."},{type:t.re.H4,value:"3. wow 함수 호출 시 컨텍스트 생성"},{type:t.re.CODE,value:"변수객체: { arguments: { word: 'hello' } }\nscopeChain: ['wow 변수객체', '전역 변수객체']\nthis: window"},{type:t.re.NORMAL,value:"여기서 중요한 게 lexical scoping에 따라 wow 함수의 스코프 체인은 선언 시에 이미 정해져 있습니다. </br>\n        따라서 say 스코프는 wow 컨텍스트의 scope chain이 아닙니다. variable은 없고, this는 window입니다.</br></br>\n        이제 컨텍스트가 생긴 후 함수가 실행 됩니다. (say 함수는 아직 종료되지 않았습니다.)</br>\n       "},{type:t.re.H4,value:"wow 함수 호출 실행"},{type:t.re.CODE,value:"console.log(word + ' ' + name); \n(word: 'hello', name: 'zero')\n(전역 컨텍스트의 name 변수를 참조)"},{type:t.re.NORMAL,value:" wow 함수 안에서 console.log(word + ' ' + name);이 있는데요.</br>\n        word랑 name 변수는 wow 컨텍스트에서 찾으시면 됩니다.</br></br>\n\n        word는 arguments에서 찾을 수 있고, name은 wow 변수객체에는 값이 없으니, scope chain을 따라 전역 스코프에서 찾을수 있습니다.</br></br>\n        전역 변수객체로 올라가니 variable에 name이 zero라고 되어 있네요. </br> 그래서 hello zero가 되는 겁니다. hello nero가 아니라요.</br> wow 컨텍스트에 따르면 wow 함수는 애초에 say 컨텍스트와 일절 관련이 없었던 겁니다.</br></br>\n\n        이제 wow 함수 종료 후 wow 컨텍스트가 사라지고, say 함수의 실행이 마무리됩니다. 따라서 say 컨텍스트도 사라지고, </br>마지막에 전역 컨텍스트도 사라집니다. 함수 실행, 변수 선언 등 모든 게 다 논리적입니다. </br></br>그래서 컨텍스트 개념을 이해하면 자바스크립트의 모든 문제들을 풀 수 있습니다. 정리하자면 "},{type:t.re.STRINGLIST,value:"전역 컨텍스트에 전역 변수가 선언되고, 함수 wow와 say가 변수객체에 할당됩니다.\n        say 함수가 호출되면 say 함수의 컨텍스트가 생성되고, 그 내부에서 name 변수가 'nero'로 초기화됩니다.\n        wow 함수가 say 함수 내에서 호출되면, wow 함수의 컨텍스트가 생성되고, 내부에서 word와 name 변수를 참조합니다.\n        wow 함수 내에서 name 변수는 전역 컨텍스트의 name 변수를 참조하여 'hello zero'를 출력합니다."},{type:t.re.NORMAL,value:"참고 https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0"}]},{id:11,title:"콜백 지옥(Callback Hell)과 프로미스(Promise)",date:"2022-09-22",folder:t.gt.JAVASCRIPT,preview:" 비동기 프로그래밍에서 자주 발생하는 코드 구조의 한 종류로, 여러 비동기 동작이 중첩된 형태로 코드가 작성될 때 발생하는 가독성 저하와 유지보수의 어려움을 지칭합니다.",tag:["Javascript"],post:[{type:t.re.NORMAL,value:"콜백 지옥(Callback Hell)은 비동기 프로그래밍에서 자주 발생하는 코드 구조의 한 종류로, 여러 비동기 동작이 중첩된 형태로 코드가 작성될 때 발생하는 가독성 저하와 유지보수의 어려움을 지칭합니다. 주로 콜백 함수를 사용하는 상황에서 비동기적인 작업들이 중첩되어 발생하며, 코드가 길어질수록 가독성이 떨어지고 로직의 이해가 어려워지는 문제가 발생합니다. </br></br>\n\n      예를 들어, 서버에서 데이터를 받아오고, 그 데이터를 가공한 후 다시 서버에 전송하고, 그 응답을 받아와서 화면에 출력하는 일련의 비동기 동작들이 중첩되는 상황에서 콜백 지옥이 발생할 수 있습니다. 이러한 중첩된 콜백 함수들은 코드의 들여쓰기 수준이 깊어지고, 가독성이 떨어져 코드를 이해하기 어려워집니다."},{type:t.re.CODE,value:"asyncFunction1(function(result1) {\n    asyncFunction2(result1, function(result2) {\n        asyncFunction3(result2, function(result3) {\n            // ...\n        });\n    });\n});"},{type:t.re.NORMAL,value:"이러한 중첩된 구조는 비동기 동작이 많아질수록 코드를 이해하기 어려워지며, 에러 처리 및 유지보수가 복잡해집니다.</br></br>\n\n        콜백 지옥을 해결하기 위한 방법으로는 Promise나 Async/Await와 같은 비동기 처리 방식을 활용하는 것이 있습니다. 이를 통해 코드의 가독성을 향상시키고, 비동기 동작들을 보다 명시적이고 관리하기 쉬운 형태로 구현할 수 있습니다."},{type:t.re.H2,value:"Promise나 Async/Await을 사용하여 콜백지옥을 해결하는 방법"},{type:t.re.NORMAL,value:"콜백 지옥을 해결하기 위해 Promise나 Async/Await을 사용하는 것은 비동기 코드를 더 간결하고 가독성 있게 만들 수 있는 방법 중 하나입니다. 아래는 각각 Promise와 Async/Await을 사용하여 콜백 지옥을 해결하는 예제 코드입니다."},{type:t.re.H4,value:"1. Promise 사용"},{type:t.re.CODE,value:"function asyncFunction1() {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 1');\n              resolve('Result from Async Function 1');\n          }, 1000);\n      });\n  }\n  \n  function asyncFunction2(result) {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 2');\n              resolve('Result from Async Function 2');\n          }, 1000);\n      });\n  }\n  \n  function asyncFunction3(result) {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 3');\n              resolve('Result from Async Function 3');\n          }, 1000);\n      });\n  }\n  \n  asyncFunction1()\n      .then((result1) => asyncFunction2(result1))\n      .then((result2) => asyncFunction3(result2))\n      .then((result3) => {\n          console.log('Final Result:', result3);\n      })\n      .catch((error) => {\n          console.error('Error:', error);\n      });\n      "},{type:t.re.H4,value:"Async/Await 사용"},{type:t.re.CODE,value:"function asyncFunction1() {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 1');\n              resolve('Result from Async Function 1');\n          }, 1000);\n      });\n  }\n  \n  function asyncFunction2(result) {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 2');\n              resolve('Result from Async Function 2');\n          }, 1000);\n      });\n  }\n  \n  function asyncFunction3(result) {\n      return new Promise((resolve) => {\n          // 비동기 작업 수행\n          setTimeout(() => {\n              console.log('Async Function 3');\n              resolve('Result from Async Function 3');\n          }, 1000);\n      });\n  }\n  \n  async function runAsyncFunctions() {\n      try {\n          const result1 = await asyncFunction1();\n          const result2 = await asyncFunction2(result1);\n          const result3 = await asyncFunction3(result2);\n  \n          console.log('Final Result:', result3);\n      } catch (error) {\n          console.error('Error:', error);\n      }\n  }\n  \n  runAsyncFunctions();\n      "},{type:t.re.NORMAL,value:"위의 코드에서는 각각의 비동기 함수가 Promise를 반환하도록 작성되었고, 이를 순차적으로 호출하도록 then 또는 await을 사용하였습니다. async & await에서 예외를 처리하는 방법은 바로 try catch입니다. </br></br>\n        코드에서 발생한 네트워크 통신 오류뿐만 아니라 간단한 타입 오류 등의 일반적인 오류까지도 catch로 잡아낼 수 있습니다. 발견된 에러는 error 객체에 담기기 때문에 에러의 유형에 맞게 에러 코드를 처리해주시면 됩니다.</br></br>\n        프로미스를 사용하게 되면 프로미스 객체에 비동기 처리된 결과값이 저장되며 콜백의 경우 매번 비동기 함수를 호출하여 비동기처리된 결과값을 얻었다면 프로미스는 .then 메소드를 통해서 원하는 때에 저장되어 있는 비동기 값을 사용할 수 있습니다.</br></br>\n        Async & Await을 사용하면 비동기 코드를 동기 코드처럼 작성할 수 있습니다. 이로써 코드의 의도가 명확해지고 가독성이 향상됩니다. Async & Await을 사용하면 콜백 지옥을 피하고 비동기 코드를 구조적이고 명료하게 작성할 수 있습니다."}]},{id:12,title:"프로미스(Promise)의 세 가지 상태와 활용",date:"2022-09-07",folder:t.gt.JAVASCRIPT,preview:"프로미스를 사용할 때 알아야 하는 가장 기본적인 개념이 바로 프로미스의 상태(states)입니다. 여기서 말하는 상태란 프로미스의 처리 과정을 의미합니다. new Promise()로 프로미스를 생성하고 종료될 때까지 3가지 상태를 갖습니다..\n    ",tag:["Javascript"],post:[{type:t.re.NORMAL,value:"프로미스는 비동기 처리를 위한 패턴 중 하나로, 세 가지 상태를 가지며 각각의 상태에 따라 처리 과정이 이뤄집니다."},{type:t.re.H2,value:"1. Pending(대기) 상태"},{type:t.re.NORMAL,value:'프로미스가 생성되고 아직 비동기 처리가 완료되지 않은 초기 상태를 "대기" 상태라고 합니다. 아래는 프로미스를 생성하는 예제입니다.'},{type:t.re.CODE,value:"const myPromise = new Promise((resolve, reject) => {\n  // 비동기 처리 로직...\n});\n        "},{type:t.re.H2,value:"2. Fulfilled(이행) 상태"},{type:t.re.NORMAL,value:'비동기 처리가 성공적으로 완료되면 프로미스는 "이행" 상태가 됩니다. resolve 함수를 호출하여 상태를 변경합니다.'},{type:t.re.CODE,value:'const myPromise = new Promise((resolve, reject) => {\n  const data = "Success!";\n  resolve(data);\n});\n\nmyPromise.then((result) => {\n  console.log(result); // "Success!"\n});\n        '},{type:t.re.H2,value:"3. Rejected(실패) 상태"},{type:t.re.NORMAL,value:'비동기 처리 중 오류가 발생하면 프로미스는 "실패" 상태가 됩니다. reject 함수를 호출하여 상태를 변경합니다.'},{type:t.re.CODE,value:'const myPromise = new Promise((resolve, reject) => {\n  const error = new Error("Something went wrong!");\n  reject(error);\n});\n\nmyPromise.catch((error) => {\n  console.error(error.message); // "Something went wrong!"\n});'},{type:t.re.NORMAL,value:"프로미스를 사용하면 콜백 지옥을 피하고 비동기 코드를 더 간결하게 작성할 수 있습니다."},{type:t.re.CODE,value:'function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true;\n      if (success) {\n        resolve("Data fetched successfully!");\n      } else {\n        reject("Error fetching data");\n      }\n    }, 2000);\n  });\n}\n\nfetchData()\n  .then((result) => {\n    console.log(result); // "Data fetched successfully!"\n  })\n  .catch((error) => {\n    console.error(error); // "Error fetching data"\n  });'},{type:t.re.NORMAL,value:"프로미스를 사용하면 비동기 코드를 일관된 방식으로 처리하고, 세 가지 상태를 활용하여 처리 결과를 명확하게 다룰 수 있습니다. 이를 통해 코드의 가독성과 유지보수성이 향상됩니다."}]},{id:13,title:"JWT와 토큰 관리 방법",date:"2022-07-08",folder:t.gt.JAVASCRIPT,preview:"액세스 토큰은 주로 인증된 사용자가 보호된 리소스에 접근할 수 있는 권한을 부여하는 데 사용되는 문자열입니다. 주로 웹 애플리케이션, 모바일 앱 등에서 사용자 인증 및 권한 부여에 쓰입니다. 여러 인증 프로토콜에서 사용되며, 대표적으로 OAuth 2.0에서 정의되어 있습니다.\n    ",tag:["JWT","Token"],post:[{type:t.re.NORMAL,value:"JWT(JSON Web Token)는 JSON 객체를 사용하여 모바일이나 웹의 사용자 인증을 위해 사용하며 정보를 안전성 있게 암호화한 토큰을 의미한다."},{type:t.re.H4,value:"Access Token"},{type:t.re.NORMAL,value:"액세스 토큰은 주로 인증된 사용자가 보호된 리소스에 접근할 수 있는 권한을 부여하는 데 사용되는 문자열입니다. 주로 웹 애플리케이션, 모바일 앱 등에서 사용자 인증 및 권한 부여에 쓰입니다. 여러 인증 프로토콜에서 사용되며, 대표적으로 OAuth 2.0에서 정의되어 있으며</br></br>기본적으로 Access Token은 다음과 같은 특징을 가지고 있다."},{type:t.re.STRINGLIST,value:"<b>유효 기간(Expiration)</b> : Access Token은 일정 기간 동안만 유효하다. 일반적으로 짧은 시간(예: 2시간) 동안만 유효하며, 이 기간이 지나면 재발급이나 새로운 인증이 필요하다.\n\n        <b>권한 범위(범위)</b> : Access Token에는 사용자가 수행할 수 있는 특정 작업 또는 리소스에 대한 권한 범위가 지정된다. Scope는 해당 토큰으로 어떤 작업이 가능한지를 결정하는 데 사용된다.\n        \n        <b>발급자(Issuer)</b> : 토큰을 발급한 인증 서버(발급자)의 정보가 토큰에 포함될 수 있다. 클라이언트는 이 정보를 사용하여 토큰의 신뢰성을 확인할 수 있다.\n        \n        <b>서명(Signature)</b> : 보안을 강화하기 위해 토큰은 발급자에 의해 서명된다. 서명을 통해 토큰이 유효하며 조작되지 않았음을 검증할 수 있다.\n        \n        <b>사용자 식별 정보</b> : Access Token에는 사용자를 고유하게 식별할 수 있는 정보(사용자 ID 등)가 포함될 수 있다. 이를 통해 서버는 특정 사용자에 대한 작업을 수행할 수 있다."},{type:t.re.H4,value:"Refresh token"},{type:t.re.NORMAL,value:"access 토큰이 만료가 됐을 경우 access 토큰을 재발급 받을 수 있도록 서버에 요청할 수 있다. fresh token은 access token을 재발급받을 수 있는 token이다. 이 token은 서버에 저장되기 때문에(stateful) refresh token이 해커에 의해 탈취당했다고 판단되었을 때 서버에서 refresh token을 삭제함으로써 강제 로그아웃을 시킬 수 있다.</br></br>\n\n        이런 특징을 이용해서 access token + refresh token의 조합을 구성하면 access token의 경제적인 장점과 refresh token의 보안적인 장점을 둘 다 챙길 수 있다. access token은 보안 적으로 취약하니 2시간 정도로 짧게 가져가고, refresh token은 처리 비용이 많이 들기 때문에 2주 정도로 길게 가져가는 방식을 주로 사용한다."},{type:t.re.CODE,value:'client.interceptors.request.use(\n    function (config) {\n        const user = localStorage.getItem(\'user\');\n        if (!user) {\n            config.headers["accessToken"] = null;\n            config.headers["refreshToken"] = null;\n            return config\n        }\n        const { accessToken, refreshToken } = JSON.parse(user)\n        config.headers["accessToken"] = accessToken;\n        config.headers["refreshToken"] = refreshToken;\n        return config\n    }\n)'},{type:t.re.NORMAL,value:"reqeust를 보낼때 localStorage에 token 정보가 있다면 헤더에 토큰 정보를 저장하고 없다면 null로 처리를 한다."},{type:t.re.CODE,value:"client.interceptors.response.use(\n    function (response) {\n        return response\n    },\n    async function (error) {\n      if (error.response && error.response.status === 403) {\n          try {\n              const originalRequest = error.config;\n              const data = await client.get('auth/refreshtoken')\n              if (data) {\n                  const {accessToken, refreshToken} = data.data\n                  localStorage.removeItem('user')\n                  localStorage.setItem('user', JSON.stringify(data.data, ['accessToken', 'refreshToken']))\n                  originalRequest.headers['accessToken'] = accessToken;\n                  originalRequest.headers['refreshToken'] = refreshToken;\n                  return await client.request(originalRequest);\n                  }\n          } catch (error){\n              localStorage.removeItem('user');\n              console.log(error);\n          }\n          return Promise.reject(error)\n      }\n      return Promise.reject(error)\n    }\n)"},{type:t.re.NORMAL,value:"response를 받았을 때, error가 발생했고 해당 error의 status가 403이라면 기존의 originalRequest를 auth/refreshtoken 으로 전달해 토큰을 재발급 받도록 한다.</br></br>\n        여기서 403 이외의 오류가 들어온다면 토큰 재발급에 실패한것으로 처리를 한다.</br></br>\n        재발급 받은 토큰을 다시 로컬스토리지에 저장 하고 헤더 부분에 토큰 정보를 변경하고 다시 originalRequest를 보낸다."},{type:t.re.CODE,value:"import axios from 'axios';\n\nconst client = axios.create({\n    baseURL: 'http://localhost:4000/'\n})\n\nclient.interceptors.request.use(\n    function (config) {\n        const user = localStorage.getItem('user');\n        if (!user) {\n            config.headers[\"accessToken\"] = null;\n            config.headers[\"refreshToken\"] = null;\n            return config\n        }\n        const { accessToken, refreshToken } = JSON.parse(user)\n        config.headers[\"accessToken\"] = accessToken;\n        config.headers[\"refreshToken\"] = refreshToken;\n        return config\n    }\n)\n\nclient.interceptors.response.use(\n    function (response) {\n        return response\n    },\n    async function (error) {\n      if (error.response && error.response.status === 403) {\n          try {\n              const originalRequest = error.config;\n              const data = await client.get('auth/refreshtoken')\n              if (data) {\n                  const {accessToken, refreshToken} = data.data\n                  localStorage.removeItem('user')\n                  localStorage.setItem('user', JSON.stringify(data.data, ['accessToken', 'refreshToken']))\n                  originalRequest.headers['accessToken'] = accessToken;\n                  originalRequest.headers['refreshToken'] = refreshToken;\n                  return await client.request(originalRequest);\n                  }\n          } catch (error){\n              localStorage.removeItem('user');\n              console.log(error);\n          }\n          return Promise.reject(error)\n      }\n      return Promise.reject(error)\n    }\n)\n\nexport default client;"},{type:t.re.H2,value:"보안"},{type:t.re.H2,value:"CSRF(Cross Site Request Forgery)"},{type:t.re.NORMAL,value:"CSRF는 Cross-Site Request Forgery의 약자로, 한 사이트에서 인증된 사용자의 권한을 가로채어 다른 사이트에서 공격자가 의도한 동작을 수행하게 하는 공격이다. 이 공격은 사용자가 자신의 의지와 무관하게 공격자가 의도한 요청을 악의적인 웹사이트를 통해 전송함으로써 이루어진다."},{type:t.re.H4,value:"CSRF 작동 원리"},{type:t.re.STRINGLIST,value:"사용자가 특정 웹사이트에 로그인하여 인증을 받는다.\n          이 사용자가 다른 웹사이트(공격자의 사이트)를 방문한다.\n         공격자의 사이트에서는 사용자의 권한으로 특정 동작(예: 글쓰기, 계정 변경 등)을 요청하는 HTTP 요청을 생성한다.\n         이를 트리거하기 위해 공격자는 이미 로그인된 사용자의 브라우저에서 악의적인 요청을 보낼 수 있는 방법을 찾는다."},{type:t.re.H4,value:"예시 시나리오"},{type:t.re.STRINGLIST,value:"사용자 A가 은행 웹사이트에 로그인한다.\n        사용자 A가 악의적인 이메일 링크를 클릭하여 공격자의 웹사이트에 접속한다.\n        해당 웹사이트에서는 사용자 A의 권한으로 은행 웹사이트에 자동으로 자금 이체를 요청하는 HTTP 요청을 생성한다.\n        이를 통해 은행 웹사이트는 사용자 A의 권한으로 이체를 실행하게 된다."},{type:t.re.H2,value:"XSS(Cross Site Scripting)"},{type:t.re.NORMAL,value:"XSS라고 불리는 이유는 CSS가 이미 약자가 있기 때문이고 code injection attack이라고도 한다.\n\n        XSS도 다양한 공격 방법이 있는데 우선은\n        <b>공격자가 의도하는 악의적인 js 코드를 피해자의 웹 브라우저에서 실행</b>시키는 것 정도로 알고 있으면 된다.\n        \n        이 방법으로 피해자 브라우저에 저장된 중요 정보들을 탈취 가능하다."},{type:t.re.EMPHASIS,value:"아무리 다른 공격(CSRF 등)에 대한 방비를 열심히 했다 해도 XSS가 뚫린다면 아무 소용이 없다. js코드로 의도하지 않은 request를 날린다던가 localStorage, 변수 값 등 모든 것이 탈취 가능하기 때문이다. XSS 공격 방지는 웹 보안의 뿌리이며 XSS 공격을 막는 것은 웹 보안을 위한 최소한의 조치이다."},{type:t.re.H2,value:"해결 1) localStorage에 저장하는 방법"},{type:t.re.H4,value:"CSRF 공격에는 안전하다."},{type:t.re.NORMAL,value:"그 이유는 자동으로 request에 담기는 쿠키와는 다르게 js 코드에 의해 헤더에 담기므로 XSS를 뚫지 않는 이상 공격자가 정상적인 사용자인 척 request를 보내기가 어렵다."},{type:t.re.H4,value:"XSS에 취약하다."},{type:t.re.NORMAL,value:"공격자가 localStorage에 접근하는 js 코드 한 줄만 주입하면 localStorage를 공격자가 내 집처럼 드나들 수 있다."},{type:t.re.H2,value:"해결 2) cookie에 저장하는 방법"},{type:t.re.H4,value:"XSS 공격으로부터 localStorage에 비해 안전하다."},{type:t.re.NORMAL,value:"쿠키의 httpOnly 옵션을 사용하면 Js에서 쿠키에 접근 자체가 불가능하다.</br>\n        그래서 XSS 공격으로 쿠키 정보를 탈취할 수 없다.(httpOnly 옵션은 서버에서 설정할 수 있음) 하지만 XSS 공격으로부터 완전히 안전한 것은 아니다."},{type:t.re.NORMAL,value:"httpOnly 옵션으로 쿠키의 내용을 볼 수 없다 해도 js로 request를 보낼 수 있으므로 자동으로 request에 실리는 쿠키의 특성 상 사용자의 컴퓨터에서 요청을 위조할 수 있기 때문이다.</br>\n        공격자가 귀찮을 뿐이지 XSS가 뚫린다면 httpOnly cookie도 안전하진 않다."},{type:t.re.H4,value:"CSRF 공격에 취약하다."},{type:t.re.NORMAL,value:"자동으로 http request에 담아서 보내기 때문에 공격자가 request url만 안다면 사용자가 관련 link를 클릭하도록 유도하여 request를 위조하기 쉽다."},{type:t.re.H2,value:"해결 3 : refresh token 사용하는 방법"},{type:t.re.NORMAL,value:"가장 좋은 방법으로는 refresh token을 사용하는 방법이 있다. CSRF 공격으로부터 안전한 환경을 유지하기 위해 쿠키에 SameSite 속성을 설정하고, 리프레시 토큰을 활용하여 요청의 유효성을 검증하는 방법이다. 백엔드 api 개발자와 소통이 가능하다면 refresh token을 httpOnly 쿠키로 설정하고\n        url이 새로고침 될 때마다 refresh token을 request에 담아 새로운 accessToken을 발급 받는다. </br></br>\n        \n        발급 받은 accessToken은 js private variable에 저장한다.</br></br>\n        \n        이런 방식을 사용하는 경우, refresh token이 CSRF에 의해 사용된다 하더라도 공격자는 accessToken을 알 수 없다.</br></br>\n        \n        CSRF는 피해자의 컴퓨터를 제어할 수 있는 것이 아니기 때문이다. 요청을 위조하여 피해자가 의도하지 않은 서버 동작을 일으키는 공격방법이기 때문에 refresh token을 통해 받아온 response(accessToken)는 공격자가 확인할 수 없다.</br></br>\n        \n        따라서 쿠키를 사용하여 XSS를 막고 refresh token 방식을 이용하여 CSRF를 막을 수 있다."}]}]},5254:function(e,n,r){var t,o,a,l,s,c,u,i;r.d(n,{aC:function(){return o},cD:function(){return l},gt:function(){return t},re:function(){return a}}),(s=t||(t={})).REACT="React",s.JAVASCRIPT="Javascript",s.ALGORITHM="Algorithm",s.HTMLCSS="HtmlCSS",s.LIBRARY="library",s.WEBPERFORMANCE="WebPerformance",s.REGULAREXPRESSION="RegularExpression",s.CONVENTION="Convention",s.MACBOOK="Macbook",s.DOCKER="Docker",s.DEVOPE="Devope",s.GIT="Git",s.AWS="Aws",(c=o||(o={})).LvNone="난이도 표시 없음",c.Lv0="LEVEL0",c.Lv1="LEVEL1",c.Lv2="LEVEL2",c.Lv3="LEVEL3",(u=a||(a={})).NORMAL="normal",u.EMPHASIS="emphasis",u.CODE="code",u.TABLE="table",u.STRINGLIST="stringlist",u.NUMLIST="numlist",u.H1="h1",u.H2="h2",u.H4="h4",u.H3="H3",(i=l||(l={})).PROGRAMMERS="프로그래머스",i.INFLEAN="인프런",i.BAEKJOON="백준"}}]);