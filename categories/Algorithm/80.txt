2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
3:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
4:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
5:I[5613,[],""]
8:I[1778,[],""]
c:I[8765,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","262","static/chunks/262-683004883e01034d.js","35","static/chunks/35-17fdeaa71107664f.js","464","static/chunks/app/(layoutCase)/layout-ad90720708a07259.js"],""]
6:["categoryname","Algorithm","d"]
7:["postid","80","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["eAYovxfDYhWXk36E6nr0a",[[["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Algorithm","d"],{"children":[["postid","80","d"],{"children":["__PAGE__?{\"categoryname\":\"Algorithm\",\"postid\":\"80\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Algorithm","d"],{"children":[["postid","80","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] TypeScript Record<string, number> 기본"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["3 months"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"3 months"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"Record 유틸리티 타입은 TypeScript에서 제공하는 내장 타입으로, 특정 타입의 키와 값으로 구성된 객체를 정의할 때 사용됩니다"}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"\t\t\t\t<b>키(key)</b>: string 타입 (예: \"age\", \"score\", \"id\" 등)."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>값(value)</b>: number 타입 (예: 42, 100, 3.14 등)."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"즉, 모든 키가 문자열이고, 모든 값이 숫자인 객체를 나타냅니다."}}]]}],["$","$L3",null,{"code":"const scores: Record<string, number> = {\n  math: 95,\n  science: 88,\n  history: 92\n};'","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위 객체는 Record 타입에 부합합니다. 키는 math, science, history (모두 string)이고, 값은 95, 88, 92 (모두 number)입니다."}}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"특징"}],false,false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>동적 키 허용</b>: 키가 고정되지 않고, 문자열인 어떤 키든 가질 수 있습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>값 타입 강제</b>: 모든 값은 number 타입이어야 하며, 다른 타입(예: string, boolean)을 넣으면 컴파일 에러가 발생합니다."}}]]}],["$","$L3",null,{"code":"const invalid: Record<string, number> = {\n  name: \"John\" // 에러: \"John\"은 number가 아님\n};","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>빈 객체 가능</b>: Record<string, number> 타입의 객체는 속성이 없어도 유효합니다."}}]]}],["$","$L3",null,{"code":"const empty: Record<string, number> = {};","children":"$undefined"}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"다른 타입과의 비교"}],false,false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>{ [key: string]: number } 와 동일</b>: Record<string, number>는 인덱스 시그니처 { [key: string]: number }와 같은 의미입니다. 하지만 Record는 더 간결하고 가독성이 좋습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>제한된 키 타입</b>: 키를 특정 문자열 리터럴로 제한하려면 Record<\"key1\" | \"key2\", number>처럼 사용할 수 있습니다."}}]]}],["$","$L3",null,{"code":"const limited: Record<\"width\" | \"height\", number> = {\n  width: 100,\n  height: 200\n  // depth: 50 // 에러: \"depth\"는 허용되지 않는 키\n};","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"값 타입 일관성: 모든 값이 number여야 하며, undefined나 null도 허용되지 않습니다 (단, Record처럼 명시적으로 허용 가능)."}}]],["$","$L4",null,{"postid":80,"prePostTitle":{"id":81,"title":"[TECH-QA] React에서 SVG 아이콘 다루기: 실용적인 예제와 팁","date":"2025-07-24 12:57:33","folder":"Javascript","tag":["TECH-QA","SVG"],"preview":"React에서 ref를 부모 컴포넌트에서 생성하여 자식 컴포넌트(예: _Icon)에 전달하고, 이를 통해 SVG와 같은 DOM 요소에 직접 접근하는 이유와 용도를 간단히 설명하겠습니다.","post":[{"type":"Heading","headingType":"h2","value":"ref를 사용하는 이유"},{"type":"normal","value":"React는 선언적 UI 라이브러리로, 일반적으로 상태와 props를 통해 UI를 관리합니다. 하지만 특정 상황에서는 DOM 요소에 직접 접근해야 할 때가 있습니다. ref는 이를 가능하게 하며, 부모 컴포넌트에서 ref를 생성해 자식 컴포넌트에 전달하면 자식의 DOM 요소(여기서는 <svg>)를 부모에서 조작하거나 정보를 얻을 수 있습니다."},{"type":"Heading","headingType":"h2","value":"ref를 통해 할 수 있는 작업"},{"type":"normal","value":"_Icon 컴포넌트의 SVG 요소에 ref를 전달하여 부모 컴포넌트에서 수행할 수 있는 작업의 예시입니다."},{"type":"Heading","headingType":"h4","value":"DOM 속성/상태 조회"},{"type":"stringlist","value":"SVG 요소의 크기, 위치, 속성 등을 확인.\n예: ref.current.getBoundingClientRect()를 호출해 SVG의 화면상 위치나 크기를 확인.\n용도: 애니메이션이나 툴팁 위치 계산."},{"type":"Heading","headingType":"h4","value":"직접 DOM 조작"},{"type":"stringlist","value":"React 상태 외부에서 SVG의 속성을 동적으로 변경.\n예: ref.current.setAttribute('fill', 'red')로 색상을 변경.\n용도: React로 처리하기 복잡한 동적 스타일링."},{"type":"Heading","headingType":"h4","value":"애니메이션 제어"},{"type":"stringlist","value":"SVG 요소에 애니메이션을 적용하거나 제어.\n예: ref.current.animate()를 사용해 CSS/SVG 애니메이션을 트리거.\n용도: 아이콘에 클릭 시 깜빡이는 효과 추가."},{"type":"Heading","headingType":"h4","value":"포커스 관리"},{"type":"stringlist","value":"SVG 요소에 포커스를 설정하거나 확인.\n예: ref.current.focus()로 접근성 개선.\n용도: 키보드 내비게이션 지원."},{"type":"Heading","headingType":"h4","value":"외부 라이브러리와 통합"},{"type":"stringlist","value":"D3.js, GSAP 같은 라이브러리가 DOM 요소를 직접 조작해야 할 때.\n예: ref.current를 라이브러리에 전달해 SVG 경로 애니메이션 적용.\n용도: 복잡한 시각화 작업."},{"type":"Heading","headingType":"h4","value":"이벤트 처리"},{"type":"stringlist","value":"특정 DOM 이벤트(예: 마우스 오버, 드래그)를 직접 감지.\n예: ref.current.addEventListener('mouseover', handleMouseOver).\n용도: React의 합성 이벤트로 처리하기 어려운 경우."},{"type":"Heading","headingType":"h4","value":"예제"},{"type":"code","value":"import React, { useRef, useEffect } from 'react';\nimport { _ICon } from './IcArrowLeft';\n\nconst ParentComponent = () => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      // SVG 요소에 접근하여 작업 수행\n      console.log('SVG 크기:', svgRef.current.getBoundingClientRect());\n      \n      // 예: 색상 변경\n      svgRef.current.setAttribute('fill', 'purple');\n      \n      // 예: 클릭 이벤트 추가\n      svgRef.current.addEventListener('click', () => {\n        alert('SVG 클릭됨!');\n      });\n    }\n  }, []);\n\n  return (\n    <div>\n      <_ICon\n        ref={svgRef}\n        size={32}\n        color=\"blue\"\n        filled={true}\n        aria-label=\"왼쪽 화살표\"\n      />\n    </div>\n  );\n};\n\nexport default ParentComponent;"},{"type":"stringlist","value":"<b>React 철학 준수</b>: React는 DOM 직접 조작을 최소화하도록 권장합니다. 가능하면 상태/props로 UI를 관리하세요.\n<b>적절한 사용</b>: ref는 포커스 관리, 애니메이션, 외부 라이브러리 통합 등 필수적인 경우에만 사용하세요.\n<b>접근성 고려</b>: SVG에 aria-label 같은 속성을 추가해 접근성을 유지하세요.\n<b>ref 전달 방식</b>: _ICon React.forwardRef로 래핑되어 있어야 ref가 SVG 요소에 올바르게 연결됩니다."}]},"nextPostTile":{"id":79,"title":"[TECH-QA] TypeScript로 깔끔한 쿼리 문자열 만들기: Record<string, never> 활용법","date":"2025-07-23 18:14:33","folder":"Javascript","tag":["TECH-QA"],"preview":"qsStringify와 유사한 기능을 수행하는 새로운 함수 buildQueryString를 TypeScript로 작성한 예제입니다. 이 함수는 입력 객체를 쿼리 문자열로 변환하며, 유효하지 않은 값(null, undefined, 빈 문자열/배열)을 제거합니다. Record<string, never>를 기본 타입으로 사용해 빈 객체를 처리합니다.","post":[{"type":"Heading","headingType":"h2","value":"🚩 Record<string, never> 활용법"},{"type":"code","value":"import { isNil, isArray, isEmpty } from 'lodash';\nimport qs from 'query-string';\n\nconst buildQueryString = <T = Record<string, never>>(params?: T): string => {\n  // 유효하지 않은 값(null, undefined, 빈 문자열/배열) 제거\n  const cleanedParams = omitBy(params || {}, (val) => {\n    if (isNil(val)) return true;\n    return isArray(val) && (val as string[]).every((v) => !v);\n  });\n\n  // 객체가 비어 있으면 빈 문자열 반환, 아니면 쿼리 문자열 생성\n  return isEmpty(cleanedParams) ? '' : `?${qs.stringify(cleanedParams, { arrayFormat: 'comma', encode: false })}`;\n};\n\n// 사용 예제\nconsole.log(buildQueryString()); // ''\nconsole.log(buildQueryString({ name: 'John', age: '25', empty: '' })); // '?name=John,age=25'\nconsole.log(buildQueryString({ items: [], invalid: null })); // ''\nconsole.log(buildQueryString({ tags: ['red', 'blue'], empty: null })); // '?tags=red,blue'"},{"type":"normal","value":"buildQueryString 함수는 프론트엔드에서 API 요청을 위한 쿼리 문자열을 생성하는 유틸리티 함수입니다. 입력 객체에서 유효하지 않은 값(null, undefined, 빈 문자열, 빈 배열 또는 모든 요소가 빈 값인 배열)을 제거하고, 유효한 데이터만 포함한 쿼리 문자열을 반환합니다. 이는 API 요청을 간결하게 만들고, 서버의 처리 부담을 줄이며, 사용자 경험을 개선하는 데 기여합니다."},{"type":"Heading","headingType":"h2","value":"함수 구조"},{"type":"keyword","keyworldTitle":"제네릭 타입","value":"<T = Record<string،  never>>"},{"type":"normal","value":"T는 입력 파라미터 params의 타입을 나타냅니다.\n기본 타입 Record<string, never>는 속성이 없는 빈 객체 {}를 의미합니다.\nparams가 undefined이거나 전달되지 않을 경우, 빈 객체 {}로 처리되어 함수가 안전하게 동작합니다."},{"type":"keyword","keyworldTitle":"파라미터","value":"params?: T"},{"type":"stringlist","value":"params는 선택적이며, 객체 형태로 전달됩니다.\nparams || {}를 통해 undefined일 경우 빈 객체로 대체됩니다."},{"type":"keyword","keyworldTitle":"로직","value":"Lodash의 omitBy"},{"type":"normal","value":"Lodash의 omitBy를 사용해 <span class=\"point\">null, undefined, 빈 문자열</span> 또는 <span class=\"point\">모든 요소가 빈 값인 배열</span>을 제거."},{"type":"normal","value":"{ name: \"John\", empty: null, items: [\"\"] } → <span class=\"point\"> { name: \"John\" }.</span>"},{"type":"stringlist","value":"Lodash의 isEmpty로 정리된 객체가 비어 있는지 확인.\n비어 있으면 ' '를 반환.\n그렇지 않으면 qs.stringify를 사용해 쿼리 문자열로 변환하고, ?를 접두사로 추가.\narrayFormat: 'comma'는 배열을 쉼표로 구분 (예: tags=red,blue).\nencode: false는 URL 인코딩을 비활성화해 가독성을 높임."},{"type":"Heading","headingType":"h4","value":"입력 없음"},{"type":"code","value":"buildQueryString(); // 출력: ''"},{"type":"stringlist","value":"params가 undefined이므로 빈 객체 {}로 처리.\nomitBy({}, ...)는 빈 객체를 반환, isEmpty가 true이므로 '' 반환."},{"type":"Heading","headingType":"h4","value":"유효한 값 포함"},{"type":"code","value":"buildQueryString({ name: 'John', age: '25', empty: '' }); // 출력: '?name=John,age=25'"},{"type":"stringlist","value":"empty: ''는 제거됨.\ncleanedParams = { name: 'John', age: '25' }.\nqs.stringify로 name=John,age=25를 생성하고, ?를 추가."},{"type":"Heading","headingType":"h4","value":"유효하지 않은 값만 포함"},{"type":"code","value":"buildQueryString({ items: [], invalid: null }); // 출력: ''"},{"type":"stringlist","value":"items: []와 invalid: null은 제거됨.\ncleanedParams = {}, isEmpty가 true이므로 '' 반환."},{"type":"Heading","headingType":"h4","value":"배열 포함"},{"type":"code","value":"buildQueryString({ tags: ['red', 'blue'], empty: null }); // 출력: '?tags=red,blue'"},{"type":"stringlist","value":"empty: null은 제거됨.\ncleanedParams = { tags: ['red', 'blue'] }.\nqs.stringify로 tags=red,blue를 생성하고, ?를 추가."},{"type":"Heading","headingType":"h2","value":"배열 포함"},{"type":"stringlist","value":"<b>효율적인 요청</b>: 불필요한 파라미터를 제거해 네트워크 요청 크기를 줄이고, 서버의 처리 부담을 완화.\n<b>타입 안전성</b>: Record<string, never>를 기본 타입으로 사용해 입력이 없거나 빈 객체일 때도 안전하게 처리.\n<b>사용자 경험</b>: 간결한 쿼리 문자열은 URL을 깔끔하게 유지하며, 브라우저 히스토리나 공유 링크의 가독성을 높임.\n<b>서버 부하 감소</b>: 유효한 데이터만 서버로 전송되므로 서버의 검증 로직이 간소화됨."},{"type":"Heading","headingType":"h2","value":"트래픽 관리와의 연관성"},{"type":"stringlist","value":"프론트엔드에서 데이터를 정리하면 불필요한 데이터 전송이 줄어들어 네트워크 트래픽이 감소.\n서버는 유효한 데이터만 처리하므로 CPU/메모리 사용량이 줄고, 캐싱 효율성이 향상.\n이는 트래픽 스파이크를 간접적으로 방지하며, 전체 시스템 성능을 최적화."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L5",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/80c9ce4c138da48c.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
