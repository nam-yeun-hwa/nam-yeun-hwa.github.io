2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
3:I[688,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
4:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-be6fda65951f1358.js"],""]
5:I[5613,[],""]
8:I[1778,[],""]
c:I[8765,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","262","static/chunks/262-683004883e01034d.js","35","static/chunks/35-17fdeaa71107664f.js","464","static/chunks/app/(layoutCase)/layout-ad90720708a07259.js"],""]
6:["categoryname","Convention","d"]
7:["postid","73","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["eAYovxfDYhWXk36E6nr0a",[[["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Convention","d"],{"children":[["postid","73","d"],{"children":["__PAGE__?{\"categoryname\":\"Convention\",\"postid\":\"73\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Convention","d"],{"children":[["postid","73","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] 훅으로 분리할 이유가 있을까?"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["4 months"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"4 months"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"커스텀 훅(Custom Hook)으로 분리한다는 것은 컴포넌트 내부의 상태 관리(useState), 부수 효과(useEffect), 또는 기타 로직을 별도의 함수(커스텀 훅)로 추출해 <b>컴포넌트와 독립적으로 관리</b>하는 것을 의미합니다. 커스텀 훅은 React의 훅(useState, useEffect 등)을 사용하며, 일반적으로 use로 시작하는 이름을 가집니다."}}],["$","$L3",null,{"keyword":"UI 렌더링과 기능 로직을 분리하여 가독성과 유지보수 향상 ","title":"가독성과 유지보수성"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"컴포넌트 내부에 상태 관리와 UI 렌더링 로직이 섞여 있으면 코드가 복잡해지고 읽기 어려워집니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"훅으로 로직을 분리하면 컴포넌트는 JSX와 UI 렌더링에 집중하고, 로직은 별도로 관리되어 가독성이 향상됩니다."}}]]}],["$","$L3",null,{"keyword":"동일한 로직을 여러 컴포넌트에서 사용할 때 ","title":"재사용성"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"동일한 로직을 여러 컴포넌트에서 사용할 때, 훅으로 분리하면 중복 코드를 줄이고 일관성을 유지할 수 있습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"비록 현재 재사용하지 않더라도, 나중에 필요할 가능성을 대비해 분리하는 것이 유리할 수 있습니다."}}]]}],["$","$L3",null,{"keyword":"UI렌더링과 기능 로직은 분리하여 독립적으로 검증 가능","title":"테스트 용이성"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"훅은 컴포넌트와 독립적으로 테스트할 수 있습니다. UI를 렌더링하지 않고 로직만 검증 가능."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"예: useCounter 훅을 테스트할 때, 카운트 증가와 타이머 동작을 별도로 확인할 수 있습니다."}}]]}],["$","$L3",null,{"keyword":"상태 관리, 데이터 fetching, 이벤트 처리, 캡슐화 ","title":"기능 별로 분리"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"상태 관리, 데이터 fetching, 이벤트 처리 등 특정 기능(관심사)을 훅으로 캡슐화해 컴포넌트의 책임을 줄입니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"이는 코드의 모듈화와 유지보수성을 높입니다."}}]]}],["$","$L3",null,{"keyword":"로직을 체계적으로 구조화","title":"복잡한 로직 관리"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"로직이 복잡할수록(예: 여러 useState, useEffect 조합) 컴포넌트 내부에 두면 관리가 어렵습니다. 훅으로 분리하면 로직을 체계적으로 구조화할 수 있습니다."}}]]}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"언제 훅으로 분리해야 하나?"}],false,false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"로직이 복잡하거나 여러 줄의 코드를 차지할 때(예: useEffect와 useState가 조합된 경우)."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"가독성을 높이고 컴포넌트를 간결하게 유지하고 싶을 때."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"테스트를 독립적으로 수행하고 싶을 때."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"현재 또는 미래에 로직을 재사용할 가능성이 있을 때."}}],["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"예) 데이터 fetching, 폼 관리, 타이머, 애니메이션 등."}}]]}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"분리하지 않아도 되는 경우?"}],false,false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"로직이 매우 단순할 때(예: 단일 useState로 충분한 경우)."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"로직이 특정 컴포넌트에 강하게 의존적이고 재사용 가능성이 전혀 없을 때."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"추가 파일을 만드는 오버헤드가 로직의 복잡도에 비해 클 때."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"예) const [isOpen, setIsOpen] = useState(false); 같은 단순한 상태 관리."}}]]}]],["$","$L4",null,{"postid":73,"prePostTitle":{"id":74,"title":"[TECH-QA] 개방-폐쇄 원칙(Open-Closed Principle, OCP)","date":"2025-07-16 14:16:33","folder":"React","tag":["TECH-QA"],"preview":"OCP는 소프트웨어 엔티티(클래스, 모듈, 컴포넌트 등)가 확장에는 열려 있고, 변경에는 닫혀 있어야 한다는 원칙으로, 새로운 기능을 추가할 때 기존 코드를 수정하지 않고 확장할 수 있도록 설계하는 것을 목표로 합니다.","post":[{"type":"Heading","headingType":"h2","value":"OCP를 위반하는 Button 컴포넌트(안티패턴)"},{"type":"keyword","value":"OCP 위반,Button 컴포넌트"},{"type":"normal","value":"먼저, 새로운 버튼 variant를 추가할 때마다 기존 코드를 수정해야 하는 안티패턴을 살펴보겠습니다. 이 방식은 OCP를 위반하며 유지보수성을 떨어뜨립니다."},{"type":"code","value":"// 안티패턴: OCP를 위반하는 Button 컴포넌트\nfunction Button({ variant, children, ...props }) {\n  let className = 'button';\n\n  if (variant === 'primary') {\n    className += ' button--primary';\n  } else if (variant === 'secondary') {\n    className += ' button--secondary';\n  } else if (variant === 'danger') {\n    className += ' button--danger';\n  }\n\n  return (\n    <button className={className} {...props}>\n      {children}\n    </button>\n  );\n}\n\n// 사용 예시\n<Button variant=\"primary\">Primary Button</Button>\n<Button variant=\"secondary\">Secondary Button</Button>\n<Button variant=\"danger\">Danger Button</Button>"},{"type":"Heading","headingType":"h4","value":"문제점"},{"type":"stringlist","value":"새로운 variant (예: success)를 추가하려면 Button 컴포넌트 내부의 if-else 로직을 수정해야 함.\n이는 OCP의 \"변경에 닫혀 있어야 한다\"를 위반.\n코드가 복잡해지고, 새로운 요구사항이 생길 때마다 기존 코드 수정이 불가피해짐."},{"type":"Heading","headingType":"h2","value":"OCP를 준수하는 리팩터링 ButtonBase 컴포넌트"},{"type":"keyword","value":"OCP 준수, ButtonBase 컴포넌트"},{"type":"normal","value":"OCP를 준수하기 위해 ButtonBase라는 기본 컴포넌트를 만들고, 이를 확장하여 다양한 버튼 변형을 생성하는 방식으로 리팩터링합니다. 이를 통해 새로운 variant를 추가할 때 기존 코드를 수정하지 않고도 확장이 가능해집니다."},{"type":"code","value":"// 기본 컴포넌트 ButtonBase\nfunction ButtonBase({ className, children, ...props }) {\n  return (\n    <button className={`button ${className}`} {...props}>\n      {children}\n    </button>\n  );\n}\n\n// 확장된 버튼 컴포넌트들\nconst PrimaryButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--primary\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\nconst SecondaryButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--secondary\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\nconst DangerButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--danger\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\n// 사용 예시\n<PrimaryButton>Primary Button</PrimaryButton>\n<SecondaryButton>Secondary Button</SecondaryButton>\n<DangerButton>Danger Button</DangerButton>\n\n// 새로운 SuccessButton 추가 (기존 코드 수정 없이 가능)\nconst SuccessButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--success\" {...props}>\n    {children}\n  </ButtonBase>\n);"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>확장성</b>: 새로운 버튼 변형(예: SuccessButton)을 추가할 때 ButtonBase나 기존 컴포넌트를 수정하지 않아도 됨.\n<b>유지보수성</b>: 각 버튼 변형이 독립적이어서 코드가 간결하고 관리하기 쉬움.\n<b>OCP 준수</b>: 새로운 기능을 추가하기 위해 기존 코드를 변경하지 않고 확장 가능."},{"type":"Heading","headingType":"h2","value":"컴포넌트 합성 패턴 Card 컴포넌트"},{"type":"keyword","value":"컴포넌트 합성 패턴"},{"type":"normal","value":"OCP를 준수하는 또 다른 방법은 컴포넌트 합성 패턴을 사용하는 것입니다. Card 컴포넌트를 예로 들어, 다양한 콘텐츠를 유연하게 확장할 수 있도록 설계해 보겠습니다."},{"type":"Heading","headingType":"h4","value":"기본 Card 컴포넌트"},{"type":"code","value":"function Card({ header, body, footer, ...props }) {\n  return (\n    <div className=\"card\" {...props}>\n      {header && <div className=\"card-header\">{header}</div>}\n      {body && <div className=\"card-body\">{body}</div>}\n      {footer && <div className=\"card-footer\">{footer}</div>}\n    </div>\n  );\n}\n\n// 사용 예시\n<Card\n  header={<h2>Card Title</h2>}\n  body={<p>This is the card content.</p>}\n  footer={<PrimaryButton>Action</PrimaryButton>}\n/>"},{"type":"Heading","headingType":"h4","value":"새로운 확장: 이미지 포함 Card"},{"type":"code","value":"const ImageCard = ({ image, ...props }) => (\n  <Card\n    header={image && <img src={image} alt=\"Card Image\" className=\"card-image\" />}\n    {...props}\n  />\n);\n\n// 사용 예시\n<ImageCard\n  image=\"https://example.com/image.jpg\"\n  body={<p>This is an image card.</p>}\n  footer={<SecondaryButton>Learn More</SecondaryButton>}\n/>"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>유연성</b>: Card 컴포넌트는 다양한 콘텐츠(헤더, 바디, 푸터)를 조합하여 확장 가능.\n<b>재사용성</b>: ImageCard와 같은 새로운 컴포넌트를 기존 Card를 활용해 쉽게 생성.\n<b>OCP 준수</b>: 새로운 Card 변형을 추가할 때 기존 Card 컴포넌트를 수정할 필요 없음."},{"type":"Heading","headingType":"h2","value":"고차 컴포넌트(HOC)를 통한 확장"},{"type":"normal","value":"고차 컴포넌트(HOC)를 사용하면 기존 컴포넌트에 새로운 기능을 추가하여 OCP를 준수할 수 있습니다. 예를 들어, 버튼에 로딩 상태를 추가하는 HOC를 만들어 보겠습니다."},{"type":"code","value":"// HOC: 로딩 상태를 추가\nfunction withLoading(Component) {\n  return function LoadingComponent({ isLoading, children, ...props }) {\n    return (\n      <Component {...props} disabled={isLoading}>\n        {isLoading ? 'Loading...' : children}\n      </Component>\n    );\n  };\n}\n\n// 로딩 가능한 버튼 생성\nconst LoadingPrimaryButton = withLoading(PrimaryButton);\nconst LoadingSecondaryButton = withLoading(SecondaryButton);\n\n// 사용 예시\n<LoadingPrimaryButton isLoading={true}>Click Me</LoadingPrimaryButton>\n<LoadingSecondaryButton isLoading={false}>Click Me</LoadingSecondaryButton>"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>기능 확장</b>: withLoading HOC를 통해 기존 버튼 컴포넌트에 로딩 기능을 추가.\n<b>OCP 준수</b>: 기존 PrimaryButton이나 SecondaryButton 코드를 수정하지 않고 새로운 기능 추가 가능.\n<b>재사용성</b>: HOC는 다른 컴포넌트에도 적용 가능."}]},"nextPostTile":{"id":72,"title":"[TECH-QA] Text Compression","date":"2025-05-18 09:59:33","folder":"Javascript","tag":["브라우저","TECH-QA","웹성능최적화"],"preview":"웹 페이지를 로드 할때는 그에 필요한 리소스 들도 같이 다운로드 받습니다. 대표적으로 HTML, JS, CSS 와 같은 텍스트들로 이루어진 리소스들이 있는데요.\n\t\t이 리소스들의 사이즈가 클수록 페이지의 로딩속도는 느려질 수 밖에 없습니다.\n\t\t이런 문서들의 사이즈를 줄이기 위한 여러가지 방법 중 Text Compression을 소개해 보려고 합니다.\n","post":[{"type":"normal","value":"웹 페이지를 로드 할때는 그에 필요한 리소스 들도 같이 다운로드 받습니다. 대표적으로 HTML, JS, CSS 와 같은 텍스트들로 이루어진 리소스들이 있는데요.\n\t\t이 리소스들의 사이즈가 클수록 페이지의 로딩속도는 느려질 수 밖에 없습니다.\n\t\t이런 문서들의 사이즈를 줄이기 위한 여러가지 방법 중 Text Compression을 소개해 보려고 합니다."},{"type":"Heading","headingType":"h2","value":"Text Compression"},{"type":"normal","value":"서버에서 보내는 리소스를 압축해서 다운로드할 파일들의 용량을 줄여 더 빠른 서비스를 이용 할수 있도록 합니다."},{"type":"ImageLoader","value":"","imageloader":{"imgPath":"textCompression_image1.jpg","alt":"textCompression 사용","width":"80%","round":"12px"}},{"type":"normal","value":"웹서비스를 실행하고 네트워크 탭에서 api가 호출되는 부분을 클릭하여 헤더를 살펴 보면 Response Headers의 내용 중  <span class=\"point\">Content-Encoding</span>를 확인 할 수 있습니다. <span class=\"point\">이미지를 확인해 보면 gzip 이라는 인코딩 방식을 통해서 압축</span>되어 있다는 것을 알 수 있습니다.\n\n<b>요청을 보낼 때 클라이언트가 어떤 압축 알고리즘을 수용할 수 있는지 나타내면서 서버에서 이러한 방식으로 압축해달라고 요청하는 의미가 됩니다.</b>\n\n요청을 받으면 서버에서는 클라이언트가 원하는 압축 방식중에서 가능한 알고리즘으로 압축한 뒤에 응답을 보내주고 사용된 압축 알고리즘이 content-encoding 헤더에 명시 하게 됩니다.\n\n이 헤더들의 값으로 gzip, compress, br, deflate 등 압축알고리즘에는 여러가지가 있지만 웹상에서는 일반적으로 GZIP과 Deplate 두가지를 사용 합니다."},{"type":"Heading","headingType":"h2","value":"gzip"},{"type":"normal","value":"gzip 은 유닉스에서 태어난 오픈소스 압축 프로그램 입니다. 알집이나 7zip 에서 사용하는 것과 동일한 Deflate 압축 알고리즘을 사용하지만 하나의 파일만 압축할 수 있기 때문에 주로 tar 프로그램과 함께 사용하곤 합니다. 불편하기 짝이없어 보이는 gzip 압축 프로그램에 주목해야 하는 이유는 gzip 압축이 웹사이트 성능 개선과 밀접한 연관이 있기 때문입니다.\n\nGZIP은 Deplate을 단독으로 사용하는 것보다 더 좋은 압축률을 제공 합니다.\n\ngzip의 압축 알고리즘은 deflate 알고리즘과 같으며 deflate와 비교해서 차이점은 <span class=\"point\"> gzip 포맷은 추가적인 헤더와 체크섬을 사용하여 오류검출에 더 강점이 있습니다.</span>"},{"type":"Heading","headingType":"h2","value":"gzip을 사용한 텍스트 압축"},{"type":"normal","value":"gzip은 텍스트 파일을 압축하는데 있어서 최상의 성능을 내는 것으로 알려져 있습니다. 우리의 웹사이트는 이미지를 제외한 대부분이 텍스트 콘텐츠로 구성되어 있습니다. 자바스크립트, HTML, CSS, JSON 등 사이트를 구성하는 거의 모든 요소가 텍스트 콘텐츠 입니다.\n\n<span class=\"point\">우리가 사용하는 대부분의 브라우저는 이미 gzip 압축프로그램을 내장하고 있습니다. 게다가 자동으로 gzip 으로 압축된 파일을 해제하는 기능도 탑재하고 있습니다. 즉, 서버에서 gzip 으로 압축된 형태의 텍스트 리소스가 내려오면 브라우저는 자동으로 gzip 압축을 해제하여 페이지를 표시합니다.</span>\n"},{"type":"normal","value":"사실 gzip 인코딩 기능은 HTTP/1.1 명세에 포함되어 있으며 HTTP/1.1 을 지원하는 대부분의 현재의 브라우저는 gzip 으로 압축된 콘텐츠를 사용 가능합니다.\n\n웹 사이트 응답속도 개선에 있어 가장 먼저 적용을 고려해야 하고 또 적용 이후에도 즉각적인 효과를 볼 수 있는 가장 탁월한 수단이 바로 gzip 압축 전송의 적용입니다. 웹서버에 간단한 설정만으로 적용이 가능하고 별다른 사이드 이펙트를 찾기도 어렵습니다. <span class=\"point\">gzip 압축이 영향을 주는 구간이 <b>웹서버와 사용자 브라우저 사이의 네트웍 구간</b>이기 때문에 프로그램의 실행 로직등에는 영향을 주지 않기 때문입니다.</span>"},{"type":"normal","value":"gzip 압축 전송을 이용하면 사이트 트래픽의 대부분을 점유하는 Big 3 (자바스크립트, CSS, HTML) 요소를 크게는 90% 가까이 압축하여 전송할 수 있기 때문에 네트웍 대역폭 사용량을 크게 감소시킬 수 있습니다."},{"type":"Heading","headingType":"h2","value":"gzip 압축을 적용하는 4가지 방법"},{"type":"normal","value":"사이트에 gzip 압축을 적용하는 방법은 <b>응답할 데이터를 압축하는 작업을 누가 처리하도록 하느냐</b>에 따라서 크게 4가지로 구분 할 수 있습니다."},{"type":"stringlist","value":"Apache 나 Nginx 등 Web서버에서 처리하기\nTomcat 이나 Weblogic 등 어플리케이션 서버(Was)에서 처리하기\nServlet Filter 를 등록하여 처리하기\n정적인 파일을 미리 gzip 으로 압축하여 올리기"},{"type":"normal","value":"일반적으로는 Web 서버에서 처리하도록 하고 있으나, 프로젝트나 사이트의 사정에 따라서는 다른 방법을 고려할 수 도 있습니다. 가령 Web서버와 Was 구간의 대역폭을 확보해야 한다거나 하는 이유로 말이죠."},{"type":"Heading","headingType":"h3","value":"nginx 에 gzip 으로 컨텐츠 압축 설정하기"},{"type":"normal","value":"압축 설정은 가상 호스트마다 하지 말고 메인 설정 파일(/etc/nginx/nginx.conf) 의 http 블록에 설정하면 전역적으로 적용되므로 편리합니다."},{"type":"code","value":"http {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n    \n  # 압축 설정\n}"},{"type":"normal","value":"이 코드는 Nginx 웹 서버의 설정 파일(nginx.conf 또는 관련 설정 파일)에서 HTTP 블록의 일부를 나타냅니다."},{"type":"normal","value":"<p><b>include /etc/nginx/mime.types;</b><p>/etc/nginx/mime.types 파일을 포함시켜 Nginx가 파일 확장자에 따라 적절한 <b>MIME 타입을 설정</b>하도록 합니다. 예를 들어 아래와 같이 처리됩니다.\n이를 통해 클라이언트(브라우저)가 파일을 올바르게 해석할 수 있습니다."},{"type":"stringlist","value":".html 파일은 text/html\n\t\t\t\t .jpg 파일은 image/jpeg"},{"type":"normal","value":"<p><b>default_type application/octet-stream;</b><p>/etc/nginx/mime.types 파일을 포함시켜 Nginx가 파일 확장자에 따라 적절한 <b>MIME 타입을 설정</b>하도록 합니다. 예를 들어 아래와 같이 처리됩니다.\n이를 통해 클라이언트(브라우저)가 파일을 올바르게 해석할 수 있습니다."},{"type":"stringlist","value":"MIME 타입을 설정하지 않은 파일이나 알 수 없는 확장자의 파일에 대해 기본적으로 application/octet-stream 타입을 지정합니다.\napplication/octet-stream은 일반적인 바이너리 파일을 의미하며, 브라우저는 이를 다운로드하거나 기본적으로 처리합니다."},{"type":"normal","value":"제일 먼저 설정할 항목은 gzip on; 으로 컨텐츠 압축 사용을 지시하는 것입니다"},{"type":"code","value":"http {\n  gzip on;\n  gzip_disable \"msie6\";\n}"},{"type":"normal","value":"<b>gzip on;</b>"},{"type":"stringlist","value":"Gzip 압축을 활성화합니다.\n이를 통해 서버가 응답 데이터를 압축하여 클라이언트(브라우저)로 전송하므로, 데이터 전송량을 줄이고 페이지 로드 속도를 개선할 수 있습니다.\n압축 대상은 일반적으로 HTML, CSS, JavaScript, JSON, XML 등 텍스트 기반 파일입니다."},{"type":"normal","value":"<b>gzip_disable \"msie6\";</b>"},{"type":"stringlist","value":"특정 사용자 에이전트(브라우저)에 대해 Gzip 압축을 비활성화합니다.\n여기서는 \"msie6\" (Microsoft Internet Explorer 6)을 대상으로 지정하여, 이 브라우저에서는 압축된 콘텐츠를 전송하지 않습니다.\nInternet Explorer 6은 Gzip 압축 처리에 버그가 있거나 호환성 문제가 있을 수 있어, 이를 방지하기 위해 압축을 비활성화합니다."},{"type":"Heading","headingType":"h3","value":"nginx 에 gzip 으로 컨텐츠 압축 설정"},{"type":"code","value":"gzip_comp_level 6;\ngzip_min_length 500;\ngzip_buffers 16 8k;\ngzip_proxied any;"},{"type":"normal","value":"<b>gzip_comp_level </b>"},{"type":"stringlist","value":"Gzip 압축 수준을 설정합니다. 값은 1(최소 압축, 빠른 처리)에서 9(최대 압축, 느린 처리)까지 가능합니다.\n6은 압축률과 성능 간의 균형이 좋은 중간 수준으로, 기본값이기도 합니다.\n높은 압축 수준은 파일 크기를 더 줄이지만 CPU 사용량이 증가합니다."},{"type":"normal","value":"<b>gzip_min_length 500</b>"},{"type":"stringlist","value":"압축을 적용할 응답 데이터의 최소 길이를 바이트 단위로 지정합니다.\n여기서는 응답 데이터가 500바이트 이상일 때만 Gzip 압축을 적용합니다.\n작은 데이터는 압축해도 크기 감소 효과가 미미하므로, 불필요한 CPU 사용을 줄이기 위해 설정합니다."},{"type":"normal","value":"<b>gzip_buffers 16 8k;</b>"},{"type":"stringlist","value":"Gzip 압축을 처리하기 위해 할당할 메모리 버퍼의 개수와 크기를 지정합니다.\n16 8k는 16개의 8KB 버퍼를 사용한다는 의미입니다(총 128KB).\n이 설정은 압축 데이터를 처리하는 데 필요한 메모리 공간을 정의하며, 서버의 메모리와 부하에 따라 조정할 수 있습니다."},{"type":"normal","value":"<b>gzip_proxied any;</b>"},{"type":"stringlist","value":"프록시된 요청에 대해 Gzip 압축을 적용할 조건을 설정합니다.\nany는 모든 프록시 요청(예: CDN, 리버스 프록시 등)에 대해 압축을 활성화합니다.\n이는 클라이언트가 아닌 중간 프록시 서버를 통해 요청이 올 때도 압축된 데이터를 전송하도록 보장합니다.\nany: 항상 압축합니다.\noff: 프락시에서 요청할 경우 압축하지 않습니다.\nexpired: 요청 헤더에 Expires 가 있고 만료되었을 경우에만 압축합니다.\nno-cache: 요청 헤더에 Cache-Control 가 있고 no-cache 일 경우에만 압축합니다.\nno-store: 요청 헤더에 Cache-Control 가 있고 no-store 일 경우에만 압축합니다.\n"},{"type":"normal","value":"그 외 가능한 설정은 <a href=\"http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_proxied\">Nginx gzip_proxied Documentation</a>을 참고하세요."},{"type":"Heading","headingType":"h3","value":"nginx 에 gzip 으로 content type 설정하기"},{"type":"normal","value":"컨텐츠의 유형에 따라 gzip_types 지시자로 압축 여부를 설정할 수 있으며 아래 설정은 일반적으로 많이 사용하는 컨텐츠 유형에 대해 압축하는 예로 가독성을 위해 개행을 적용했습니다."},{"type":"code","value":"gzip_types\n    text/plain\n    text/css\n    text/js\n    text/xml\n    text/javascript\n    application/javascript\n    application/x-javascript\n    application/json\n    application/xml\n    application/rss+xml\n    image/svg+xml;"},{"type":"normal","value":"<b>gzip_types 지시문</b>"},{"type":"stringlist","value":"Gzip 압축을 적용할 콘텐츠의 MIME 타입을 정의합니다.\n기본적으로 text/html은 항상 압축되므로 이 목록에 포함되지 않아도 됩니다.\n이 설정은 gzip on;이 활성화된 경우에만 적용됩니다."},{"type":"normal","value":"<b>지정된 MIME 타입</b>"},{"type":"stringlist","value":"<b>text/plain</b>: 일반 텍스트 파일(예: .txt).\n<b>text/css</b>: CSS 스타일시트 파일(예: .css).\n<b>text/js</b>: JavaScript 파일. 참고: text/js는 비표준 MIME 타입으로, 현대 웹에서는 application/javascript가 권장됩니다. 일부 레거시 시스템에서 사용될 수 있음.\n<b>text/xml</b>: XML 형식의 텍스트 파일(예: .xml).\n<b>text/javascript</b>: JavaScript 파일. 참고: 과거에 사용되었으나, 현재는 application/javascript로 대체됨.\n<b>application/javascript</b>: 현대 표준 JavaScript 파일(예: .js).\n<b>application/x-javascript</b>: JavaScript 파일의 비표준/레거시 MIME 타입. 호환성을 위해 포함.\n<b>application/json</b>: JSON 데이터 파일(예: .json).\n<b>application/xml</b>: XML 형식의 애플리케이션 데이터.\n<b>application/rss+xml</b>: RSS 피드(예: RSS XML 파일).\n<b>image/svg+xml</b>: SVG 벡터 이미지 파일(예: .svg)."},{"type":"normal","value":"이 설정은 위 MIME 타입에 해당하는 파일이 클라이언트로 전송될 때 <span class=\"point\"><b>Gzip 압축을 적용하도록 Nginx에 지시</b></span>합니다.\n예를 들어 .css, .js, .json, .svg 등의 파일은 압축되어 전송되며, 이는 대역폭을 절약하고 페이지 로드 속도를 개선합니다.\ntext/js, text/javascript, application/x-javascript는 JavaScript 파일을 다양한 MIME 타입으로 처리하는 브라우저와의 호환성을 보장하기 위해 포함되었습니다."},{"type":"Heading","headingType":"h3","value":"주의사항"},{"type":"normal","value":"<b>비표준 MIME 타입</b>"},{"type":"stringlist","value":"text/js와 application/x-javascript는 비표준이며, 최신 웹 환경에서는 application/javascript만 사용하는 것이 좋습니다. 하지만 레거시 클라이언트를 지원하려면 포함할 수 있습니다."},{"type":"normal","value":"<b>기본값과의 중복</b>"},{"type":"stringlist","value":"Nginx의 기본 gzip_types에는 text/html이 포함되어 있으므로, 이 설정은 추가적인 MIME 타입을 확장하는 역할을 합니다."},{"type":"normal","value":"<b>압축 효율성</b>"},{"type":"stringlist","value":"SVG(image/svg+xml)와 같은 파일은 텍스트 기반이므로 압축 효과가 크지만, 이미 압축된 파일(예: JPEG, PNG)은 gzip_types에 포함시키지 않는 것이 일반적입니다(압축 효과가 미미함)."},{"type":"normal","value":"<b>gzip_types 설정</b>은 텍스트 기반 파일(CSS, JavaScript, JSON, XML, SVG 등)에 Gzip 압축을 적용하여 데이터 전송 효율성을 높입니다. 다양한 JavaScript MIME 타입을 포함해 호환성을 강화했으며, 특히 웹 애플리케이션에서 자주 사용되는 파일 형식을 대상으로 합니다. 최신 환경에서는 text/js와 같은 비표준 타입을 제거하고 간소화할 수 있습니다."},{"type":"Heading","headingType":"h3","value":"nginx 에 gzip 으로 컨텐츠 압축 최종 코드"},{"type":"code","value":"http {\n# nginx 의 메인 설정 파일인 nginx.conf 의 http 항목에 다음과 같이 설정\ninclude       /etc/nginx/mime.types;\ndefault_type  application/octet-stream;\n\t\n# 압축 설정\ngzip  on;\ngzip_disable \"msie6\";\n\n\ngzip_comp_level 6;\ngzip_min_length 1100;\ngzip_buffers 16 8k;\ngzip_proxied any;\n\ngzip_types\n  text/plain\n  text/css\n  text/js\n  text/xml\n  text/javascript\n  application/javascript\n  application/x-javascript\n  application/json\n  application/xml\n  application/rss+xml\n  image/svg+xml;\n}"},{"type":"GuideMessage","promptTypeProps":"WARNING","value":"압축을 하는데에도 시간이 조금 걸리지만 압축을 해제 하는 데에도 시간이 조금 걸리기 때문에 모든 파일을 압축하고 압축해제 하는 것 보다는 <b>파일의 크기가 2KB이상일 경우에는 압축을 하는것이 낫고 2KB 이하일 경우에는 압축을 진행하지 않는것이 더 효율적</b> 이라고 합니다."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L5",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/80c9ce4c138da48c.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
