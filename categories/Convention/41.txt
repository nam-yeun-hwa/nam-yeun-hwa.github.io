2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-93e5c5c2a911fe38.js"],""]
3:I[688,["250","static/chunks/250-8b90be581650ff9d.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-93e5c5c2a911fe38.js"],""]
5:I[777,["250","static/chunks/250-8b90be581650ff9d.js","862","static/chunks/app/(layoutCase)/categories/%5Bcategoryname%5D/%5Bpostid%5D/page-93e5c5c2a911fe38.js"],""]
7:I[5613,[],""]
a:I[1778,[],""]
e:I[5210,["250","static/chunks/250-8b90be581650ff9d.js","304","static/chunks/304-2ef64042fd5d1e1c.js","730","static/chunks/730-f56ebe909f1c8bdb.js","516","static/chunks/516-eaf4d30099c06448.js","927","static/chunks/927-7142a6eb3680963a.js","338","static/chunks/338-f2b637e42a7ca177.js","464","static/chunks/app/(layoutCase)/layout-66e4d36269f645f8.js"],""]
4:Tdcc,위 내용에서 인간에게 자유의지가 없다는 것은 스키너는 인간의 행동이 주로 외부 환경에서 오는 자극과 그에 따른 결과(특히 강화물, 즉 보상이나 처벌)에 의해 결정된다고 보았다고 할수 있으며 그는 이를 "조작적 조건화"(operant conditioning)라는 개념으로 설명했는다. 이는 특정 행동이 뒤따르는 결과에 의해 반복되거나 억제된다는 뜻이다. </br></br>
				
				스키너가 "인간에게 자유 의지가 없다"고 말하는 것은 전통적인 의미의 자유 의지, 즉, 인간이 외부 영향 없이 독립적으로 선택하고 행동할 수 있다는 관념을 부정하는 것이다. 그의 관점에서는 우리가 "자유롭게" 결정한다고 느끼는 순간조차도 사실은 과거의 경험과 강화물(예: 보상받았던 행동, 처벌받았던 행동)에 의해 형성된 결과일 뿐이라는 것이다. </br></br>예를 들어, 우리가 어떤 선택을 할 때 "내가 원해서 했다"고 생각하지만, 그 선택이 이전에 어떤 행동이 긍정적 결과를 가져왔는지(혹은 부정적 결과를 피하게 했는지)에 따라 이미 조건화 된 것이라고 보는 것이다.

				쉽게 말해, 인간이 자라온 환경적 요인과 학습된 패턴에 의해 통제된다는 주장이다. 스키너는 이런 관점에서 인간의 행동을 예측하고 통제할 수 있다고 믿었다. </br></br>
나의 생각은 이렇다. 인간의 성격과 내면등은 어릴적 유년기에 형성된 자아에 의해 대부분 결정이 되는 것이라고 생각되며 그렇게 유년기에 학습된 패턴에 따라 성인이 된 인간의 자아속에 이미 잠재되어 합리적이고 논리적인 사고를 할때에도 충분한 영향을 준다고 생각되며 그것은 인간의 논리를 담당하는 뇌의 영역이 아닌 감각을 담당하는 뇌의 무의식 부분에서 판단되어 진다고 생각이 든다. 어쩌면 인간은 과거의 경험으로부터 생각의 넓이를 제한받거나 앞으로의 미래까지 영향을 줄지도 모르겠단 생각이 들었다.</br></br>

또한 유년기의 조건화가 학습된 인간의 경우라면 "긍정적인 조건화"냐 "부정적인 조건화냐"에 따라 성인이 된 후 생각의 확장이 달라질것 같다고 생각했다. 예를 들어, 어릴 때 긍정적 강화(칭찬, 격려)를 받은 사람은 성인이 되어서도 새로운 가능성을 탐구하거나 도전하려는 경향이 강할 수 있고, 반대로 부정적 강화(처벌, 억압)를 주로 받은 사람은 사고가 경직되거나 방어적으로 변할 수 있다는 것이다. </br></br>

결론적으로 유년기 시절 조건화에 따라 학습된 부정적 자아를 가지고 잇는 성인일지라도 긍정적인 전환이 가능할것 이라고 생각했다. 스스로 무언가를 판단 내릴때 과거에 내가 조건화되어 학습한 부분에 대해 우선 스스로 인정하는 것이 첫번째라 생각했고 긍정적으로 전환할 수 있는 여러가지 경우를 생각하도록 학습화 한다면 충분의 다른 차원의 생각의 문의 열릴 것이라 생각한다. 예를 들면 부정적 조건화(실패에 대한 두려움)로 인해 소극적이던 사람이 "실패도 배움의 일부"라는 긍정적 프레임으로 사고를 전환하도록 자신을 훈련한다면, 그건 새로운 자유의 차원을 열어가는 과정이 될 수 있다고 생각 한다.6:T879,React에서 map으로 리스트를 렌더링할 때 각 항목에 키를 제공하지 않으면, React는 기본적으로 배열의 인덱스(0, 1, 2, ...)를 키로 사용합니다. 이 인덱스는 리스트의 위치를 나타내므로, 리스트의 항목이 고정되어 있고 순서가 절대 변하지 않는다면 문제가 없을 수 있습니다. 하지만 리스트에 항목이 추가되거나 삭제되거나 순서가 변경될 때, 인덱스는 더 이상 해당 항목의 고유성을 보장하지 못하게 됩니다. 이는 React의 재조정(reconciliation) 과정에서 혼란을 일으킵니다. </br></br> 예를 들어, [A, B, C]라는 리스트가 있다고 가정하고, 각 항목의 키가 인덱스인 경우: A(key=0), B(key=1), C(key=2).

여기서 B가 삭제되면 리스트는 [A, C]가 되고, 키는 A(key=0), C(key=1)로 바뀝니다.

원래 C의 키는 2였는데, 이제 1로 바뀌었습니다. React는 키를 기준으로 항목을 식별하므로, C가 새로운 항목인지, 기존 항목인지 혼란스러워할 수 있습니다. 이로 인해 불필요한 리렌더링이 발생하거나 상태(state)가 엉뚱한 항목에 연결될 수 있습니다. </br></br>

같은 리스트 [A, B, C]에서 순서가 [B, A, C]로 바뀌었다고 해봅시다. </br>
인덱스를 키로 사용하면: 원래는 A(key=0), B(key=1), C(key=2)였지만, 이제 B(key=0), A(key=1), C(key=2)가 됩니다. </br>

React 입장에서는 키 0이 A에서 B로, 키 1이 B에서 A로 바뀐 것으로 보입니다. 이는 항목 자체가 바뀌지 않았음에도 불구하고 React가 이를 새로운 항목으로 오해하게 만들어, DOM을 불필요하게 업데이트하거나 컴포넌트의 상태(예: 입력 필드 값)를 잘못된 항목에 연결할 수 있습니다. </br></br>


리스트 항목이 상태(예: 체크박스 선택 여부)를 가지고 있다면, 인덱스를 키로 사용하면 항목의 위치가 바뀔 때 상태가 엉뚱한 항목에 붙을 수 있습니다. 예를 들어, A에 체크가 되어 있었는데 순서가 바뀌면 체크가 B로 이동해버리는 문제가 생길 수 있습니다.

8:["categoryname","Convention","d"]
9:["postid","41","d"]
b:"$Lc"
f:[]
10:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
11:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
12:{"display":"inline-block"}
13:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["NYe-0jTvAMCyamfO4jNfE",[[["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Convention","d"],{"children":[["postid","41","d"],{"children":["__PAGE__?{\"categoryname\":\"Convention\",\"postid\":\"41\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["categories",{"children":[["categoryname","Convention","d"],{"children":[["postid","41","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[독서] 스키너의 심리상자 열기 - 스키너 박사가 실험을 통해 도출해낸 추론 : 인간에게 자유 의지가 없다"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["13 days"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"13 days"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","$L3","0",{"keyword":"인간에게 자유 의지가 없다."}],[false,false,["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_warning__ZYPQt","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"[페이지 31] </br>스키너 박사가 실험을 통해 도출해낸 추론은 어떻습니까? </br>인간에게 자유 의지가 없다는 것 말입니다. </br>우리가 오로지 강화물에 의해 지배된다는 그의 이런을 믿으시나요?\"</br>\n케이건 교수가 물었다."}}]}],false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","감상평"]}]],["$","div","3",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"$4"}}]],["$","$L5",null,{"postid":41,"prePostTitle":{"id":42,"title":"[TECH-QA] 리액트에서 map 사용시 key를 사용하는 이유","date":"2025-03-07 12:49:21","folder":"tech-QA","tag":["TECH-QA","React"],"preview":"리액트에서 map을 사용할 때 각 항목에 고유한 키(key)를 제공해야 하는 이유는 성능 및 리렌더링 관련 문제를 방지하기 위함입니다.","post":[{"type":"keyword","value":"성능 최적화, 리렌더링 관련 방지 문제"},{"type":"normal","value":"리액트에서 map을 사용할 때 각 항목에 고유한 키(key)를 제공해야 하는 이유는 성능 최적화와 리렌더링 관련 문제를 방지하기 위함입니다. </br></br>\n\t\t\t\t\n\t\t\t\t고유한 키를 제공하면 리액트가 <b>가상 DOM(Virtual DOM)에서 각 항목을 정확히 식별</b>할 수 있어, 데이터의 변경 사항을 효율적으로 비교하고 업데이트할 수 있습니다. <U>즉, 변경된 요소만 다시 렌더링하고 나머지 요소는 그대로 유지하여 불필요한 리렌더링을 줄입니다.</U></br></br>\n\n\n반면, 키를 제공하지 않으면 리액트는 기본적으로 배열의 인덱스를 키로 사용합니다. 하지만 인덱스를 키로 사용하는 것은 <b>리스트의 순서가 변경되거나 항목이 추가/삭제될 때 문제가 발생</b>할 수 있는데 예를 들어, 항목의 순서가 바뀌면 인덱스가 해당 항목의 고유성을 보장하지 못해 리액트가 잘못된 요소를 업데이트하거나 전체 목록을 다시 렌더링하게 될 가능성이 높아집니다. "},{"type":"emphasis","value":"이는 성능 저하뿐만 아니라 UI의 일관성을 해칠 수 있는 버그를 유발할 수 있습니다.","propsType":"danger"},{"type":"normal","value":"\n따라서 키(Key)로는 리스트 내에서 고유하고 안정적인 값(예: 데이터베이스의 ID나 UUID)을 사용하는 것이 권장됩니다. 임시로 생성된 값이나 변동성이 높은 값은 피해야 하며, 키가 고유하지 않으면 리액트가 경고를 출력할 수도 있습니다. 이를 통해 리액트의 재조정(reconciliation) 과정이 최적화되고, 사용자 경험과 애플리케이션 성능이 향상됩니다."},{"type":"H3","value":"왜 인덱스를 키로 사용하면 문제가 생기는가?"},{"type":"normal","value":"$6"},{"type":"emphasis","value":" 인덱스를 키로 사용하면 리스트의 항목이 추가되거나 삭제될 때 키 값이 다시 변경되기 때문에 문제가 발생합니다. 인덱스는 항목의 본질적인 고유성을 나타내는 것이 아니라 단순히 리스트 내에서의 위치만을 나타내기 때문입니다. </br>React는 키를 통해 \"이 항목이 이전과 동일한 항목인가?\"를 판단하는데, 인덱스는 그 기준으로 부적합합니다.","propsType":"warning"},{"type":"normal","value":"이 문제를 피하려면 리스트 내에서 고유하고 안정적인 값(예: 데이터베이스의 ID, UUID 등)을 키로 사용해야 합니다."},{"type":"code","value":"const items = [\n  { id: \"a1\", name: \"A\" },\n  { id: \"b2\", name: \"B\" },\n  { id: \"c3\", name: \"C\" }\n];\n\nreturn (\n  &lt;ul>\n    {items.map(item => (\n      &lt;li key={item.id}>{item.name}&lt;/li>\n    ))}\n  &lt;/ul>\n);"},{"type":"normal","value":"이렇게 하면 순서가 바뀌거나 항목이 추가/삭제되어도 id는 변하지 않으므로 React가 각 항목을 정확히 추적할 수 있습니다."}]},"nextPostTile":{"id":40,"title":"[TECH-QA] 리액트의 useCallback와 useMemo","date":"2025-03-06 12:37:21","folder":"tech-QA","tag":["TECH-QA","React"],"preview":"useCallback과 useMemo는 둘 다 ReactHooks 입니다.","post":[{"type":"normal","value":"useCallback과 useMemo는 둘 다 ReactHooks 입니다."},{"type":"H3","value":"useCallback"},{"type":"normal","value":"useCallback은 콜백함수를 메모이제이션하여 불 필요한 렌더링을 방지 합니다. useCallback은 특정 함수를 새로 만들지 않고 재사용 하고 싶을때 사용하는 훅입니다. \n\t\t\t\t\n\t\t\t\t의존성 배열(dependency array)이 변경되지 않는 한 동일한 함수의 인스턴스를 반환합니다. 주로 자식 컴포넌트에 콜백 함수를 전달할 때, 불필요한 리렌더링을 방지하기 위해 사용됩니다."},{"type":"code","value":"const memoizedCallback = useCallback(() => {\n  // 함수 로직\n}, [의존성1, 의존성2]);"},{"type":"stringlist","value":"자식 컴포넌트에 props로 전달되는 함수가 매번 새로 생성되지 않도록 방지.\n예를 들어, 버튼 클릭 핸들러나 이벤트 콜백을 자식 컴포넌트에 전달할 때 유용."},{"type":"code","value":"import React, { useState, useCallback } from 'react';\n\nfunction Child({ onClick }) {\n  console.log('Child rendered');\n  return <button onClick={onClick}>Click me</button>;\n}\n\nfunction Parent() {\n  const [count, setCount] = useState(0);\n\n  // useCallback 없이 함수를 정의하면 매 렌더링마다 새 함수가 생성됨\n  const handleClick = useCallback(() => {\n    setCount((prev) => prev + 1);\n  }, []); // 의존성 배열이 빈 경우, 함수는 처음 생성된 후 재사용됨\n\n  return (\n    &lt;div>\n      &lt;p>Count: {count}&lt;/p>\n      &lt;Child onClick={handleClick} />\n    &lt;/div>\n  );\n}"},{"type":"emphasis","value":"여기서 handleClick은 useCallback으로 감싸져 있어, Parent가 리렌더링되더라도 동일한 함수 참조를 유지합니다. </br>따라서 Child 컴포넌트는 불필요하게 리렌더링되지 않습니다(단, React.memo와 함께 사용하면 더 효과적)."},{"type":"H3","value":"useMemo"},{"type":"normal","value":"useMemo는 전달된 함수가 실행되고 반환된 결과를 메모이제이션하며 일반적으로 계산 비용이 높은 값을 메모이제이션하여 불필요한 재계산을 방지 합니다. 의존성 배열이 변경되지 않으면 이전에 계산된 값(계산된 결과를 캐싱)을 재사용하여 성능을 최적화합니다."},{"type":"code","value":"const memoizedValue = useMemo(() => {\n  // 계산 로직\n  return 결과값;\n}, [의존성1, 의존성2]);"},{"type":"stringlist","value":"복잡한 연산(예: 배열 필터링, 데이터 가공 등)의 결과를 캐싱.\n렌더링 중 불필요한 계산을 피하고 싶을 때."},{"type":"code","value":"import React, { useState, useMemo } from 'react';\n\nfunction ExpensiveComponent() {\n  const [number, setNumber] = useState(1);\n\n  // 비용이 큰 계산을 시뮬레이션\n  const computeExpensiveValue = (num) => {\n    console.log('Computing...');\n    return num * 1000; // 간단한 예시로 곱셈 사용\n  };\n\n  // useMemo로 계산 결과를 메모이제이션\n  const expensiveResult = useMemo(() => computeExpensiveValue(number), [number]);\n\n  return (\n    &lt;div>\n      &lt;p>Result: {expensiveResult}&lt;/p>\n      &lt;button onClick={() => setNumber(number + 1)}>Increment</button>\n    &lt;/div>\n  );\n}"},{"type":"normal","value":"여기서 expensiveResult는 number가 변경될 때만 새로 계산되고, 그렇지 않으면 이전 값을 재사용합니다. Computing... 로그는 number가 바뀔 때만 출력됩니다."},{"type":"emphasis","value":"두 훅 모두 성능 최적화를 위한 도구이지만, 남용하면 코드가 복잡해질 수 있으니 정말 필요한 상황(예: 자주 리렌더링되거나 계산 비용이 큰 경우)에만 사용하는 것이 좋습니다.","propsType":"danger"}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$8","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3b1855c1e57ea9b6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","categories","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$b","$Ld",null]]},[null,["$","$Le",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L7",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$f","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$10","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$11","children":"404"}],["$","div",null,{"style":"$12","children":["$","h2",null,{"style":"$13","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/04d20c09b3119d43.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4c2921450e35f824.css","precedence":"next","crossOrigin":""}]],"$L14"]]]]
d:E{"digest":"NEXT_NOT_FOUND"}
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
c:null
