2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-91d3ab3e6eb02d24.js"],""]
3:I[777,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-91d3ab3e6eb02d24.js"],""]
5:I[5613,[],""]
8:I[1778,[],""]
c:I[5210,["250","static/chunks/250-8b90be581650ff9d.js","304","static/chunks/304-2ef64042fd5d1e1c.js","730","static/chunks/730-f56ebe909f1c8bdb.js","516","static/chunks/516-eaf4d30099c06448.js","927","static/chunks/927-dccae505dc4b21ec.js","338","static/chunks/338-f2b637e42a7ca177.js","464","static/chunks/app/(layoutCase)/layout-66e4d36269f645f8.js"],""]
4:T60d,&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="UTF-8">
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
&lt;title>Event Binding Example</title>
&lt;style>
    button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }
&lt;/style>
&lt;/head>
&lt;body>

&lt;button id="myButton">Click me</button>

&lt;script>
    // 대상 요소를 가져옵니다.
    const myButton = document.getElementById('myButton');

    // 콜백 함수를 정의합니다.
    function handleClick(event) {
        console.log('Button clicked!');
        console.log('Event:', event);
    }

    function handleAnotherClick(event) {
        console.log('Another button clicked!');
        console.log('Event:', event);
    }

    // addEventListener를 사용하여 이벤트를 바인딩합니다.
    myButton.addEventListener('click', handleClick);
    myButton.addEventListener('click', handleAnotherClick);

    // 이벤트를 캡쳐링하는 핸들러를 추가할 수도 있습니다.
    myButton.addEventListener('click', function(event) {
        console.log('Capturing event...');
    }, true);

    // 이벤트 핸들러를 제거할 수도 있습니다.
    // myButton.removeEventListener('click', handleClick);

    // 다수의 이벤트 핸들러를 추가할 수 있습니다.
    // 다음 코드는 위의 코드와 동일한 효과를 냅니다.
    // myButton.onclick = handleClick;
    // myButton.onclick = handleAnotherClick;

    &lt;/script>

&lt;/body>
&lt;/html>6:["tagname","%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98","d"]
7:["postid","19","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["77UaSsecm79eCTWcq1f-w",[[["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98","d"],{"children":[["postid","19","d"],{"children":["__PAGE__?{\"tagname\":\"콜백함수\",\"postid\":\"19\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98","d"],{"children":[["postid","19","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"RESTful API이란?"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["a year"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"a year"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","div","0",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"RESTful API는 HTTP 프로토콜을 기반으로하는 웹 서비스 아키텍처입니다. 자원, 메소드, 메시지 등을 정의하여 클라이언트-서버 간의 통신을 가능하게 합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","메시지(Message)"]}]],["$","div","2",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"\n        메시지는 클라이언트와 서버 간의 통신에서 전달되는 데이터의 내용을 나타냅니다. RESTful API에서 메시지는 요청(Request)과 응답(Response)로 구분됩니다. </br></br>\n\n        <b>요청 메시지</b>는 클라이언트가 서버로 보내는 데이터입니다. 이 데이터에는 요청의 목적과 함께 필요한 정보가 포함될 수 있습니다. 주로 JSON 형식으로 데이터가 전송됩니다.\n        요청 메시지에는 요청하는 자원의 식별, 자원의 상태 변경을 위한 데이터, 요청하는 작업의 종류(메소드) 등이 포함될 수 있습니다.</br></br>\n        \n        <b>응답 메시지</b>는 서버가 클라이언트로 보내는 데이터입니다. 클라이언트의 요청에 대한 응답으로 서버는 해당 요청에 대한 처리 결과를 클라이언트에게 전달합니다. 마찬가지로 주로 JSON 형식으로 데이터가 전송됩니다.\n응답 메시지에는 요청에 대한 처리 결과(성공 또는 실패), 요청한 자원의 데이터, 추가적인 정보(예를 들어, HTTP 상태 코드) 등이 포함될 수 있습니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","자원(Resource)"]}]],["$","div","4",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"자원은 RESTful API의 핵심 개념 중 하나입니다. URI란 웹상의 자료의 id 즉, 내가 올린 블로그 글의 특정 id를 입력해줘야 글을 볼수 있는 것처럼 URI는 인터넷 자원을 나타내는 서버에 있는 정보의 표현입니다(고유 식별자). 일반적으로 웹에서는 URI(Uniform Resource Identifier)를 사용하여 자원을 식별합니다. 예를 들어, /todos는 \"할일 목록\"이라는 자원을 나타내며, /todos/1은 ID가 1인 특정 할일을 나타냅니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","메소드(Method) 메시지"]}]],["$","div","6",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"메소드 메시지는 클라이언트가 서버에게 요청하는 작업의 종류를 나타냅니다. RESTful API에서는 주로 다음과 같은 네 가지 메소드를 사용합니다."}}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>GET</b>: 서버에서 자원을 가져오기 위해 사용됩니다. 클라이언트가 서버에게 특정 자원에 대한 정보를 요청할 때 사용됩니다. 예를 들어, /todos에 GET 요청을 보내면 모든 할일 목록을 가져올 수 있습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        <b>POST</b>: 서버에 새로운 자원을 생성하기 위해 사용됩니다. 클라이언트가 서버에게 새로운 자원을 추가하려는 경우 사용됩니다. 예를 들어, /todos에 POST 요청을 보내면 새로운 할일을 추가할 수 있습니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        <b>PUT</b>: 서버의 자원을 수정하기 위해 사용됩니다. 클라이언트가 서버에게 특정 자원을 수정하려는 경우 사용됩니다. 예를 들어, /todos/1에 PUT 요청을 보내면 ID가 1인 할일을 수정할 수 있습니다."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        <b>DELETE</b>: 서버에서 자원을 삭제하기 위해 사용됩니다. 클라이언트가 서버에게 특정 자원을 삭제하려는 경우 사용됩니다. 예를 들어, /todos/2에 DELETE 요청을 보내면 ID가 2인 할일을 삭제할 수 있습니다."}}]]}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","children":"REST의 주요 특징"}],false,false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","1. 유니폼 인터페이스(일관적인 인터페이스)"]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"REST API는 HTTP 프로토콜을 기반으로 하며, HTTP URI를 통해 자원을 명시하고, HTTP 메소드(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD(Create, Read, Update, Delete) 작업을 수행합니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"일관적인 인터페이스라는 것은 시스템 또는 애플리케이션의 리소스에 접근하기 위한 인터페이스가 일관적이어야 한다는 뜻입니다. 리소스에 접근하는 방식, 요청의 형식, 응답의 형식이 애플리케이션 전반에 걸쳐 URI 요청의 형태와 응답의 형태가 일관적이어야 합니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        이러한 특성으로 인해 REST API는 간단하고 일관된 인터페이스를 제공하며, 다양한 플랫폼 및 언어에 종속되지 않고 사용할 수 있습니다."}}]]}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","2. 무상태성(Statelessness)"]}]],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"REST API는 상태를 관리하지 않는 stateless한 특성을 가집니다. 상태가 없다는 것은 클라이언트가 서버의 요청을 보낼 때 이전 요청의 영향을 받지 않음을 의미합니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        예를 들어 /login으로 로그인 요청을 보내고 로그인이 되어 다음 페이지인 /page로 넘어갔다면 /page로 리소스를 불러올 때, 이전 요청에서 login한 사실을 서버가 알고 있어야 한다면 그것은 상태가 있는 아키텍처인 것입니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        서버는 각 요청을 독립적으로 처리하고, 클라이언트의 세션 상태를 유지할 필요가 없습니다. 이는 서버의 부하를 줄이고, 확장성을 높이는데 도움이 됩니다."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"        HTTP는 기본적으로 상태가 없는 프로토콜 입니다. 따라서 HTTP를 사용하는 웹 애플리케이션은 기본적으로 상태가 없는 구조를 따릅니다."}}]]}],["$","div","13",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"이와 같은 특징들로 REST API는 인터넷 상의 자원을 표현하고, 다양한 플랫폼 및 언어 간의 통신을 간소화하며, 확장성 있는 시스템을 구축하는 데 사용됩니다."}}]],["$","$L3",null,{"postid":19,"prePostTitle":{"id":20,"title":"콜백함수란?","date":"2024-03-08 02:42:02","folder":"Javascript","tag":["Javascript","콜백함수"],"preview":"다른함수의 인자로써 이용되는 함수이며 제어권도 함께 위임한 함수이다. 위의 코드에서 setTimeout 함수로 비동기 작업을 시작한 후에 console.log(\"다른 코드\")가 실행됩니다. 이때 \"다른 코드\" 부분이 비동기 작업이 완료되기를 기다리는 동안 실행되는 코드이며 비동기 작업의 완료를 기다리는 동안 자바스크립트 코드 실행 제어권이 다른 코드에게 넘어갑니다.","post":[{"type":"normal","value":"자바스크립트에서 콜백 함수는 다른 함수의 매개변수로 전달되어 해당 함수의 실행이 완료된 후에 호출되는 함수를 가리킵니다. 이는 비동기적인 작업을 처리하거나 특정 이벤트가 발생했을 때 처리할 로직을 정의할 때 유용합니다. </br></br> 예를 들어, setTimeout 함수는 콜백 함수를 사용하여 특정 시간이 경과한 후에 실행되는 코드를 정의할 수 있으며 코드 제어권도 함께 위임한 함수입니다."},{"type":"code","value":"function performAsyncTask() {\n    console.log(\"비동기 작업 시작\");\n    setTimeout(() => {\n        console.log(\"비동기 작업 완료\");\n    }, 2000);\n    console.log(\"다른 코드\");\n}\n\nperformAsyncTask();\n\n//\"비동기 작업 시작\"\n//\"다른 코드\"\n//\"비동기 작업 완료\""},{"type":"normal","value":"위의 코드에서 setTimeout 함수로 비동기 작업을 시작한 후에 console.log(\"다른 코드\")가 실행됩니다. 이때 \"다른 코드\" 부분이 비동기 작업이 완료되기를 기다리는 동안 실행되는 코드이며 비동기 작업의 완료를 기다리는 동안 자바스크립트 코드 실행 제어권이 다른 코드에게 넘어갑니다. 이를 통해 비동기 작업을 처리하면서도 코드 실행의 흐름을 제어할 수 있습니다. "}]},"nextPostTile":{"id":18,"title":"이벤트 바인딩이란?","date":"2024-03-06 00:21:33","folder":"Javascript","tag":["Javascript"],"preview":"이벤트 바인딩이란, 발생하는 이벤트와 그 후에 어떤일이 일어나는지 알려주는 콜백함수와 연결해준 다는 뜻이다. 이벤트 바인딩이는 총 3가지 방법이 있는데, HTML이벤트 핸들러, 전통적인 DOM핸들러, EventListener을 이용한 핸들러가있다.","post":[{"type":"normal","value":"이벤트 바인딩은 발생하는 이벤트와 그 후에 어떤 일이 일어나는지를 알려주는 콜백 함수를 연결해주는 것을 말합니다. 이벤트 바인딩이는 총 3가지 방법이 있는데, HTML이벤트 핸들러, 전통적인 DOM핸들러, EventListener을 이용한 핸들러가있습니다."},{"type":"h2","value":"HTML 이벤트 핸들러"},{"type":"code","value":"&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n&lt;meta charset=\"UTF-8\">\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n&lt;title>HTML Event Handler Example</title>\n&lt;style>\n    button {\n        padding: 10px 20px;\n        font-size: 16px;\n        cursor: pointer;\n    }\n&lt;/style>\n&lt;/head>\n&lt;body>\n\n<!-- HTML 이벤트 핸들러를 사용하여 버튼에 직접 이벤트를 할당합니다. -->\n&lt;button onclick=\"handleClick()\">Click me</button>\n\n&lt;script>\n    // 이벤트 핸들러 함수를 정의합니다.\n    function handleClick() {\n        console.log('Button clicked!');\n    }\n&lt;/script>\n\n&lt;/body>\n&lt;/html>\n        "},{"type":"normal","value":"이 예제는 버튼을 클릭할 때마다 콘솔에 메시지를 출력하는 HTML 이벤트 핸들러를 보여줍니다. 여기서는 버튼 요소의 onclick 속성을 사용하여 이벤트 핸들러를 바로 지정합니다. 이 방법은 HTML과 JavaScript가 혼용되는 문제가 있으며, 추천되는 방법은 아닙니다. 대신 JavaScript 코드에서 이벤트 핸들러를 바인딩하는 방법을 사용하는 것이 더 권장됩니다."},{"type":"h2","value":"전통적인 DOM 핸들러"},{"type":"code","value":"&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n&lt;meta charset=\"UTF-8\">\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n&lt;title>DOM Event Handler Example</title>\n&lt;style>\n    button {\n        padding: 10px 20px;\n        font-size: 16px;\n        cursor: pointer;\n    }\n&lt;/style>\n&lt;/head>\n&lt;body>\n\n<!-- DOM 이벤트 핸들러를 사용하여 버튼에 이벤트를 할당합니다. -->\n&lt;button id=\"myButton\">Click me</button>\n\n&lt;script>\n    // 대상 요소를 가져옵니다.\n    const myButton = document.getElementById('myButton');\n\n    // 이벤트 핸들러 함수를 정의합니다.\n    function handleClick(event) {\n        console.log('Button clicked!');\n        console.log('Event:', event);\n    }\n\n    // DOM 이벤트 핸들러를 사용하여 이벤트를 바인딩합니다.\n    myButton.onclick = handleClick;\n&lt;/script>\n\n&lt;/body>\n&lt;/html>\n        "},{"type":"normal","value":"이 예제는 버튼을 클릭할 때마다 콘솔에 메시지를 출력하는 전통적인 DOM 이벤트 핸들러를 보여줍니다. 여기서는 버튼 요소의 onclick 속성에 함수를 할당하여 이벤트 핸들러를 지정합니다. 이 방법은 HTML 이벤트 핸들러와 달리 JavaScript 코드로 이벤트 핸들러를 바인딩하므로 HTML과 JavaScript의 혼용 문제를 해결합니다. 그러나 하나의 이벤트에 하나의 핸들러만 할당할 수 있고, 핸들러에 인수를 전달하는 것이 불가능하며, 여러 개의 핸들러가 할당된 경우 마지막에 추가된 핸들러만 실행됩니다."},{"type":"h2","value":"EventListener을 이용한 핸들러"},{"type":"code","value":"$4"},{"type":"normal","value":"이 예제는 버튼을 클릭할 때마다 콘솔에 메시지를 출력하는 간단한 이벤트 핸들러를 보여줍니다. 여기서 addEventListener를 사용하여 이벤트를 바인딩하고, 하나의 이벤트에 여러 개의 핸들러를 추가할 수 있습니다. 캡쳐링과 버블링을 지원하며, HTML뿐만 아니라 DOM 요소에도 적용됩니다."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a312a5df4ef85555.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L5",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/04d20c09b3119d43.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4c2921450e35f824.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
