2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-a0aaa490fd7693f1.js"],""]
3:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-a0aaa490fd7693f1.js"],""]
4:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-a0aaa490fd7693f1.js"],""]
5:I[5613,[],""]
8:I[1778,[],""]
c:I[8765,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","262","static/chunks/262-683004883e01034d.js","35","static/chunks/35-17fdeaa71107664f.js","464","static/chunks/app/(layoutCase)/layout-ad90720708a07259.js"],""]
6:["tagname","%EC%9B%B9%EC%84%B1%EB%8A%A5%20%EC%B5%9C%EC%A0%81%ED%99%94","d"]
7:["postid","78","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["eAYovxfDYhWXk36E6nr0a",[[["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EC%9B%B9%EC%84%B1%EB%8A%A5%20%EC%B5%9C%EC%A0%81%ED%99%94","d"],{"children":[["postid","78","d"],{"children":["__PAGE__?{\"tagname\":\"웹성능 최적화\",\"postid\":\"78\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EC%9B%B9%EC%84%B1%EB%8A%A5%20%EC%B5%9C%EC%A0%81%ED%99%94","d"],{"children":[["postid","78","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] TypeScript에서 객체 리터럴을 불변(immutable)으로 사용하기"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["3 months"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"3 months"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"기본 객체 리터럴과 as const"}],false,false],["$","$L3",null,{"code":"const config = {\n  apiUrl: \"https://api.example.com\",\n  port: 8080,\n  timeout: 5000\n} as const;\n\n// 타입: { readonly apiUrl: \"https://api.example.com\"; readonly port: 8080; readonly timeout: 5000; }\n\n// 값 변경 시도 - 에러 발생\n// config.apiUrl = \"https://new-url.com\"; // 오류: Cannot assign to 'apiUrl' because it is a read-only property.\n\n// 사용 예시\nfunction fetchData(url: string) {\n  console.log(`Fetching from ${url}`);\n}\n\nfetchData(config.apiUrl); // 정상 작동","children":"$undefined"}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"중첩 객체와 as const"}],false,false],["$","$L3",null,{"code":"const userSettings = {\n  user: {\n    name: \"Alice\",\n    age: 30\n  },\n  preferences: {\n    theme: \"dark\",\n    notifications: true\n  }\n} as const;\n\n// 타입: { readonly user: { readonly name: \"Alice\"; readonly age: 30; }; readonly preferences: { readonly theme: \"dark\"; readonly notifications: true; }; }\n\n// 값 변경 시도 - 에러 발생\n// userSettings.user.name = \"Bob\"; // 오류: Cannot assign to 'name' because it is a read-only property.\n\n// 사용 예시\nfunction displayUser(settings: typeof userSettings) {\n  console.log(`User: ${settings.user.name}, Theme: ${settings.preferences.theme}`);\n}\n\ndisplayUser(userSettings);","children":"$undefined"}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"배열과 as const"}],false,false],["$","$L3",null,{"code":"const colors = [\"red\", \"green\", \"blue\"] as const;\n\n// 타입: readonly [\"red\", \"green\", \"blue\"]\n\n// 배열 요소 변경 시도 - 에러 발생\n// colors[0] = \"yellow\"; // 오류: Cannot assign to '0' because it is a read-only property.\n\n// 사용 예시\nfunction pickColor(color: typeof colors[number]) {\n  console.log(`Selected color: ${color}`);\n}\n\npickColor(colors[0]); // 정상 작동: \"red\"","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"as const의 효과: 객체와 배열의 모든 프로퍼티를 readonly로 만들고, 리터럴 타입으로 좁힙니다. 예를 들어, string 대신 \"specific-value\"로 타입이 지정됩니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"불변성 보장: 컴파일 타임에 값 변경을 방지하며, 코드의 안정성을 높입니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"사용 사례: 상수 데이터, 설정 객체, 열거형(enum) 대체 등에 유용합니다."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"제한사항: as const는 객체를 완전히 동결(freeze)하지 않으므로, 런타임에서 Object.freeze와 함께 사용할 수 있습니다."}}]]}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"Object.freeze"}],false,false],["$","$L3",null,{"code":"const frozenConfig = Object.freeze({\n  apiUrl: \"https://api.example.com\",\n  port: 8080\n}) as const;\n\n// 런타임과 컴파일 타임 모두 불변\n// frozenConfig.apiUrl = \"new-url\"; // 컴파일 에러\n// frozenConfig.port = 3000; // 컴파일 에러","children":"$undefined"}]],["$","$L4",null,{"postid":78,"prePostTitle":{"id":79,"title":"[TECH-QA] TypeScript로 깔끔한 쿼리 문자열 만들기: Record<string, never> 활용법","date":"2025-07-23 18:14:33","folder":"Javascript","tag":["TECH-QA"],"preview":"qsStringify와 유사한 기능을 수행하는 새로운 함수 buildQueryString를 TypeScript로 작성한 예제입니다. 이 함수는 입력 객체를 쿼리 문자열로 변환하며, 유효하지 않은 값(null, undefined, 빈 문자열/배열)을 제거합니다. Record<string, never>를 기본 타입으로 사용해 빈 객체를 처리합니다.","post":[{"type":"Heading","headingType":"h2","value":"🚩 Record<string, never> 활용법"},{"type":"code","value":"import { isNil, isArray, isEmpty } from 'lodash';\nimport qs from 'query-string';\n\nconst buildQueryString = <T = Record<string, never>>(params?: T): string => {\n  // 유효하지 않은 값(null, undefined, 빈 문자열/배열) 제거\n  const cleanedParams = omitBy(params || {}, (val) => {\n    if (isNil(val)) return true;\n    return isArray(val) && (val as string[]).every((v) => !v);\n  });\n\n  // 객체가 비어 있으면 빈 문자열 반환, 아니면 쿼리 문자열 생성\n  return isEmpty(cleanedParams) ? '' : `?${qs.stringify(cleanedParams, { arrayFormat: 'comma', encode: false })}`;\n};\n\n// 사용 예제\nconsole.log(buildQueryString()); // ''\nconsole.log(buildQueryString({ name: 'John', age: '25', empty: '' })); // '?name=John,age=25'\nconsole.log(buildQueryString({ items: [], invalid: null })); // ''\nconsole.log(buildQueryString({ tags: ['red', 'blue'], empty: null })); // '?tags=red,blue'"},{"type":"normal","value":"buildQueryString 함수는 프론트엔드에서 API 요청을 위한 쿼리 문자열을 생성하는 유틸리티 함수입니다. 입력 객체에서 유효하지 않은 값(null, undefined, 빈 문자열, 빈 배열 또는 모든 요소가 빈 값인 배열)을 제거하고, 유효한 데이터만 포함한 쿼리 문자열을 반환합니다. 이는 API 요청을 간결하게 만들고, 서버의 처리 부담을 줄이며, 사용자 경험을 개선하는 데 기여합니다."},{"type":"Heading","headingType":"h2","value":"함수 구조"},{"type":"keyword","keyworldTitle":"제네릭 타입","value":"<T = Record<string،  never>>"},{"type":"normal","value":"T는 입력 파라미터 params의 타입을 나타냅니다.\n기본 타입 Record<string, never>는 속성이 없는 빈 객체 {}를 의미합니다.\nparams가 undefined이거나 전달되지 않을 경우, 빈 객체 {}로 처리되어 함수가 안전하게 동작합니다."},{"type":"keyword","keyworldTitle":"파라미터","value":"params?: T"},{"type":"stringlist","value":"params는 선택적이며, 객체 형태로 전달됩니다.\nparams || {}를 통해 undefined일 경우 빈 객체로 대체됩니다."},{"type":"keyword","keyworldTitle":"로직","value":"Lodash의 omitBy"},{"type":"normal","value":"Lodash의 omitBy를 사용해 <span class=\"point\">null, undefined, 빈 문자열</span> 또는 <span class=\"point\">모든 요소가 빈 값인 배열</span>을 제거."},{"type":"normal","value":"{ name: \"John\", empty: null, items: [\"\"] } → <span class=\"point\"> { name: \"John\" }.</span>"},{"type":"stringlist","value":"Lodash의 isEmpty로 정리된 객체가 비어 있는지 확인.\n비어 있으면 ' '를 반환.\n그렇지 않으면 qs.stringify를 사용해 쿼리 문자열로 변환하고, ?를 접두사로 추가.\narrayFormat: 'comma'는 배열을 쉼표로 구분 (예: tags=red,blue).\nencode: false는 URL 인코딩을 비활성화해 가독성을 높임."},{"type":"Heading","headingType":"h4","value":"입력 없음"},{"type":"code","value":"buildQueryString(); // 출력: ''"},{"type":"stringlist","value":"params가 undefined이므로 빈 객체 {}로 처리.\nomitBy({}, ...)는 빈 객체를 반환, isEmpty가 true이므로 '' 반환."},{"type":"Heading","headingType":"h4","value":"유효한 값 포함"},{"type":"code","value":"buildQueryString({ name: 'John', age: '25', empty: '' }); // 출력: '?name=John,age=25'"},{"type":"stringlist","value":"empty: ''는 제거됨.\ncleanedParams = { name: 'John', age: '25' }.\nqs.stringify로 name=John,age=25를 생성하고, ?를 추가."},{"type":"Heading","headingType":"h4","value":"유효하지 않은 값만 포함"},{"type":"code","value":"buildQueryString({ items: [], invalid: null }); // 출력: ''"},{"type":"stringlist","value":"items: []와 invalid: null은 제거됨.\ncleanedParams = {}, isEmpty가 true이므로 '' 반환."},{"type":"Heading","headingType":"h4","value":"배열 포함"},{"type":"code","value":"buildQueryString({ tags: ['red', 'blue'], empty: null }); // 출력: '?tags=red,blue'"},{"type":"stringlist","value":"empty: null은 제거됨.\ncleanedParams = { tags: ['red', 'blue'] }.\nqs.stringify로 tags=red,blue를 생성하고, ?를 추가."},{"type":"Heading","headingType":"h2","value":"배열 포함"},{"type":"stringlist","value":"<b>효율적인 요청</b>: 불필요한 파라미터를 제거해 네트워크 요청 크기를 줄이고, 서버의 처리 부담을 완화.\n<b>타입 안전성</b>: Record<string, never>를 기본 타입으로 사용해 입력이 없거나 빈 객체일 때도 안전하게 처리.\n<b>사용자 경험</b>: 간결한 쿼리 문자열은 URL을 깔끔하게 유지하며, 브라우저 히스토리나 공유 링크의 가독성을 높임.\n<b>서버 부하 감소</b>: 유효한 데이터만 서버로 전송되므로 서버의 검증 로직이 간소화됨."},{"type":"Heading","headingType":"h2","value":"트래픽 관리와의 연관성"},{"type":"stringlist","value":"프론트엔드에서 데이터를 정리하면 불필요한 데이터 전송이 줄어들어 네트워크 트래픽이 감소.\n서버는 유효한 데이터만 처리하므로 CPU/메모리 사용량이 줄고, 캐싱 효율성이 향상.\n이는 트래픽 스파이크를 간접적으로 방지하며, 전체 시스템 성능을 최적화."}]},"nextPostTile":{"id":77,"title":"[TECH-QA] Intersection Type (&)이란?","date":"2025-07-22 09:35:33","folder":"Javascript","tag":["브라우저","TECH-QA","웹성능최적화"],"preview":"화면에서 쿨락헌 순간 모달에 관련된 파일들을 불러오고 모달에 관련된 파일들이 모두 불러와지면 Javascript를 Evaluate하고 모달이 뜨도록 코드를 실행하고 모달이 오픈된다.","post":[{"type":"stringlist","value":"A & B는 타입 A와 타입 B의 모든 속성을 동시에 만족하는 새로운 타입을 정의합니다.\n즉, 결과 타입은 A와 B의 속성을 모두 포함합니다.\n예를 들어, AlertModalProps와 React.RefAttributes<HTMLDivElement>를 결합하면, 새로운 타입은 AlertModalProps의 모든 속성과 React.RefAttributes<HTMLDivElement>의 모든 속성을 포함합니다."},{"type":"code","value":"interface AlertModalProps {\n  title: string;\n  message: string;\n  onClose: () => void;\n}\n\nconst AlertModal = React.forwardRef<HTMLDivElement, AlertModalProps>(\n  ({ title, message, onClose }, ref) => {\n    return (\n      <div ref={ref}>\n        <h1>{title}</h1>\n        <p>{message}</p>\n        <button onClick={onClose}>Close</button>\n      </div>\n    );\n  }\n);\n\n// 타입 정의\ntype AlertModalComponent = React.ForwardRefRenderFunction<\n  HTMLDivElement,\n  AlertModalProps & React.RefAttributes<HTMLDivElement>\n>;"},{"type":"normal","value":"여기서 AlertModalProps & React.RefAttributes<HTMLDivElement>는 AlertModalProps의 속성(title, message, onClose)과 React.RefAttributes<HTMLDivElement>의 속성(ref)을 모두 포함하는 타입을 정의합니다."},{"type":"code","value":"const modalRef = React.useRef<HTMLDivElement>(null);\n\n<AlertModal\n  title=\"경고\"\n  message=\"이것은 경고 메시지입니다.\"\n  onClose={() => console.log(\"닫기\")}\n  ref={modalRef}\n/>;"},{"type":"normal","value":"React.RefAttributes<HTMLDivElement>는 ref 속성을 추가로 제공하므로, AlertModalProps에 ref를 직접 포함하지 않고도 ref를 지원할 수 있게 됩니다."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L5",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/80c9ce4c138da48c.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
