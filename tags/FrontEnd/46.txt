2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-091ee2c1538525ec.js"],""]
3:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-091ee2c1538525ec.js"],""]
4:I[688,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-091ee2c1538525ec.js"],""]
5:I[777,["250","static/chunks/250-8b90be581650ff9d.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-091ee2c1538525ec.js"],""]
7:I[5613,[],""]
a:I[1778,[],""]
e:I[5210,["250","static/chunks/250-8b90be581650ff9d.js","304","static/chunks/304-2ef64042fd5d1e1c.js","730","static/chunks/730-f56ebe909f1c8bdb.js","516","static/chunks/516-eaf4d30099c06448.js","927","static/chunks/927-7142a6eb3680963a.js","338","static/chunks/338-f2b637e42a7ca177.js","464","static/chunks/app/(layoutCase)/layout-66e4d36269f645f8.js"],""]
6:T632,function simulateAsyncTask(delay, shouldSucceed) {
  return new Promise((resolve, reject) => {
    console.log("상태: pending - 작업이 시작되었으며 아직 완료되지 않았습니다.");

    setTimeout(() => {
      if (shouldSucceed) {
        resolve("작업이 성공적으로 완료되었습니다!");
        // 상태: fulfilled - 작업이 성공적으로 끝난 상태
      } else {
        reject(new Error("작업이 실패했습니다."));
        // 상태: rejected - 작업이 실패한 상태
      }
    }, delay);
  });
}

// 1. 성공 케이스 (fulfilled 상태로 전환)
const successPromise = simulateAsyncTask(2000, true);
console.log("Promise 생성 직후:", successPromise); // Promise { <pending> }

successPromise
  .then((result) => {
    console.log("상태: fulfilled -", result); // 2초 후: "작업이 성공적으로 완료되었습니다!"
    console.log("Promise 상태 확인:", successPromise); // Promise { "작업이 성공적으로 완료되었습니다!" }
  })
  .catch((error) => {
    console.error("에러:", error.message);
  });

// 2. 실패 케이스 (rejected 상태로 전환)
const failPromise = simulateAsyncTask(1500, false);
console.log("Promise 생성 직후:", failPromise); // Promise { <pending> }

failPromise
  .then((result) => {
    console.log(result);
  })
  .catch((error) => {
    console.log("상태: rejected -", error.message); // 1.5초 후: "작업이 실패했습니다."
    console.log("Promise 상태 확인:", failPromise); // Promise { <rejected> Error: 작업이 실패했습니다. }
  });8:["tagname","FrontEnd","d"]
9:["postid","46","d"]
b:"$Lc"
f:[]
10:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
11:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
12:{"display":"inline-block"}
13:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["NYe-0jTvAMCyamfO4jNfE",[[["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","FrontEnd","d"],{"children":[["postid","46","d"],{"children":["__PAGE__?{\"tagname\":\"FrontEnd\",\"postid\":\"46\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","FrontEnd","d"],{"children":[["postid","46","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] 자바스크립트 호이스팅과 실행 컨텍스트"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["a day"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"a day"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","div","0",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"자바스크립트의 호이스팅(hoisting)은 코드를 한 줄 한 줄 실행하기에 앞서, 선언된 변수, 함수, 클래스 등의 선언문을 코드의 최상단으로 끌어올려 런타임 이전에 한 번 실행해 메모리에 미리 올려놓는 과정을 의미합니다. 이는 자바스크립트 엔진이 코드를 실행하기 전에 실행 컨텍스트(Execution Context)를 생성하며 변수와 함수 선언을 처리하는 방식에서 비롯됩니다. 호이스팅 덕분에 개발자는 코드의 물리적 위치와 상관없이 변수나 함수를 사용할 수 있지만, 이로 인해 예상치 못한 동작이 발생할 수도 있어 주의가 필요합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","변수 호이스팅"]}]],["$","div","2",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"<b>var 키워드로 선언된 변수</b>는 호이스팅 과정에서 변수 선언과 동시에 undefined로 초기화됩니다. 즉, 변수가 선언된 줄 이전에 해당 변수를 호출하더라도 에러가 발생하지 않고 undefined 값을 반환합니다. 이는 var가 선언(Declaration)과 초기화(Initialization)가 동시에 이루어지기 때문입니다. </br></br>\n\t\t\t\t반면, <b>let과 const 키워드로 선언된 변수</b>는 호이스팅이 발생하기는 하지만, 선언(Declaration)과 초기화(Initialization)가 동시에 이루어지지 않습니다. let과 const로 선언된 변수는 실행 컨텍스트 내의 <b>선언적 환경 레코드(Declarative Environment Record)</b>에 등록됩니다. 이는 실행 컨텍스트의 생성 단계에서 변수는 선언 되었으나, 초기화는 실제 코드 실행 시점(변수가 선언된 시점)에서 초기화가 이루어 집니다. </br></br>\n\n변수가 선언된 시점부터 실제 초기화가 이루어질 때까지의 구간을 <b>TDZ(Temporary Dead Zone, 임시 사각지대)</b>라고 부릅니다. 이 구간에서 변수를 참조하려고 하면 메모리가 아직 할당되지 않았기 때문에 ReferenceError가 발생합니다.\n\n"}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","함수 선언과 호이스팅"]}]],["$","div","4",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"<b>함수 선언(Function Declaration)</b>의 경우, 변수와는 다른 방식으로 호이스팅됩니다. 함수 선언은 선언과 초기화, 그리고 함수 본문 전체가 함께 메모리에 올라가기 때문에 함수가 선언된 줄 이전에 호출하더라도 정상적으로 동작합니다. 이는 함수 선언이 실행 컨텍스트의 생성 단계에서 완전히 처리되기 때문입니다. 단, 함수 표현식(Function Expression)으로 작성된 경우에는 다릅니다."}}],["$","div","5",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"<b>함수 표현식(Function Expression)</b>은 변수에 함수를 할당하는 방식이므로, <u>사용된 변수 키워드(var, let, const)</u>에 따라 동작이 달라집니다."}}],["$","$L3","6",{"code":"bar(); // TypeError: bar is not a function\n\nvar bar = function() {\n  console.log(\"This is bar\");\n};"}],["$","div","7",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위 예시에서 bar는 var로 선언되었으므로 undefined로 초기화된 상태에서 함수 호출이 시도되어 에러가 발생합니다. 이는 사용된 변수 선언 키워드(var, let, const)의 초기화 규칙을 따르기 때문입니다. 다만, 발생하는 에러의 종류는 키워드에 따라 달라집니다. "}}],[false,false,["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_warning__ZYPQt","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"<b>객체 환경 레코드(Object Environment Record)</b>: 주로 전역 스코프나 with 문에서 사용되며, 변수와 함수가 객체의 속성처럼 저장됩니다.</br>\n<b>선언적 환경 레코드(Declarative Environment Record)</b>: 함수 스코프나 블록 스코프에서 사용되며, let, const와 같은 변수가 저장됩니다.\n"}}]}],false],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","children":"실행 컨텍스트(Execution Context)"}],false],["$","div","10",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"실행 컨텍스트(Execution Context)는 자바스크립트에서 코드가 실행되는 환경을 정의하고 관리하는 내부적인 데이터 구조입니다. 자바스크립트 엔진이 실행 컨텍스트를 생성한다는 것은 코드 실행을 준비하기 위해 필요한 모든 정보를 설정하는 과정을 의미이기도 합니다.\n자바스크립트 엔진이 코드를 실행할 때, 해당 코드가 올바르게 동작할 수 있도록 변수, 함수, 스코프, this 바인딩 등을 추적하고 관리하기 위해 실행 컨텍스트를 생성합니다."}}],[false,false,["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_warning__ZYPQt","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"쉽게 말해, 실행 컨텍스트는 <b>현재 실행 중인 코드와 그 코드를 실행하기 위한 환경 정보</b>를 담고 있는 <b>일종의 컨테이너</b>라고 볼 수 있습니다."}}]}],false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","생성 단계(Creation Phase)"]}]],["$","div","13",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"실행 컨텍스트(Execution Context) 생성 단계(Creation Phase)에서는 코드가 실제로 실행되기 전에 실행 컨텍스트를 초기화합니다. 변수, 함수 선언, 함수의 인자 등이 컨텍스트에 저장됩니다. ES6 이후로는 환경 레코드(Environment Record)라는 개념으로 확장되었습니다."}}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"var로 선언된 변수는 undefined로 초기화됩니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"let과 const는 선언만 되고 초기화는 나중에 이루어집니다(TDZ)."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"함수 선언은 전체가 메모리에 올라가 바로 사용 가능해집니다."}}],"$undefined"]}],["$","div","15",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"현재 컨텍스트에서 접근 가능한 외부 변수들을 스코프 체인(Scope Chain)에 연결합니다. 이는 중첩된 함수에서 상위 스코프를 참조할 수 있게 합니다. 현재 실행 중인 코드에서 this가 가리킬 객체가 결정됩니다. 함수 호출 방식(예: 메서드 호출, 일반 함수 호출 등)에 따라 달라집니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","children":["📝 ","실행 단계(Execution Phase)"]}]],["$","div","17",{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"실행 컨텍스트(Execution Context) 실행 단계(Execution Phase)에서는 생성 단계가 완료되면 코드가 한 줄씩 실행됩니다. 이 단계에서 변수에 값이 할당(Assignment)되고, 함수가 호출되며, 실제 로직이 수행됩니다."}}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","children":"실행 컨텍스트의 종류"}],false],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>전역 실행 컨텍스트(Global Execution Context)</b>: 전역 스코프에서 실행되는 코드를 위한 컨텍스트입니다. 프로그램이 시작될 때 하나만 생성되며, 전역 객체(브라우저에서는 window, Node.js에서는 global)와 연결됩니다."}}],"$undefined",["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>함수 실행 컨텍스트(Function Execution Context)</b>: 함수가 호출될 때마다 생성됩니다. 각 함수 호출은 독립적인 실행 컨텍스트를 가지며, 함수가 끝나면 해당 컨텍스트는 스택에서 제거됩니다."}}],"$undefined",["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>Eval 실행 컨텍스트(Eval Execution Context)</b>: eval() 함수가 실행될 때 생성됩니다(드물게 사용됨)."}}],"$undefined","$undefined"]}],["$","$L4","20",{"keyword":"컨텍스트(this)를 제어하는 함수 call(), 컨텍스트(this)를 제어하는 함수 apply(), 컨텍스트(this)를 제어하는 함수 bind() "}]],["$","$L5",null,{"postid":46,"prePostTitle":"$undefined","nextPostTile":{"id":45,"title":"[TECH-QA] 자바스크립트 비동기 함수","date":"2025-03-13 11:40:33","folder":"Javascript","tag":["TECH-QA","Javascript"],"preview":"자바스크립트는 단일 스레드(Single-threaded) 언어로, 한 번에 하나의 작업만 처리할 수 있다. 이는 코드가 순차적으로 실행된다는 의미인데, 만약 모든 작업을 동기적으로 처리한다면 시간이 오래 걸리는 작업(예: 서버 요청, 파일 읽기)이 끝날 때까지 프로그램 전체가 멈춰버릴 수 있다.","post":[{"type":"keyword","value":"지연 작업을 효율적으로 처리하여 응답성 향상으로 사용자 경험을 개선, 자원을 최적화(성능 최적화)"},{"type":"normal","value":"자바스크립트는 단일 스레드(Single-threaded) 언어로, 한 번에 하나의 작업만 처리할 수 있다. 이는 코드가 순차적으로 실행된다는 의미인데, 만약 모든 작업을 동기적으로 처리한다면 시간이 오래 걸리는 작업(예: 서버 요청, 파일 읽기)이 끝날 때까지 프로그램 전체가 멈춰버릴 수 있다. 자바스크립트에서는 이런 문제를 해결하기 위해 비동기 함수를 사용하는데 이는 시간 지연 작업을 효율적으로 처리하고, 사용자 경험을 개선하며, 자원을 최적화 할수 있게 해준다. 이러한 특성 덕분에 비동기 프로그래밍은 현대 웹 개발에서 필수적인 요소로 자리 잡았으며, Promise와 async/await를 활용하면 더욱 강력하고 깔끔한 코드를 작성할 수 있다."},{"type":"h4","value":"시간 지연 작업 처리에 대해 응답성 향상"},{"type":"normal","value":"네트워크 요청(예: API 호출), 파일 입출력, 타이머(setTimeout) 등은 결과를 즉시 얻을 수 없는 작업이다. 동기 방식으로 처리하면 응답이 올 때까지 프로그램이 대기 상태에 빠지게 된다.</br></br>\n\n예를들면 사용자가 웹사이트에서 버튼을 눌렀을 때 서버에서 데이터를 가져오는 데 3초가 걸린다면, 동기 방식에서는 3초 동안 브라우저가 멈춰 사용자 경험이 나빠지는 경험이 있다.</br></br>\n위와 같은 상황에서 비동기 함수는 시간이 오래 걸리는 작업을 기다리지 않고, 다른 작업을 <b>병렬적으로 수행</b>할 수 있어\n사용자가 회원가입 버튼을 눌렀을 때 서버에 데이터를 전송하고 응답을 기다리는 동안 \"로딩 중\" 메시지를 표시하며, 사용자가 화면을 스크롤하거나 다른 버튼을 클릭할 수 있게 해준다."},{"type":"h4","value":"사용자 경험(UX) 개선"},{"type":"normal","value":"위에서도 이야기 했지만 비동기 처리를 통해 시간이 걸리는 작업을 백그라운드에서 실행하여, 그 동안 사용자가 다른 인터랙션을 계속할 수 있도록 해준다.예를 들면 유튜브에서 동영상 로딩 중에도 사용자가 댓글을 읽거나 좋아요를 누를 수 있는 이유가 비동기 처리 덕분이다.\n"},{"type":"h4","value":"자원 효율성"},{"type":"normal","value":"작업이 완료되기를 기다리는 동안 CPU와 메모리를 유휴 상태로 두지 않고, 다른 작업을 수행할 수 있어 자원을 효율적으로 활용할수 있다."},{"type":"h4","value":"현실적인 애플리케이션 요구사항"},{"type":"normal","value":"현대 웹 애플리케이션은 다중 작업, 즉  데이터 로드, 이미지 렌더링, 사용자 입력 처리을 동시에 처리해야 하는데, 이를 비동기 방식으로만 구현할 수 있다."},{"type":"H3","value":"가독성과 유지보수성 개선 aync/await"},{"type":"normal","value":"async/await는 ES2017(ECMAScript 2017)에서 도입된 비동기 작업 처리 문법으로, 비동기 코드를 보다 간결하고 직관적으로 작성할 수 있게 해준다. 기존의 콜백 함수를 연속적으로 호출하는 방식은 가독성이 떨어지고 로직 수정이 어려운 \"콜백 지옥(callback hell)\" 문제를 일으킬 수 있는데 async/await는 이러한 문제를 해결하며, 비동기 작업을 동기 코드처럼 사용할 수 있다.\n"},{"type":"stringlist","value":"async 키워드로 정의된 함수는 항상 Promise 객체를 반환한다.\n\nasync 함수 내부에서 사용되며, 비동기 작업(Promise)이 완료될 때까지 기다린 후 결과를 반환한다."},{"type":"code","value":"// 콜백 방식\ngetData(function (data) {\n  processData(data, function (result) {\n    saveData(result, function (response) {\n      console.log(response);\n    });\n  });\n});\n\n// async/await 방식\nasync function handleData() {\n  const data = await getData();\n  const result = await processData(data);\n  const response = await saveData(result);\n  console.log(response);\n}"},{"type":"stringlist","value":"<b>에러 처리</b>: try/catch 문을 사용해 비동기 작업 중 발생한 오류를 깔끔하게 처리할 수 있다.\n"},{"type":"code","value":"async function fetchUserData() {\n  try {\n    const response = await fetch('https://api.example.com/users');\n    const data = await response.json();\n    console.log('사용자 데이터:', data);\n  } catch (error) {\n    console.error('에러 발생:', error);\n  }\n}\n\nfetchUserData();"},{"type":"normal","value":"위 코드에서 fetch는 비동기적으로 데이터를 가져오는 함수이다. await를 사용해 응답이 완료될 때까지 기다린 후, JSON 데이터를 파싱한다. 에러가 발생하면 catch 블록에서 처리된다. async/await 방식이 훨씬 읽기 쉽고 디버깅도 간편해진다."},{"type":"H3","value":"Promise란"},{"type":"normal","value":"Promise는 비동기 작업을 다루기 위한 객체로, 작업의 성공(resolve) 또는 실패(reject) 상태를 명확히 관리할 수 있고 비동기 작업의 흐름을 체계적으로 처리하는 데 유용합니다. "},{"type":"h4","value":"구성"},{"type":"normal","value":"new Promise 생성자를 통해 정의되며, 내부에서 resolve 또는 reject 함수를 호출합니다."},{"type":"code","value":"const myPromise = new Promise((resolve, reject) => {\n  // 비동기 작업 시뮬레이션 (예: 2초 후 결과 반환)\n  setTimeout(() => {\n    const success = true; // 성공 여부를 시뮬레이션\n    if (success) {\n      resolve(\"작업이 성공적으로 완료되었습니다!\"); // 성공 시 resolve 호출\n    } else {\n      reject(\"작업이 실패했습니다.\"); // 실패 시 reject 호출\n    }\n  }, 2000);\n});\n\n// Promise 사용\nmyPromise\n  .then((result) => {\n    console.log(result); // 2초 후: \"작업이 성공적으로 완료되었습니다!\"\n  })\n  .catch((error) => {\n    console.error(error); // 실패 시 출력\n  });"},{"type":"h4","value":"상태"},{"type":"stringlist","value":"pending : 비동기 작업이 아직 완료되지 않은 상태\n\t\t\t\tfulfilled : 비동기 작업이 성공적으로 완료된 상태\n\t\t\t\treject : 비동기 작업이 실패한 상태"},{"type":"code","value":"$6"},{"type":"h4","value":"메서드"},{"type":"stringlist","value":".then(): 성공 시 호출.\n.catch(): 실패 시 호출.\n"},{"type":"code","value":"function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true; // 성공 여부 시뮬레이션\n      if (success) {\n        resolve('데이터 로드 성공');\n      } else {\n        reject('데이터 로드 실패');\n      }\n    }, 2000);\n  });\n}\n\nfetchData()\n  .then((result) => console.log(result)) // 2초 후: \"데이터 로드 성공\"\n  .catch((error) => console.error(error)); // 실패시 호출"},{"type":"normal","value":"Promise 객체는 비동기 작업의 성공/실패를 처리하며 .then()과 .catch()로 결과를 핸들링합니다."},{"type":"H3","value":"async/await와 Promise의 차이"},{"type":"h4","value":"에러 처리"},{"type":"stringlist","value":"<b>Promise </b>: .catch()로 실패를 처리.\n<b>async/await</b>: try/catch로 에러를 핸들링.\n"},{"type":"code","value":"// Promise 방식\nfunction getData() {\n  fetch('https://api.example.com/data')\n    .then((response) => response.json())\n    .then((data) => console.log(data))\n    .catch((error) => console.error(error));\n}\n\n// async/await 방식\nasync function getData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}"},{"type":"H3","value":"확장성과 병렬 처리"},{"type":"normal","value":"Promise.all을 사용하면 여러 비동기 작업을 병렬로 처리하고 결과를 한 번에 받을 수 있다. 여러 API에서 데이터를 동시에 가져와야 할 때, Promise.all을 사용해 모든 요청이 완료된 후 결과를 처리한다."},{"type":"code","value":"async function fetchMultipleData() {\n  const [userData, postData] = await Promise.all([\n    fetch('https://api.example.com/users'),\n    fetch('https://api.example.com/posts'),\n  ]);\n  console.log(await userData.json(), await postData.json());\n}"}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$8","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3b1855c1e57ea9b6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$b","$Ld",null]]},[null,["$","$Le",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L7",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$f","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$10","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$11","children":"404"}],["$","div",null,{"style":"$12","children":["$","h2",null,{"style":"$13","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/04d20c09b3119d43.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4c2921450e35f824.css","precedence":"next","crossOrigin":""}]],"$L14"]]]]
d:E{"digest":"NEXT_NOT_FOUND"}
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
c:null
