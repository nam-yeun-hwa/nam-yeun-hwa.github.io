2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
3:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
4:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
5:I[5613,[],""]
8:I[1778,[],""]
c:I[3866,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","46","static/chunks/46-f5c36f830a2ce4c4.js","730","static/chunks/730-f56ebe909f1c8bdb.js","35","static/chunks/35-917f6d62db20f146.js","464","static/chunks/app/(layoutCase)/layout-b678e44923655761.js"],""]
6:["tagname","%EB%A6%AC%EC%95%A1%ED%8A%B8","d"]
7:["postid","8","d"]
9:"$La"
d:[]
e:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
f:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
10:{"display":"inline-block"}
11:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["5LFqdBjTKdOX-pUbi_i-X",[[["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EB%A6%AC%EC%95%A1%ED%8A%B8","d"],{"children":[["postid","8","d"],{"children":["__PAGE__?{\"tagname\":\"리액트\",\"postid\":\"8\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%EB%A6%AC%EC%95%A1%ED%8A%B8","d"],{"children":[["postid","8","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"중첩된 객체를 가진 객체의 깊은 복사 하는 방법"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["2 years"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"2 years"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"키-값 쌍이 여러 개인 객체가 있습니다. 문제는 객체가 완전하지 않다는 것입니다. 이 문제는 객체에 기존데이터가 있는 상태에서 새로운 필드를 추가하는 경우나 외부 API에서 데이터를 가져와 현재 데이터 모델에 연결해야 하는 경우에 자주 발생합니다. 어느 쪽이든 문제가 되는 부분은 같습니다. 새로운 필드 또는 데이터로 채워지지 않는 나머지 부분을 기본값 객체로 채워야 한다는 점입니다.<br /><br />\n\n        기본값을 설정하면서 원래의 데이터를 유지하는 새로운 객체를 생성하려면 어떻게 해야 할까요?<br />\n        당연히 부수 효과나 조작은 발생하지 않아야 합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","Object.assign()을 이용한 값이 중첩되지 않은 객체의 복사 (Shallow Copy)"]}]],["$","$L3",null,{"code":"const default = {\n  author:'',\n  title:'',\n  year:2017,\n  rating:null\n};\n\nconst book = {\n  author : 'joe Morgan',\n  title : 'Simplifying JavaScript'\n};\n\nconst updated = Object.assign({}, defaults, book);\nconsole.log(updated);\n\n//{ \n//  author : 'joe Morgan',\n//  title : 'Simplifying JavaScript,\n//  year:2017,\n//  rating:null\n//}","children":"$undefined"}],[false,false,false,false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위의 코드는 defaults와 book 객체를 병합하여 얕은 복사를 수행합니다. 하지만 details 객체는 참조 관계가 유지되므로 shallowCopy 객체를 수정하면 defaults나 book에도 영향을 미칠 수 있습니다.<br /><br />"}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","Object.assign()을 이용한 값이 중첩된 객체의 복사 (Deep Copy)"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"중첩된 객체가 있는 경우에 Object.assign()을 이용해서 복사하도록 하면 모든 것을 갱신할 수 있습니다."}}],["$","$L3",null,{"code":"const defaultEmployee = {\n    name : {\n          first : '',\n          last : ''\n        }\n    years : 0,\n};\nconst employee = Object.assign({}, defaultEmployee);","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"위의 코드에서 name 속성은 복사 할수 없습니다. 실제로 키 name에 할당된 독립적인 객체에 대해 참조만 복사 됩니다. 중첩된 객체는 해당 객체를 담고 있는 객체와 독립적으로 존재합니다.<br /><br />\n        중첩된 객체를 담고 있는 객체가 가지고 있는 것은 중첩된 객체에 대한 참조 뿐입니다. 참조에 대한 복사만으로는 중첩된 객체에 깊은 복사를 적용할 수 없습니다. 단지 참조의 위치를 복사하는 것에 불과 합니다.<br /><br />\n        \n        따라서 원본 객체 또는 복사한 객체 중 어디서라도 중첩된 객체의 값을 변경하면 원본 객체와 복사한 객체 모두 변경됩니다."}}],[false,false,false,false],["$","$L3",null,{"code":"const defaultEmployee = {\n  name : {\n           first : '',\n           last : ''\n         }\n  years : 0,\n};\n\nconst employee2 = Object.assign(\n  {},\n    defaultEmployee,\n    {\n      name : Object.assign({} , defaultEmployee.name)\n    }\n);","children":"$undefined"}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","Lodash를 이용한 깊은 복사 cloneDeep"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"Lodash 라이브러리는 깊은 복사를 수행하는 cloneDeep 메서드를 제공합니다. Lodash는 일반적인 유틸리티 함수들을 모아놓은 라이브러리로서, 깊은 복사를 쉽게 처리할 수 있게 도와줍니다."}}],["$","$L3",null,{"code":"const _ = require('lodash');\n\nconst defaults = {\n  author: '',\n  title: '',\n  details: {\n    pages: 0,\n    language: ''\n  }\n};\n\nconst book = {\n  author: 'John Doe',\n  title: 'Sample Book',\n  details: {\n    pages: 200,\n    language: 'English'\n  }\n};\n\nconst deepCopyResult = _.cloneDeep(defaults);\n_.merge(deepCopyResult, book);\n\nconsole.log(deepCopyResult);","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"cloneDeep 함수를 사용하면 중첩된 객체까지 깊은 복사가 이루어집니다. 이후 merge 함수를 사용하여 두 객체를 병합할 수 있습니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","JSON.stringify() 이용한 깊은 복사 cloneDeep"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"JSON.stringify()와 JSON.parse()를 이용하여 객체를 문자열로 변환하고 다시 파싱하여 깊은 복사를 수행할 수 있습니다. 단, 이 방법은 함수나 특별한 타입의 객체에는 적용되지 않을 수 있습니다."}}],["$","$L3",null,{"code":"const originalObject = {\n  nestedObject: {\n    key: 'value'\n  },\n  otherKey: 'otherValue'\n};\n\nconst deepCopy = JSON.parse(JSON.stringify(originalObject));\n        ","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"하지만 이방법은 사용하기는 쉽지만 <b>다른 방법에비해 아주 느리다</b>고 알려져 있습니다."}}]],["$","$L4",null,{"postid":8,"prePostTitle":{"id":9,"title":"일반함수 VS 화살표 함수의 this 바인딩","date":"2023-03-20 22:11:33","folder":"Javascript","tag":["JavaScript"],"preview":"일반 함수와 화살표 함수의 this 바인딩에 대한 차이에 대한 내용을 약간 각색하여 정리하겠습니다. 일반 함수에서 this는 함수가 호출될 때 동적으로 결정되며, 호출된 컨텍스트에 바인딩됩니다.","post":[{"type":"Heading","headingType":"h4","value":"일반 함수"},{"type":"code","value":"const foo = function () {\n  console.log('일반 함수');\n}"},{"type":"Heading","headingType":"h4","value":"화살표 함수"},{"type":"code","value":"const foo = () => console.log('화살표 함수');"},{"type":"normal","value":"두 함수는 기능적으로 완전히 동일하게 작동합니다."},{"type":"Heading","headingType":"h2","value":"JavaScript 일반 함수의 this 바인딩"},{"type":"code","value":"const cat = {\n  name: 'meow',\n  foo1: function() {\n    const foo2 = function() {\n      console.log(this.name); // undefined\n    }\n    foo2();\n  }\n};\n\ncat.foo1(); // undefined\n        "},{"type":"stringlist","value":"일반 함수에서 this는 함수가 호출될 때 함수가 어디에서 호출되었는지에 따라 동적으로 결정되며, 호출된 컨텍스트에 바인딩됩니다.\n        전역스코프에서 실행(선언)이 되어 foo2 내부의 this는 지정되지 않아서 곧 전역 객체를 가리키게 됩니다.\n        내부 함수의 this는 전역 객체(window)를 가리키므로 전역 객체에 name이란 속성은 존재하지 않아 undefined 출력 됩니다.\n        이 내부함수가 global에서도 제대로 작동하기 위해서 우리는 저 내부함수에 객체의 this를 바인딩 할 필요가 있을 것입니다."},{"type":"Heading","headingType":"h2","value":"JavaScript 화살표 함수의 this 바인딩"},{"type":"code","value":"const cat = {\n  name: 'meow',\n  foo1: function() {\n    const foo2 = () => {\n      console.log(this.name);\n    }\n    foo2();\n  }\n};\n\ncat.foo1(); // meow\n"},{"type":"normal","value":"위 코드와 달라진 점은 cat 객체의 내부함수 foo2가 화살표 함수로 선언됐다는 점 뿐입니다. 그런데 이번엔 우리가 의도한대로 meow가 잘 찍혔습니다. 어떻게 가능한걸까요? </br></br>\n        화살표 함수에서 this는 함수가 정의된 스코프에서 상속됩니다. (Lexical this) 내부 함수의 this는 외부 함수의 this를 상속받아 cat을 가리키므로 meow 출력 됩니다."},{"type":"Heading","headingType":"h2","value":"addEventListener()의 콜백함수"},{"type":"normal","value":"원래 addEventListener의 콜백함수에서는 this에 해당 이벤트 리스너가 호출된 엘리먼트가 바인딩되도록 정의되어 있습니다. 그러나 화살표 함수를 사용할 경우, 이미 this의 값이 정해져 있는 콜백함수의 경우 기존 바인딩 값이 사라지고 상위 스코프(이 경우엔 전역 객체)가 바인딩되기 때문에 의도했던 대로 동작하지 않을 수 있습니다. 물론 상위 스코프의 속성들을 쓰려고 의도한 경우라면 사용할 수 있습니다."},{"type":"code","value":"const button = document.getElementById('myButton');\n\n// 화살표 함수 사용 (비권장)\nbutton.addEventListener('click', () => {\n  console.log(this); // Window\n  this.innerHTML = 'clicked'; // 전역 객체(window)의 innerHTML을 변경\n});\n\n// 일반 함수 사용\nbutton.addEventListener('click', function() {\n    console.log(this); // button 엘리먼트\n    this.innerHTML = 'clicked'; // 해당 버튼의 innerHTML을 변경\n});    \n"},{"type":"stringlist","value":"화살표 함수의 경우, this가 해당 이벤트 리스너를 호출한 문맥이 아닌 상위 스코프의 this를 가리키므로 비추천합니다.\n        일반 함수를 사용하면 this는 해당 이벤트가 발생한 엘리먼트를 가리키며, 버튼의 innerHTML을 변경하는 등의 작업이 의도한 대로 동작합니다.\n        "},{"type":"normal","value":"위의 예시에서는 화살표 함수를 사용할 경우 this가 Window를 가리키므로 버튼의 innerHTML을 변경하는 동작이 의도와 다릅니다. 따라서 일반 함수를 사용하여 콜백함수를 정의하는 것이 바람직합니다.\n        "}]},"nextPostTile":{"id":7,"title":"const, let, var","date":"2023-02-21 22:11:33","folder":"Javascript","tag":["JavaScript"],"preview":"let은 재할당 할 수 있다는 점에서 var와 유사합니다. 그렇지만 var는 어휘적 유효범위(lexical scope)를 따르는 반면 let은 블록 유효범위를 따릅니다. 일단 블록 유효범위 변수는 if블록이나 for 반복문 같은 블록의 내부에만 존재한다고 알아두세요.","post":[{"type":"Heading","headingType":"h4","value":"블록유효범위를 따르는 const"},{"type":"stringlist","value":"블록의 문맥 내에서 재할당할 수 없는 변수 입니다.\n        const는 한 번 선언되면 재할당이 불가능한 변수를 선언하는 데 사용됩니다.\n        그러나 const로 선언된 변수가 가리키는 값(객체 또는 배열 등)의 내부는 수정될 수 있습니다. 이는 변수가 참조하는 메모리 주소가 변경되지 않는다는 의미입니다."},{"type":"code","value":"const discountable = [];\n\nfor(let i = 0; i < cart.length; i++){\n    discountable.push(i);\n}"},{"type":"Heading","headingType":"h4","value":"블록유효범위를 따르는 let"},{"type":"stringlist","value":"let은 변수를 선언하고, 필요에 따라 재할당할 수 있는 키워드입니다.\n        let은 블록 유효범위(block scope)를 가지며, 블록 외부에서는 해당 변수에 접근할 수 없습니다.\n        같은 블록 내에서 같은 이름의 변수를 재선언할 수 없습니다."},{"type":"code","value":"if (true) {\n    let blockScopedVar = 'I am a block-scoped variable';\n    console.log(blockScopedVar); // 유효\n}\n\nconsole.log(blockScopedVar); // 에러: blockScopedVar is not defined"},{"type":"GuideMessage","value":"var를 사용하는 경우에는 같은 유효범위에서 같은 이름의 변수를 다시 선언할 수 있지만</br>\n        let과 const는 같은 이름이 변수를 다시 선언할 수 없습니다."},{"type":"Heading","headingType":"h4","value":"어휘적 유효범위(lexical scope)를 따르는 var"},{"type":"stringlist","value":"var는 어휘적 유효범위(lexical scope)를 가지며, 함수 유효범위를 따릅니다.\n        함수 내에서 선언된 변수는 함수 전체에서 접근 가능하며, 함수 외부에서는 변수에 접근할 수 없습니다.\n        같은 함수 내에서 같은 이름의 변수를 재선언할 수 있습니다."},{"type":"code","value":"function exampleFunction() {\n    var lexicalScopedVar = 'I am a lexical-scoped variable';\n    console.log(lexicalScopedVar); // 유효\n}\n\nconsole.log(lexicalScopedVar); // 에러: lexicalScopedVar is not defined"},{"type":"Heading","headingType":"h4","value":"var를 사용하여 함수 유효범위를 따르는 클로저"},{"type":"code","value":"// var를 사용한 클로저 예제\nfunction createClosureVar() {\n    var closuresVar = [];\n\n    for (var i = 0; i < 5; i++) {\n        closuresVar.push(function () {\n            console.log(i);\n        });\n    }\n\n    return closuresVar;\n}\n\nvar closuresVarArray = createClosureVar();\n\n// 클로저 호출\nfor (var j = 0; j < closuresVarArray.length; j++) {\n    closuresVarArray[j](); // 모든 클로저가 5를 출력\n}"},{"type":"stringlist","value":"var를 사용한 경우, for 루프에서 생성된 클로저가 i를 참조하고 있습니다.\n        하지만 var는 함수 스코프를 갖기 때문에 for 루프가 종료된 후에도 i는 전역 스코프에 남아 있고, 클로저는 항상 전역 스코프에 있는 i를 참조합니다.\n        따라서 클로저를 호출할 때 모든 클로저가 i의 최종 값인 5를 출력합니다.\n        "},{"type":"GuideMessage","value":"<b>var를 사용</b>한 경우 함수 내부에서 만든 <b>클로저에서 외부 변수를 참조할 때 주의</b>가 필요합니다."},{"type":"Heading","headingType":"h4","value":"let을 사용하여 클로저 문제를 해결한 코드"},{"type":"code","value":"// let을 사용한 클로저 예제\nfunction createClosureLet() {\n    var closuresLet = [];\n\n    for (let i = 0; i < 5; i++) {\n        closuresLet.push(function () {\n            console.log(i);\n        });\n    }\n\n    return closuresLet;\n}\n\nvar closuresLetArray = createClosureLet();\n\n// 클로저 호출\nfor (let j = 0; j < closuresLetArray.length; j++) {\n    closuresLetArray[j](); // 각 클로저가 해당하는 값(0부터 4까지)을 출력\n}"},{"type":"stringlist","value":"let을 사용한 경우, for 루프에서 생성된 클로저가 i를 참조하고 있습니다. \n        let은 블록 스코프를 갖기 때문에 각 클로저는 해당 블록에서의 i를 참조합니다.\n        따라서 클로저를 호출할 때 각각의 클로저는 자신이 생성된 시점의 i 값을 출력하게 됩니다."},{"type":"GuideMessage","value":"쉽게 말해 let을 이용하면 for문이 반복될 때마다 값을 잠급니다."},{"type":"Heading","headingType":"h4","value":"블록 유효범위 (Block Scope)"},{"type":"stringlist","value":"블록 유효범위는 중괄호 {}로 둘러싸인 영역을 가리킵니다.\n        let 및 const 키워드로 선언된 변수는 블록 유효 범위를 가집니다. 즉, 해당 변수는 그 변수가 선언된 블록 내에서만 유효하며 외부에서 접근할 수 없습니다.\n        블록은 주로 조건문 (if, else, for, while 등) 내부, 함수 내부, 또는 단독 중괄호 블록으로 정의됩니다."},{"type":"Heading","headingType":"h4","value":"어휘적 유효범위 (Lexical Scope 또는 Static Scope)"},{"type":"normal","value":"어휘적 유효범위는 코드를 작성하는 시점에 결정되는 스코프의 종류입니다. 변수가 어디에서 선언되었는지에 따라 그 변수의 유효 범위가 정해집니다. 어휘적 유효범위는 함수를 어디에 작성했는지에 따라 함수의 스코프가 결정되는 것을 의미합니다."},{"type":"code","value":"function outer() {\n  let outerVar = 'I am outer';\n\n  function inner() {\n    let innerVar = 'I am inner';\n    console.log(outerVar); // outerVar는 어휘적 유효범위에 의해 접근 가능\n    console.log(innerVar); // innerVar는 현재 스코프에 선언되어 있어 직접 접근 가능\n  }\n\n  inner();\n\n  console.log(outerVar); // outerVar는 여전히 어휘적 유효범위에 의해 접근 가능\n  console.log(innerVar); // Error: innerVar는 outer 함수의 스코프를 벗어나서 접근 불가능\n}\n\nouter();"},{"type":"normal","value":"위 예제에서 inner 함수는 자신의 스코프와 외부 함수인 outer 함수의 스코프에 접근할 수 있습니다. 이는 어휘적 유효범위에 의한 것입니다. 변수의 유효 범위는 코드를 작성하는 시점에 이미 정해져 있습니다."},{"type":"Heading","headingType":"h4","value":"함수 유효범위 (Function Scope)"},{"type":"normal","value":"함수 유효범위는 함수 내에서 선언된 변수가 함수 내부에서만 유효하다는 원칙을 나타냅니다. 함수 유효범위는 함수가 실행될 때마다 새로운 스코프가 생성되며, 함수 내에서 선언된 변수는 해당 함수 내에서만 접근할 수 있습니다."},{"type":"code","value":"function exampleFunction() {\n  let localVar = 'I am a local variable'; // 함수 유효범위에 속한 변수\n\n  if (true) {\n    let blockVar = 'I am a block-scoped variable'; // 블록 유효범위에 속한 변수\n    console.log(localVar); // 함수 유효범위 내에서 접근 가능\n    console.log(blockVar); // 블록 유효범위 내에서 접근 가능\n  }\n\n  console.log(localVar); // 함수 유효범위 내에서 접근 가능\n  console.log(blockVar); // Error: 블록 유효범위를 벗어난 곳에서는 접근 불가능\n}"},{"type":"normal","value":"위 예제에서 localVar는 함수 유효범위 내에서 선언되어 함수 전체에서 접근 가능합니다. 하지만 blockVar는 블록 내에서만 유효한 변수이므로 블록 외부에서는 접근할 수 없습니다. </br></br>\n\n        요약하면, 어휘적 유효범위는 코드를 작성하는 시점에 변수의 스코프가 결정되며, 함수 유효범위는 함수가 실행될 때 생성되는 스코프입니다. 함수 유효범위는 어휘적 유효범위를 따르기 때문에 함수가 어디에 선언되었는지에 따라 스코프가 결정됩니다."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$9","$Lb",null]]},[null,["$","$Lc",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L5",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$d","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$e","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$f","children":"404"}],["$","div",null,{"style":"$10","children":["$","h2",null,{"style":"$11","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/80c9ce4c138da48c.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
b:E{"digest":"NEXT_NOT_FOUND"}
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
a:null
