2:I[5250,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
3:I[688,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
4:I[8843,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
6:I[777,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","216","static/chunks/app/(layoutCase)/tags/%5Btagname%5D/%5Bpostid%5D/page-f4d08730f917835e.js"],""]
7:I[5613,[],""]
a:I[1778,[],""]
e:I[3866,["250","static/chunks/250-8b90be581650ff9d.js","399","static/chunks/399-caf055eb211349e2.js","46","static/chunks/46-f5c36f830a2ce4c4.js","730","static/chunks/730-f56ebe909f1c8bdb.js","35","static/chunks/35-917f6d62db20f146.js","464","static/chunks/app/(layoutCase)/layout-b678e44923655761.js"],""]
5:T713,my-nextjs-app/
├── app/
│   ├── api/
│   │   ├── auth/
│   │   │   └── [...nextauth]/
│   │   │       └── route.ts         # NextAuth 설정 (인증 엔드포인트)
│   ├── (auth)/
│   │   ├── login/
│   │   │   └── page.tsx            # 커스텀 로그인 페이지
│   │   ├── signup/
│   │   │   └── page.tsx            # 커스텀 회원가입 페이지 (선택)
│   ├── dashboard/
│   │   └── page.tsx                # 보호된 페이지 (인증 필요)
│   ├── layout.tsx                  # 루트 레이아웃
│   ├── page.tsx                    # 홈 페이지
│   └── globals.css                 # 전역 스타일
├── lib/
│   ├── auth.ts                     # NextAuth 설정 (authOptions)
│   └── db.ts                       # 데이터베이스 연결 (예: Prisma)
├── components/
│   ├── Header.tsx                  # 헤더 컴포넌트
│   ├── Footer.tsx                  # 푸터 컴포넌트
│   └── AuthButton.tsx              # 로그인/로그아웃 버튼 컴포넌트
├── public/
│   ├── images/                     # 정적 이미지 파일
│   └── favicon.ico                 # 파비콘
├── middleware.ts                   # NextAuth 미들웨어 (보호된 라우트 설정)
├── .env                            # 환경 변수 (NEXTAUTH_SECRET, Google ID 등)
├── next.config.mjs                 # Next.js 설정
├── tsconfig.json                   # TypeScript 설정 (TypeScript 사용 시)
├── package.json                    # 프로젝트 의존성 및 스크립트
└── README.md                       # 프로젝트 설명8:["tagname","%ED%8C%A9%ED%86%A0%EB%A6%AC%ED%8C%A8%ED%84%B4","d"]
9:["postid","75","d"]
b:"$Lc"
f:[]
10:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
11:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
12:{"display":"inline-block"}
13:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["5LFqdBjTKdOX-pUbi_i-X",[[["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%ED%8C%A9%ED%86%A0%EB%A6%AC%ED%8C%A8%ED%84%B4","d"],{"children":[["postid","75","d"],{"children":["__PAGE__?{\"tagname\":\"팩토리패턴\",\"postid\":\"75\"}",{}]}]}]}],"search":["__DEFAULT__",{}]}]},"$undefined","$undefined",true],["",{"children":["(layoutCase)",{"children":["tags",{"children":[["tagname","%ED%8C%A9%ED%86%A0%EB%A6%AC%ED%8C%A8%ED%84%B4","d"],{"children":[["postid","75","d"],{"children":["__PAGE__",{},["$L1",[[["$","article",null,{"className":"$undefined","children":["$","header",null,{"children":["$","h1",null,{"className":"postUserInfo_h1__uhAqy","children":"[TECH-QA] NextAuth.js"}]}]}],["$","div",null,{"className":"postUserInfo_post_meta__ABvuC","children":[["$","span",null,{"children":["Posted"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":["13 days"," "]}]]}],["$","span",null,{"className":"postUserInfo_update__f345P","children":["Updated"," ",["$","time",null,{"className":"postUserInfo_time__2exyR","children":"13 days"}]]}]]}],["$","div",null,{"children":["$","span",null,{"className":"postUserInfo_post_meta__ABvuC","children":["By"," ",["$","em",null,{"children":["$","$L2",null,{"href":"https://nam-yeun-hwa.github.io/","className":"postUserInfo_author__fVGYM","children":"베짱이가 되고싶은 개미。"}]}]]}]}]],[[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"기본 설정"}],false,false],["$","$L3",null,{"keyword":"AUTH_SECRET","title":"환경 변수 설정"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"프로젝트 루트에 .env 파일을 생성하고 필요한 환경 변수를 추가합니다."}}],["$","$L4",null,{"code":"AUTH_SECRET=your-secret-key\nAUTH_GITHUB_ID=your-github-client-id\nAUTH_GITHUB_SECRET=your-github-client-secret","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"AUTH_SECRET은 JWT 암호화를 위해 필수입니다. ext-auth에서 AUTH_SECRET은 세션 관리와 JWT(JSON Web Token) 서명을 위해 사용되는 비밀 키(secret key)입니다. 이 환경 변수는 NextAuth.js가 사용자 세션을 안전하게 암호화하고 인증 토큰을 생성하거나 검증할 때 사용됩니다. openssl rand -base64 32 명령어로 생성할 수 있습니다."}}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"AUTH_SECRET은 유저별로 생성되거나 전달되지 않습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"AUTH_SECRET은 애플리케이션 수준에서 설정되는 단일 비밀 키로, 모든 사용자에 대해 동일하게 사용됩니다. 즉, 개별 유저마다 다른 AUTH_SECRET을 사용할 필요는 없습니다. 이 키는 NextAuth.js가 세션 관리와 JWT 서명을 위해 <span class=\"point\">서버 측에서 사용하는 고정된 값</span>입니다. 이 모든 작업은 서버에서 일관되게 이루어지며, 유저별로 다른 키를 사용할 필요가 없습니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>JWT 서명</b>: next-auth는 기본적으로 JWT를 사용하여 사용자 세션을 관리합니다. AUTH_SECRET은 JWT를 서명하고 검증하는 데 사용되는 비밀 키로, 이 키가 없거나 잘못되면 토큰이 유효하지 않게 됩니다."}}],["$","li","3",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>세션 암호화</b>: 세션 데이터(예: 사용자 정보)를 암호화하여 보안을 강화합니다."}}],["$","li","4",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>CSRF 토큰 보호</b>: next-auth가 CSRF(Cross-Site Request Forgery) 공격을 방지하기 위해 생성하는 토큰에도 이 키가 사용됩니다."}}],["$","li","5",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>유저별 토큰과 혼동 가능성</b>: 로그인 시 서버는 유저별로 고유한 JWT를 생성합니다. 이 토큰에는 유저의 정보(예: userId, email, role)가 포함되며, <span class=\"point\">AUTH_SECRET을 사용해 서명</span>됩니다. 하지만 AUTH_SECRET 자체는 토큰을 생성/검증하는 데 사용되는 고정된 키일 뿐입니다."}}],["$","li","6",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>클라이언트로 전달되지 않음</b>: AUTH_SECRET은 절대 클라이언트(브라우저)로 전달되지 않습니다. 이는 서버 내부에서만 사용되는 비밀 값으로, 유저와 직접적인 상호작용이 없습니다."}}],["$","li","7",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>세션 데이터</b>: NextAuth.js는 세션 데이터를 데이터베이스(옵션) 또는 JWT 자체에 저장할 수 있습니다. 유저별 정보는 이 세션 데이터에 저장되며, AUTH_SECRET은 이 데이터를 암호화하거나 보호하는 데 사용됩니다."}}],["$","li","8",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"서버는 요청마다 AUTH_SECRET으로 JWT를 검증해 유저를 인증."}}]]}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"값은 안전하고 예측하기 어려운 문자열이어야 하며, 최소 32자 이상의 무작위 문자열을 사용하는 것이 권장됩니다. 예를 들어, 다음 명령어로 생성할 수 있습니다."}}],["$","$L4",null,{"code":"openssl rand -base64 32","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"App Router를 사용하는 경우, /app/api/auth/[...nextauth]/route.ts 파일에서 설정합니다. 이 파일은 NextAuth가 인증 관련 요청(로그인, 로그아웃, 세션 관리 등)을 처리하는 엔드포인트 역할을 합니다.<br /><br />만약 Pages Router(/pages)를 사용한다면, /pages/api/auth/[...nextauth].ts 파일에서 비슷한 방식으로 설정하지만, App Router에서는 route.ts 파일을 사용합니다. 또한, App Router에서는 GET, POST 등의 HTTP 메서드를 명시적으로 내보내야 합니다."}}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>App Router</b>: App Router에서는 next-auth의 최신 버전(4.x)을 사용하고, next-auth/middleware를 활용해 보호된 라우트를 설정할 수 있습니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>미들웨어</b>: 인증이 필요한 페이지를 보호하려면 /app/middleware.ts에서 NextAuth 미들웨어를 설정합니다."}}],["$","li","2",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"<b>환경 변수</b>: NEXTAUTH_SECRET과 제공자(예: Google, GitHub)의 클라이언트 ID/시크릿은 .env 파일에 설정해야 합니다."}}]]}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"프로젝트 구조 예시"}],false,false],["$","$L4",null,{"code":"$5","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"/app/(auth)/login/page.tsx : 커스텀 로그인 페이지로, signIn 함수를 호출하거나 UI를 제공합니다. 필요에 따라 회원가입 페이지(/signup) 등을 추가."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"/app/dashboard/page.tsx : 인증이 필요한 보호된 페이지. NextAuth 미들웨어로 접근을 제어할 수 있음."}}]]}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","app/api/auth/[...nextauth]/route.ts"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"NextAuth의 인증 엔드포인트를 처리하는 파일입니다. GET, POST 메서드로 NextAuth를 설정합니다. <br />\n\t\t\t\t "}}],["$","$L4",null,{"code":"import NextAuth from \"next-auth\";\nimport GitHubProvider from \"next-auth/providers/github\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    GitHubProvider({\n      clientId: process.env.AUTH_GITHUB_ID,\n      clientSecret: process.env.AUTH_GITHUB_SECRET,\n    }),\n  ],\n});\n\nexport { handlers as GET, handlers as POST };","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"NextAuth(authOptions)를 호출하여 Google, GitHub 등의 인증 제공자를 처리하며 handlers는 인증 관련 API 엔드포인트를 처리합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","/lib/auth.js"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"NextAuth 설정(authOptions)을 정의합니다. GoogleProvider, 세션 콜백, JWT 설정 등을 설정합니다. "}}],["$","$L4",null,{"code":"import NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        const authResponse = await fetch(\"/your/endpoint\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(credentials),\n        });\n\n        if (!authResponse.ok) {\n          return null;\n        }\n        const user = await authResponse.json();\n        return user;\n      },\n    }),\n  ],\n});\n","children":"$undefined"}],["$","$L3",null,{"keyword":"SessionProvider 사용","title":"클라이언트 사용법"}],[["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_tip__CZ2Ex","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"클라이언트에서는 next-auth/react의 훅(useSession, signIn, signOut 등)을 사용해 인증 상태를 관리하거나 로그인/로그아웃을 처리합니다."}}]}],false,false,false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","app/layout.tsx"]}]],["$","$L4",null,{"code":"import { SessionProvider } from \"next-auth/react\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"ko\">\n      <body>\n        <SessionProvider>{children}</SessionProvider>\n      </body>\n    </html>\n  );\n}","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"App Router에서는 SessionProvider가 클라이언트 컴포넌트이므로, 루트 레이아웃에 직접 추가할 수 없습니다. 별도의 클라이언트 컴포넌트를 만들어야 합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","pages/_app.tsx"]}]],["$","$L4",null,{"code":"\nimport { SessionProvider } from \"next-auth/react\";\n\nexport default function App({ Component, pageProps: { session, ...pageProps } }) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}\n","children":"$undefined"}],["$","$L3",null,{"keyword":"useSession 사용","title":"클라이언트 사용법"}],[["$","blockquote",null,{"className":"Prompts_prompt_container__In47e Prompts_prompt__caN6p Prompts_prompt_tip__CZ2Ex","children":["$","p",null,{"className":"Prompts_detail__nD6Io","dangerouslySetInnerHTML":{"__html":"클라이언트에서는 next-auth/react의 훅(useSession, signIn, signOut 등)을 사용해 인증 상태를 관리하거나 로그인/로그아웃을 처리합니다."}}]}],false,false,false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"클라이언트 컴포넌트에서 useSession 훅을 사용하여 <b>세션 상태</b>를 확인합니다."}}],["$","$L4",null,{"code":"// app/client/page.tsx\n\n\"use client\";\n\nimport { useSession, signIn, signOut } from \"next-auth/react\";\n\nexport default function ClientPage() {\n  const { data: session, status } = useSession();\n\n  if (status === \"loading\") return <p>로딩 중...</p>;\n  if (status === \"authenticated\") {\n    return (\n      <>\n        <p>{session.user?.name}님으로 로그인됨</p>\n        <button onClick={() => signOut()}>로그아웃</button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <p>로그인하지 않음</p>\n      <button onClick={() => signIn(\"github\")}>GitHub로 로그인</button>\n    </>\n  );\n}\n","children":"$undefined"}],["$","ul",null,{"className":"liststyle_ul__uFdBS","children":[["$","li","0",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"useSession은 data (세션 객체)와 status (loading, authenticated, unauthenticated)를 반환합니다."}}],["$","li","1",{"className":"liststyle_dot__SMzS4","dangerouslySetInnerHTML":{"__html":"signIn과 signOut은 각각 로그인과 로그아웃을 처리합니다."}}]]}],[false,false,["$","h3",null,{"className":"heading_h3__UisKt","style":{"fontWeight":"NORMAL"},"children":"세션 업데이트"}],false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"useSession의 update 메서드를 사용하여 클라이언트 측에서 세션을 업데이트할 수 있습니다."}}],["$","$L4",null,{"code":"// app/client/page.tsx\n\"use client\";\n\nimport { useSession } from \"next-auth/react\";\n\nexport default function UpdateSessionPage() {\n  const { data: session, update } = useSession();\n\n  const handleUpdate = async () => {\n    await update({ name: \"새로운 이름\" }); // 세션 데이터 업데이트\n  };\n\n  return (\n    <>\n      <p>현재 사용자: {session?.user?.name}</p>\n      <button onClick={handleUpdate}>이름 업데이트</button>\n    </>\n  );\n}\n","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"update 메서드는 서버의 jwt 콜백을 트리거하여 세션 데이터를 갱신합니다."}}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"<서버 측 사용법> App Router에서 서버 세션 확인"}],false,false],["$","$L3",null,{"keyword":"auth 함수","title":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"/app/api/auth/[...nextauth]/route.ts에서 내보낸 <span class=\"point\">auth 함수</span>를 사용합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","app/server/page.tsx"]}]],["$","$L4",null,{"code":"import { auth , GET, POST } from @/app/auth\";\n\nexport default async function ServerPage() {\n  const session = await auth();\n\n  if (!session) {\n    return <p>로그인이 필요합니다.</p>;\n  }\n\n  return <p>서버에서 확인된 사용자: {session.user?.name}</p>;\n}","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"auth 함수는 서버 컴포넌트, 미들웨어, API 라우트 등에서 사용할 수 있는 통합 메서드입니다."}}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"<서버 측 사용법> Pages Router에서 서버 세션 확인"}],false,false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"Pages Router에서는 getServerSession을 사용합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","pages/server.js"]}]],["$","$L4",null,{"code":"import { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"./api/auth/[...nextauth]\";\n\nexport default function ServerPage({ session }) {\n  if (!session) {\n    return <p>로그인이 필요합니다.</p>;\n  }\n\n  return <p>서버에서 확인된 사용자: {session.user?.email}</p>;\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getServerSession(context.req, context.res, authOptions);\n  return {\n    props: {\n      session,\n    },\n  };\n}","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"getServerSession은 세션 확인 속도가 빠르며, 추가 네트워크 요청을 줄입니다."}}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"미들웨어로 페이지 보호"}],false,false],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","/middleware.ts"]}]],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"NextAuth 미들웨어를 설정하여 특정 경로(예: /dashboard)에 인증이 필요하도록 제한. 예: export { default } from 'next-auth/middleware';"}}],["$","$L4",null,{"code":"import { withAuth } from \"next-auth/middleware\";\n\nexport default withAuth({\n  callbacks: {\n    authorized: ({ token }) => !!token, // 토큰이 있으면 인증된 것으로 간주\n  },\n});\n\nexport const config = {\n  matcher: [\"/dashboard/:path*\"], // /dashboard 경로와 하위 경로 보호\n};\n","children":"$undefined"}],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"/dashboard로 시작하는 모든 경로에 대해 인증을 요구"}}],[false,["$","h2",null,{"className":"heading_h2__fsXMw","style":{"fontWeight":"NORMAL"},"children":"커스텀 로그인 페이지"}],false,false],["$","div",null,{"className":"postDetail_content__OTeO2","dangerouslySetInnerHTML":{"__html":"기본 로그인 페이지를 커스터마이징하려면 pages 옵션을 사용합니다."}}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","app/api/auth/[...nextauth]/route.ts"]}]],["$","$L4",null,{"code":"export const { handlers, auth } = NextAuth({\n  providers: [GitHubProvider({ clientId: process.env.AUTH_GITHUB_ID, clientSecret: process.env.AUTH_GITHUB_SECRET })],\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n});\n","children":"$undefined"}],[false,false,false,["$","h4",null,{"className":"heading_h4__ZTbA0","style":{"fontWeight":"NORMAL"},"children":["📝 ","app/auth/signin/page.tsx"]}]],["$","$L4",null,{"code":"import { getProviders, signIn } from \"next-auth/react\";\n\nexport default async function SignIn() {\n  const providers = await getProviders();\n\n  return (\n    <div>\n      <h1>로그인</h1>\n      {providers &&\n        Object.values(providers).map((provider) => (\n          <div key={provider.name}>\n            <button onClick={() => signIn(provider.id)}>\n              {provider.name}으로 로그인\n            </button>\n          </div>\n        ))}\n    </div>\n  );\n}\n","children":"$undefined"}]],["$","$L6",null,{"postid":75,"prePostTitle":{"id":76,"title":"[TECH-QA] \"TypeScript의 강력한 도구: 유틸리티 타입 활용법\"","date":"2025-07-21 11:14:33","folder":"typescript","tag":["TECH-QA","TypeScript"],"preview":"TypeScript의 유틸리티 타입(Utility Types)은 기존 타입을 기반으로 새로운 타입을 생성하거나 변환하는 데 사용되는 내장 타입 도구입니다. 이를 통해 코드의 재사용성과 타입 안전성을 높일 수 있습니다. 아래는 주요 유틸리티 타입과 그 설명입니다.","post":[{"type":"Heading","headingType":"h2","value":"Partial<t></t>"},{"type":"code","value":"interface User {\n  name: string;\n  age: number;\n}\n\ntype PartialUser = Partial<User>;\n// PartialUser = { name?: string; age?: number; }"},{"type":"stringlist","value":"객체의 일부 속성만 업데이트하거나 부분적으로 사용할 때 유용."},{"type":"Heading","headingType":"h2","value":"Required<t></t>"},{"type":"code","value":"interface User {\n  name?: string;\n  age?: number;\n}\n\ntype RequiredUser = Required<User>;\n// RequiredUser = { name: string; age: number; }"},{"type":"stringlist","value":"타입 T의 모든 속성을 필수(required)로 만듭니다. 선택적 속성을 강제로 필수로 만들 때 사용."},{"type":"Heading","headingType":"h2","value":"Readonly<t></t>"},{"type":"code","value":"interface User {\n  name: string;\n  age: number;\n}\n\ntype ReadonlyUser = Readonly<User>;\n// ReadonlyUser = { readonly name: string; readonly age: number; }"},{"type":"stringlist","value":"타입 T의 모든 속성을 읽기 전용(readonly)으로 만듭니다."},{"type":"Heading","headingType":"h2","value":"Pick<T, K>"},{"type":"code","value":"interface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype PickUser = Pick<User, 'name' | 'age'>;\n// PickUser = { name: string; age: number; }"},{"type":"stringlist","value":"타입 T에서 지정된 키 K만 선택하여 새로운 타입을 만듭니다."},{"type":"Heading","headingType":"h2","value":"Omit<T, K>"},{"type":"code","value":"interface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype OmitUser = Omit<User, 'email'>;\n// OmitUser = { name: string; age: number; }"},{"type":"stringlist","value":"타입 T에서 지정된 키 K를 제외한 새로운 타입을 만듭니다."},{"type":"Heading","headingType":"h2","value":"Record<K, T>"},{"type":"code","value":"type Role = 'admin' | 'user' | 'guest';\ntype UserRecord = Record<Role, string>;\n// UserRecord = { admin: string; user: string; guest: string; }"},{"type":"stringlist","value":"키 타입 K와 값 타입 T로 구성된 객체 타입을 생성합니다."},{"type":"Heading","headingType":"h2","value":"Exclude<T, U>"},{"type":"code","value":"type MyUnion = 'a' | 'b' | 'c';\ntype Excluded = Exclude<MyUnion, 'a'>;\n// Excluded = 'b' | 'c'"},{"type":"stringlist","value":"타입 T에서 U에 할당 가능한 타입을 제외합니다."},{"type":"Heading","headingType":"h2","value":"Extract<T, U>"},{"type":"code","value":"type MyUnion = 'a' | 'b' | 'c';\ntype Extracted = Extract<MyUnion, 'a' | 'b'>;\n// Extracted = 'a' | 'b'"},{"type":"stringlist","value":"타입 T에서 U에 할당 가능한 타입만 추출합니다."},{"type":"Heading","headingType":"h2","value":"NonNullable<t></t>"},{"type":"code","value":"type Nullable = string | null | undefined;\ntype NonNullableType = NonNullable<Nullable>;\n// NonNullableType = string"},{"type":"stringlist","value":"null 또는 undefined가 포함된 타입을 안전하게 다룰 때 사용."},{"type":"Heading","headingType":"h2","value":"ReturnType<t></t>"},{"type":"code","value":"function getUser() {\n  return { name: 'Alice', age: 30 };\n}\n\ntype UserReturn = ReturnType<typeof getUser>;\n// UserReturn = { name: string; age: number; }"},{"type":"stringlist","value":"함수 타입 T의 반환 타입을 추출합니다."},{"type":"Heading","headingType":"h2","value":"Parameters<t></t>"},{"type":"code","value":"function add(a: number, b: string): string {\n  return `${a}${b}`;\n}\n\ntype AddParams = Parameters<typeof add>;\n// AddParams = [number, string]"},{"type":"stringlist","value":"함수 타입 T의 매개변수 타입을 튜플(tuple) 타입으로 정의되었습니다. 튜플은 배열과 유사하지만, 고정된 길이와 각 요소의 타입이 명시적으로 정의된 배열입니다."},{"type":"Heading","headingType":"h2","value":"Awaited<t></t>"},{"type":"code","value":"type PromiseType = Promise<string>;\ntype ResolvedType = Awaited<PromiseType>;\n// ResolvedType = string"},{"type":"stringlist","value":"Promise 타입 T의 해결(resolve) 타입을 추출합니다. 비동기 작업의 결과 타입을 다룰 때 사용."},{"type":"Heading","headingType":"h2","value":"Uppercase<t> Lowercase<t>, Capitalize<t>, Uncapitalize<t></t></t></t></t>"},{"type":"code","value":"type Greeting = 'hello world';\ntype UpperGreeting = Uppercase<Greeting>;\n// UpperGreeting = 'HELLO WORLD'\ntype CapitalizedGreeting = Capitalize<Greeting>;\n// CapitalizedGreeting = 'Hello world'"},{"type":"stringlist","value":"문자열 리터럴 타입을 대문자, 소문자, 첫 글자 대문자, 첫 글자 소문자로 변환합니다. 문자열 리터럴 타입을 변환할 때 사용."}]},"nextPostTile":{"id":74,"title":"[TECH-QA] 개방-폐쇄 원칙(Open-Closed Principle, OCP)","date":"2025-07-16 14:16:33","folder":"React","tag":["TECH-QA"],"preview":"OCP는 소프트웨어 엔티티(클래스, 모듈, 컴포넌트 등)가 확장에는 열려 있고, 변경에는 닫혀 있어야 한다는 원칙으로, 새로운 기능을 추가할 때 기존 코드를 수정하지 않고 확장할 수 있도록 설계하는 것을 목표로 합니다.","post":[{"type":"Heading","headingType":"h2","value":"OCP를 위반하는 Button 컴포넌트(안티패턴)"},{"type":"keyword","value":"OCP 위반,Button 컴포넌트"},{"type":"normal","value":"먼저, 새로운 버튼 variant를 추가할 때마다 기존 코드를 수정해야 하는 안티패턴을 살펴보겠습니다. 이 방식은 OCP를 위반하며 유지보수성을 떨어뜨립니다."},{"type":"code","value":"// 안티패턴: OCP를 위반하는 Button 컴포넌트\nfunction Button({ variant, children, ...props }) {\n  let className = 'button';\n\n  if (variant === 'primary') {\n    className += ' button--primary';\n  } else if (variant === 'secondary') {\n    className += ' button--secondary';\n  } else if (variant === 'danger') {\n    className += ' button--danger';\n  }\n\n  return (\n    <button className={className} {...props}>\n      {children}\n    </button>\n  );\n}\n\n// 사용 예시\n<Button variant=\"primary\">Primary Button</Button>\n<Button variant=\"secondary\">Secondary Button</Button>\n<Button variant=\"danger\">Danger Button</Button>"},{"type":"Heading","headingType":"h4","value":"문제점"},{"type":"stringlist","value":"새로운 variant (예: success)를 추가하려면 Button 컴포넌트 내부의 if-else 로직을 수정해야 함.\n이는 OCP의 \"변경에 닫혀 있어야 한다\"를 위반.\n코드가 복잡해지고, 새로운 요구사항이 생길 때마다 기존 코드 수정이 불가피해짐."},{"type":"Heading","headingType":"h2","value":"OCP를 준수하는 리팩터링 ButtonBase 컴포넌트"},{"type":"keyword","value":"OCP 준수, ButtonBase 컴포넌트"},{"type":"normal","value":"OCP를 준수하기 위해 ButtonBase라는 기본 컴포넌트를 만들고, 이를 확장하여 다양한 버튼 변형을 생성하는 방식으로 리팩터링합니다. 이를 통해 새로운 variant를 추가할 때 기존 코드를 수정하지 않고도 확장이 가능해집니다."},{"type":"code","value":"// 기본 컴포넌트 ButtonBase\nfunction ButtonBase({ className, children, ...props }) {\n  return (\n    <button className={`button ${className}`} {...props}>\n      {children}\n    </button>\n  );\n}\n\n// 확장된 버튼 컴포넌트들\nconst PrimaryButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--primary\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\nconst SecondaryButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--secondary\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\nconst DangerButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--danger\" {...props}>\n    {children}\n  </ButtonBase>\n);\n\n// 사용 예시\n<PrimaryButton>Primary Button</PrimaryButton>\n<SecondaryButton>Secondary Button</SecondaryButton>\n<DangerButton>Danger Button</DangerButton>\n\n// 새로운 SuccessButton 추가 (기존 코드 수정 없이 가능)\nconst SuccessButton = ({ children, ...props }) => (\n  <ButtonBase className=\"button--success\" {...props}>\n    {children}\n  </ButtonBase>\n);"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>확장성</b>: 새로운 버튼 변형(예: SuccessButton)을 추가할 때 ButtonBase나 기존 컴포넌트를 수정하지 않아도 됨.\n<b>유지보수성</b>: 각 버튼 변형이 독립적이어서 코드가 간결하고 관리하기 쉬움.\n<b>OCP 준수</b>: 새로운 기능을 추가하기 위해 기존 코드를 변경하지 않고 확장 가능."},{"type":"Heading","headingType":"h2","value":"컴포넌트 합성 패턴 Card 컴포넌트"},{"type":"keyword","value":"컴포넌트 합성 패턴"},{"type":"normal","value":"OCP를 준수하는 또 다른 방법은 컴포넌트 합성 패턴을 사용하는 것입니다. Card 컴포넌트를 예로 들어, 다양한 콘텐츠를 유연하게 확장할 수 있도록 설계해 보겠습니다."},{"type":"Heading","headingType":"h4","value":"기본 Card 컴포넌트"},{"type":"code","value":"function Card({ header, body, footer, ...props }) {\n  return (\n    <div className=\"card\" {...props}>\n      {header && <div className=\"card-header\">{header}</div>}\n      {body && <div className=\"card-body\">{body}</div>}\n      {footer && <div className=\"card-footer\">{footer}</div>}\n    </div>\n  );\n}\n\n// 사용 예시\n<Card\n  header={<h2>Card Title</h2>}\n  body={<p>This is the card content.</p>}\n  footer={<PrimaryButton>Action</PrimaryButton>}\n/>"},{"type":"Heading","headingType":"h4","value":"새로운 확장: 이미지 포함 Card"},{"type":"code","value":"const ImageCard = ({ image, ...props }) => (\n  <Card\n    header={image && <img src={image} alt=\"Card Image\" className=\"card-image\" />}\n    {...props}\n  />\n);\n\n// 사용 예시\n<ImageCard\n  image=\"https://example.com/image.jpg\"\n  body={<p>This is an image card.</p>}\n  footer={<SecondaryButton>Learn More</SecondaryButton>}\n/>"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>유연성</b>: Card 컴포넌트는 다양한 콘텐츠(헤더, 바디, 푸터)를 조합하여 확장 가능.\n<b>재사용성</b>: ImageCard와 같은 새로운 컴포넌트를 기존 Card를 활용해 쉽게 생성.\n<b>OCP 준수</b>: 새로운 Card 변형을 추가할 때 기존 Card 컴포넌트를 수정할 필요 없음."},{"type":"Heading","headingType":"h2","value":"고차 컴포넌트(HOC)를 통한 확장"},{"type":"normal","value":"고차 컴포넌트(HOC)를 사용하면 기존 컴포넌트에 새로운 기능을 추가하여 OCP를 준수할 수 있습니다. 예를 들어, 버튼에 로딩 상태를 추가하는 HOC를 만들어 보겠습니다."},{"type":"code","value":"// HOC: 로딩 상태를 추가\nfunction withLoading(Component) {\n  return function LoadingComponent({ isLoading, children, ...props }) {\n    return (\n      <Component {...props} disabled={isLoading}>\n        {isLoading ? 'Loading...' : children}\n      </Component>\n    );\n  };\n}\n\n// 로딩 가능한 버튼 생성\nconst LoadingPrimaryButton = withLoading(PrimaryButton);\nconst LoadingSecondaryButton = withLoading(SecondaryButton);\n\n// 사용 예시\n<LoadingPrimaryButton isLoading={true}>Click Me</LoadingPrimaryButton>\n<LoadingSecondaryButton isLoading={false}>Click Me</LoadingSecondaryButton>"},{"type":"Heading","headingType":"h4","value":"장점"},{"type":"stringlist","value":"<b>기능 확장</b>: withLoading HOC를 통해 기존 버튼 컴포넌트에 로딩 기능을 추가.\n<b>OCP 준수</b>: 기존 PrimaryButton이나 SecondaryButton 코드를 수정하지 않고 새로운 기능 추가 가능.\n<b>재사용성</b>: HOC는 다른 컴포넌트에도 적용 가능."}]},"segment":"posts"}],["$","div",null,{"className":"footer_footer_container__MsSvO","children":["$","footer",null,{"className":"footer_footer__AwYty","children":[["$","p",null,{"className":"footer_copylight___J5l0","children":["© 2024 ","베짱이가 되고싶은 개미。"," Some rights reserved."]}],["$","p",null,{"className":"footer_theme__bwXbg","children":"portfolio v1.0.0-alpha.3"}]]}]}]],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$8","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/175d6c648827cdb6.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]],"search":["__DEFAULT__",{},["$b","$Ld",null]]},[null,["$","$Le",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(layoutCase)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],"search":["$","$L7",null,{"parallelRouterKey":"search","segmentPath":["children","(layoutCase)","search"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$f","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","className":"","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css","as":"style"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&display=swap","as":"style"}]]}],["$","body",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$10","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$11","children":"404"}],["$","div",null,{"style":"$12","children":["$","h2",null,{"style":"$13","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0c496b0e03d530ba.css","precedence":"next","crossOrigin":""}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/80c9ce4c138da48c.css","precedence":"next","crossOrigin":""}]],"$L14"]]]]
d:E{"digest":"NEXT_NOT_FOUND"}
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"be come 💡"}],["$","meta","3",{"name":"description","content":"App for an Ant Who Wants to Become a Bejjangyi"}]]
1:null
c:null
